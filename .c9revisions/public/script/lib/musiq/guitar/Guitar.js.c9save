{"ts":1360855125242,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// guitar class\n// abstracts a guitar\n\nvar Guitar = function( tuning ){\n    \n    \n    // the strings property of the guitar object is\n    // automatically set when the tuning is set\n    this.tuning( tuning || \"standard\" );\n    \n    // get number of frets shown - set to default\n    this.FRETS_SHOWN = Guitar.FRETS_SHOWN;\n    \n    // initialize frets\n    this.frets = [];\n    for( var i = 0; i < this.FRETS_SHOWN; i++){\n        // for now initialize with empty notes\n        // fill the fret with data!\n        this.frets[i] = new GuitarFret( this, i );\n    }\n    \n    this.createNotes();\n    \n    \n    //console.log( this );\n};\n\nGuitar.tunings = {\n    \"standard\" : {\n        \"name\"    : \"Standard\",\n        \"notes\"   : [ 40, 45, 50, 55, 59, 64 ]\n    },\n    \"drop d\"   : {\n        \"name\"    : \"Drop D\",\n        \"notes\" : [ 38, 45, 50, 55, 59, 64 ]\n    },\n    \"open g\"   : {\n        \"name\"    : \"Open G\",\n        \"notes\" : [ 38, 43, 50, 55, 59, 62 ]\n    }\n};\n\nGuitar.FRETS_SHOWN = 16;\n\nGuitar.prototype.createNotes = function(){\n    \n    // create an matrix of notes:\n    this.notes = _( this.strings ).map( function( str, str_nr ){\n       return _( this.frets ).map( function( fret, fret_nr ){\n           if( this.notes[str_nr] && this.notes[str_nr][fret_nr]){\n               // change the guitar note\n               this.notes[str_nr][fret_nr].note.pos = str.base + fret_nr;\n               // and return the original\n               return this.notes[str_nr][fret_nr];\n           } else {\n               return new GuitarNote( this, str, fret, [str_nr, fret_nr] );\n           } \n       }, this);\n    }, this);\n}\n/**\n * sets or gets the tuning for this guitar\n * @param name : a string representing the type of tuning (default: \"standard\")\n */\nGuitar.prototype.tuning = function( name ){\n    \n    // just return the current tuning if it's not set\n    if( !name ) return this._tuning;\n    \n    this._tuning = Guitar.tunings[name];\n    \n    // check if we have a good tuning?\n    if(!this._tuning){\n        console.warn(\"Tuning not found! \" + name);\n        return;\n    }\n    \n    // we have a tuning, set up the strings and frets\n    \n    // set strings\n    this.strings = _.map(this._tuning.notes, function(item, key){\n        // using 'this' here returns a Window object!\n        return new GuitarString( this, key, item);\n    }, this);\n    \n    // re-create notes\n    this.createNotes();\n    \n    //console.log(this.strings);\n    return this._tuning;\n};\n\n\n\n/**\n * returns a list of chords based on the finger positions for the \n * individual strings\n * @param positions : the finger positions on the individual strings\n * @returns an array of chords that match this fingering position\n * \n */\nGuitar.prototype.chordsFromFingerPos = function( positions ){\n    \n    var notes = this.notesFromFingerPos( positions );\n    \n    return Chord.fromNotes( notes );\n    \n};\n\n/**\n * returns a Chord object from the active notes played on the guitar\n */\nGuitar.prototype.chordsFromActiveNotes = function(){\n    var notes = _(this.activeNotes()).map(function(note){\n            return note.notePos();\n        });\n    \n    console.log(notes);\n    return Chord.fromNotes( notes );\n};\n\n\n\n\n/**\n * returns an array of GuitarNote objects representing\n * all the active notes on the guitar neck\n */\nGuitar.prototype.activeNotes = function(){\n    var activeNotes = [];\n    \n    _(this.notes).each(function(string_notes){\n        _(string_notes).each(function(note){\n            if( note.active() ) activeNotes.push(note);\n        });\n    });\n    \n    return activeNotes;\n    \n    //console.log(activeNotes);\n};\n\n/**\n * @returns a list of Note objects \n */\nGuitar.prototype.notesFromFingerPos = function( positions ){\n    \n    var notes = [];\n    \n    _( positions ).each( function( fret, str ){\n        \n        if( fret > -1 ) {\n            notes.push ( this.notes[str][fret].note.pos );\n            //console.log( this.notes[str][fret].note.simpleNotation() );\n        }\n    }, this);\n\n    //console.log( notes );\n    \n    return notes;\n};\n\n/**\n * get all possible fingering positions from a chord\n * @returns an array with all possible fingerings\n */\nGuitar.prototype.posFromChord = function( chord ){\n    \n};\n\n/**\n * get all notes on a particular fret\n * @param fretNr : the number of the fret to look for\n */\nGuitar.prototype.notesOnFret = function( fretNr ){\n    return _(this.strings).map( function( str, str_nr ){\n        return this.notes[str_nr][fretNr];\n    }, this);\n};\n\n/**\n * @returns the notation for a position on the fretboard\n * @param str : the string selected (int)\n * @param fret : the selected fret (int)\n */\nGuitar.prototype.notationFor = function( str, fret ){\n    return this.notes[str][fret].note.simpleNotation();\n};\n\n\n/**\n * transpose notes on the fretboard\n * @param num : the number of frets to transpose (negative is down, positive is up)\n * \n * we implement this by transposing the state objects of all the notes only\n */\nGuitar.prototype.transpose = function( num ){\n    \n    // get a matrix of copies of all the state objects\n    var so = _(this.notes).map(function(string_notes){\n        return _(string_notes).map(function(note){\n            return _.clone(note.state);\n        });\n    });\n    \n    \n    \n    // assign the state objects to their new notes\n    _(this.notes).each(function(string_notes, str_num){\n        _(string_notes).each(function(note, fret_num){\n            \n            var newfret = fret_num - num;\n            if( newfret > -1 && newfret < Guitar.FRETS_SHOWN ){\n                //console.log( \"copying state: \" + newfret);\n                note.state = so[str_num][newfret];\n            } else {\n                // revert to default state\n                note.state = _.clone(GuitarNote.DEFAULT_STATE);\n            }\n                \n        });\n    });\n};\n\n\n/**\n * show function: shows chords, notes or scales on the fretboard\n * \n * @str : the input string\n * \n * @return : true if the query is valid and the fretboard has changed\n * \n */\n \nGuitar.prototype.show = function( str ){\n    \n    if( !str ) return;\n    \n    // clear fretboard\n    this.clearFretboard();\n    \n    if( MUSIQ.isValidNote( str )){\n        console.log(\"Showing single note\");\n       this.showNotes( [str] ); \n    } else if( MUSIQ.isValidNoteList( str ) ){\n        console.log(\"Showing multiple notes\");\n        var noteList = Note.fromNotation( str );\n        this.showNotes( noteList );\n    } else if( MUSIQ.isValidChord( str )){\n        console.log(\"Showing single chord\");\n        var chord = Chord.fromNotation( str );\n        this.showChords( [chord]);\n    } else if( MUSIQ.isValidScale( str )){\n        console.log(\"Showing single scale\");\n        var scale = Scale.fromNotation( str );\n        this.showScales( [chord]);\n    } else {\n        // cannot be parsed!\n        console.warn(\"String cannot be shown: \" + str);\n        \n        // function failed to show anything\n        return false;\n    }\n    \n    return true;\n    \n};\n\n/**\n * show all the notes on the fretboard that match a\n * particular array of basic notes\n * \n * @param notes : array with notes\n * @param options : object describing some formatting options:\n * \n *      {   only: boolean,\n *          active: boolean,\n *          ghosted: boolean,\n *          tonic: boolean\n *      }\n * \n */\nGuitar.prototype.showNotes = function( notes, options ){\n    \n    // set the default options\n    var opts = options || { only : true, active: true };\n    \n    console.log( notes );\n    // convert it to an array of note objects\n    \n    // TODO: probably solve this with reduce\n    var noteObjects = _(notes).map(function(n){\n            if( n instanceof Note){\n                return n;\n            // check if N is a number\n            } else if( _(n).isNumber() ){\n                \n                console.log(\"Note is number : \" + n);\n                \n                // relative\n                if( n < 12 ){\n                    return new Note(n, true); // return a relative note\n                } else {\n                    // absolute\n                    return new Note(n);\n                }\n            // check if N is a string\n            } else if( _(n).isString() ){\n                // convert it to a note\n                console.log(\"Note is string : \" + n);\n                return Note.fromNotation(n);\n            }\n            // no match\n            // return nothing\n            console.log(\"Note not recognized! \");\n            console.log(n);\n            return;\n        });\n    \n    //console.log( noteObjects );\n    \n    _(this.notes).each(function(string_notes){\n        _(string_notes).each(function(note){\n            \n            // note is a GuitarNote object\n            \n            var noteFound = _(noteObjects).find(function(n){\n                // check if n and note are the same\n                if( !n ) return false;\n                //console.log( n.relative );\n                \n                if( n.relative ){\n                    if( note.relativeNotePos() == n.pos ) return true;\n                } else {\n                    if( note.notePos() == n.pos ) return true;\n                }\n                return false;\n            } );\n            \n            //console.log( \"Note match! \" + note.notation() );\n            // set each note active that matches with one of the notes in the\n            // @notes parameter\n            \n            // the only parameter defines if we should activate only the matched\n            // chords\n            if( opts.only ) note.active( noteFound );\n            else \n                if( noteFound ) note.active( noteFound );\n            \n            if( opts.active ) note.active( noteFound );\n            \n            if( opts.tonic ) note.tonic( noteFound );\n            \n            if( opts.ghosted ) note.ghosted( noteFound );\n        });\n    });\n};\n\n/**\n * show all the notes of a list of chords on the fretboard\n */\nGuitar.prototype.showChords = function( chords ){\n    \n    // get a list of notes - only from the first chord\n    if( chords && chords.length > 0){\n        this.showNotes( chords[0].notes );\n        \n        // set the tonic\n        this.showTonic( chords[0].tonic );\n    }\n    \n    \n};\n\n/**\n * show all notes of a particular scale on the fretboard\n */\nGuitar.prototype.showScales = function( scales ){\n    console.log(\"Function showScales not implemented!\");\n};\n\n/**\n * show the tonic notes on the fret board as well\n * @param note : a Note object representing the current tonic\n */\nGuitar.prototype.showTonic = function( note ){\n    console.log(\"Showing tonic\");\n    console.log( note );\n    \n    this.showNotes( [note], { tonic: true });\n};\n\n/**\n * show the notes on the fretboard\n * @param frets : an array of integers representing which note to show\n *                on what string\n */\nGuitar.prototype.showFrets = function( frets ){\n   \n   _(this.notes).each( function( string_notes, key ){\n       if( frets[key] > -1 ){\n           string_notes[frets[key]].active(true);\n       };\n   });\n   \n};\n\n/**\n * clear all active or ghosted notes from the fretboard\n */\nGuitar.prototype.clearFretboard = function(){\n    \n    _(this.notes).each(function(string_notes){\n        _(string_notes).each(function(note){\n            note.state = { active: false, ghosted: false, root: false };\n        });\n    });\n    \n};"]],"start1":0,"start2":0,"length1":0,"length2":11293}]],"length":11293}
{"contributors":[],"silentsave":false,"ts":1360855681599,"patch":[[{"diffs":[[1,"\"use strict\";\n\n"],[0,"// guitar cl"]],"start1":0,"start2":0,"length1":12,"length2":27}]],"length":11308,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360869439057,"patch":[[{"diffs":[[0,"lidChord"],[1,"Notation"],[0,"( str ))"]],"start1":6441,"start2":6441,"length1":16,"length2":24}]],"length":11316,"saved":false}
{"ts":1360869449434,"patch":[[{"diffs":[[0,"lidChord"],[-1,"Notation"],[0,"( str ))"]],"start1":6441,"start2":6441,"length1":24,"length2":16}]],"length":11308,"saved":false}
{"ts":1360873476057,"patch":[[{"diffs":[[0," * @"],[-1,"str : the input string"],[1,"param matches : an array of Chord / Note / Scale objects to be shown"],[0,"\n * "]],"start1":5885,"start2":5885,"length1":30,"length2":76},{"diffs":[[0,"nction( "],[-1,"str"],[1,"matches"],[0," ){\n    "]],"start1":6068,"start2":6068,"length1":19,"length2":23},{"diffs":[[0,"    "],[-1,"if( MUSIQ.isValidNote( str )){\n        console.log(\"Showing single note\");\n       this.showNotes( [str] ); \n    } else if( MUSIQ.isValidNoteList( str ) ){\n        console.log(\"Showing multiple notes\");\n        var noteList = Note.fromNotation( str );\n"],[1,"_(matches).each(function(match){\n        if( typeof match == Note){\n    "],[0,"    "]],"start1":6175,"start2":6175,"length1":259,"length2":80},{"diffs":[[0,"es( "],[-1,"noteList );\n"],[1,"match );\n    "],[0,"    "]],"start1":6271,"start2":6271,"length1":20,"length2":21},{"diffs":[[0,"if( "],[-1,"MUSIQ.isValidChord( str )){\n        console.log(\"Showing single chord\");\n        var chord = Chord.fromNotation( str );\n"],[1,"typeof match == Chord ){\n    "],[0,"    "]],"start1":6299,"start2":6299,"length1":128,"length2":37},{"diffs":[[0,"Chords( "],[-1,"[chord]);\n"],[1,"match );\n    "],[0,"    } el"]],"start1":6349,"start2":6349,"length1":26,"length2":29},{"diffs":[[0,"if( "],[-1,"MUSIQ.isValidScale( str )){\n        console.log(\"Showing single s"],[1,"typeof match == S"],[0,"cale"],[-1,"\");"],[1," ){"],[0,"\n   "]],"start1":6381,"start2":6381,"length1":80,"length2":32},{"diffs":[[0,"    "],[-1,"var scale = Scale.fromNotation( str );\n        this.showScales( [chord]);\n    } else {\n        // cannot be parsed!\n        console.warn(\"String cannot be shown: \" + str"],[1,"    this.showScales( match "],[0,");\n "]],"start1":6414,"start2":6414,"length1":177,"length2":35},{"diffs":[[0,"    "],[1,"}"],[0,"\n"],[-1," "],[0,"       "],[-1,"// function failed to show anything\n        return false;"],[1," "],[0,"\n    }"],[1,")"],[0,"\n   "]],"start1":6452,"start2":6452,"length1":80,"length2":25}]],"length":10847,"saved":false}
{"ts":1360879634078,"patch":[[{"diffs":[[0,"   if( !"],[-1,"str"],[1,"matches"],[0," ) retur"]],"start1":6093,"start2":6093,"length1":19,"length2":23}]],"length":10851,"saved":false}
