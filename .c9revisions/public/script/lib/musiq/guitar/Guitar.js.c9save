{"ts":1360855125242,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// guitar class\n// abstracts a guitar\n\nvar Guitar = function( tuning ){\n    \n    \n    // the strings property of the guitar object is\n    // automatically set when the tuning is set\n    this.tuning( tuning || \"standard\" );\n    \n    // get number of frets shown - set to default\n    this.FRETS_SHOWN = Guitar.FRETS_SHOWN;\n    \n    // initialize frets\n    this.frets = [];\n    for( var i = 0; i < this.FRETS_SHOWN; i++){\n        // for now initialize with empty notes\n        // fill the fret with data!\n        this.frets[i] = new GuitarFret( this, i );\n    }\n    \n    this.createNotes();\n    \n    \n    //console.log( this );\n};\n\nGuitar.tunings = {\n    \"standard\" : {\n        \"name\"    : \"Standard\",\n        \"notes\"   : [ 40, 45, 50, 55, 59, 64 ]\n    },\n    \"drop d\"   : {\n        \"name\"    : \"Drop D\",\n        \"notes\" : [ 38, 45, 50, 55, 59, 64 ]\n    },\n    \"open g\"   : {\n        \"name\"    : \"Open G\",\n        \"notes\" : [ 38, 43, 50, 55, 59, 62 ]\n    }\n};\n\nGuitar.FRETS_SHOWN = 16;\n\nGuitar.prototype.createNotes = function(){\n    \n    // create an matrix of notes:\n    this.notes = _( this.strings ).map( function( str, str_nr ){\n       return _( this.frets ).map( function( fret, fret_nr ){\n           if( this.notes[str_nr] && this.notes[str_nr][fret_nr]){\n               // change the guitar note\n               this.notes[str_nr][fret_nr].note.pos = str.base + fret_nr;\n               // and return the original\n               return this.notes[str_nr][fret_nr];\n           } else {\n               return new GuitarNote( this, str, fret, [str_nr, fret_nr] );\n           } \n       }, this);\n    }, this);\n}\n/**\n * sets or gets the tuning for this guitar\n * @param name : a string representing the type of tuning (default: \"standard\")\n */\nGuitar.prototype.tuning = function( name ){\n    \n    // just return the current tuning if it's not set\n    if( !name ) return this._tuning;\n    \n    this._tuning = Guitar.tunings[name];\n    \n    // check if we have a good tuning?\n    if(!this._tuning){\n        console.warn(\"Tuning not found! \" + name);\n        return;\n    }\n    \n    // we have a tuning, set up the strings and frets\n    \n    // set strings\n    this.strings = _.map(this._tuning.notes, function(item, key){\n        // using 'this' here returns a Window object!\n        return new GuitarString( this, key, item);\n    }, this);\n    \n    // re-create notes\n    this.createNotes();\n    \n    //console.log(this.strings);\n    return this._tuning;\n};\n\n\n\n/**\n * returns a list of chords based on the finger positions for the \n * individual strings\n * @param positions : the finger positions on the individual strings\n * @returns an array of chords that match this fingering position\n * \n */\nGuitar.prototype.chordsFromFingerPos = function( positions ){\n    \n    var notes = this.notesFromFingerPos( positions );\n    \n    return Chord.fromNotes( notes );\n    \n};\n\n/**\n * returns a Chord object from the active notes played on the guitar\n */\nGuitar.prototype.chordsFromActiveNotes = function(){\n    var notes = _(this.activeNotes()).map(function(note){\n            return note.notePos();\n        });\n    \n    console.log(notes);\n    return Chord.fromNotes( notes );\n};\n\n\n\n\n/**\n * returns an array of GuitarNote objects representing\n * all the active notes on the guitar neck\n */\nGuitar.prototype.activeNotes = function(){\n    var activeNotes = [];\n    \n    _(this.notes).each(function(string_notes){\n        _(string_notes).each(function(note){\n            if( note.active() ) activeNotes.push(note);\n        });\n    });\n    \n    return activeNotes;\n    \n    //console.log(activeNotes);\n};\n\n/**\n * @returns a list of Note objects \n */\nGuitar.prototype.notesFromFingerPos = function( positions ){\n    \n    var notes = [];\n    \n    _( positions ).each( function( fret, str ){\n        \n        if( fret > -1 ) {\n            notes.push ( this.notes[str][fret].note.pos );\n            //console.log( this.notes[str][fret].note.simpleNotation() );\n        }\n    }, this);\n\n    //console.log( notes );\n    \n    return notes;\n};\n\n/**\n * get all possible fingering positions from a chord\n * @returns an array with all possible fingerings\n */\nGuitar.prototype.posFromChord = function( chord ){\n    \n};\n\n/**\n * get all notes on a particular fret\n * @param fretNr : the number of the fret to look for\n */\nGuitar.prototype.notesOnFret = function( fretNr ){\n    return _(this.strings).map( function( str, str_nr ){\n        return this.notes[str_nr][fretNr];\n    }, this);\n};\n\n/**\n * @returns the notation for a position on the fretboard\n * @param str : the string selected (int)\n * @param fret : the selected fret (int)\n */\nGuitar.prototype.notationFor = function( str, fret ){\n    return this.notes[str][fret].note.simpleNotation();\n};\n\n\n/**\n * transpose notes on the fretboard\n * @param num : the number of frets to transpose (negative is down, positive is up)\n * \n * we implement this by transposing the state objects of all the notes only\n */\nGuitar.prototype.transpose = function( num ){\n    \n    // get a matrix of copies of all the state objects\n    var so = _(this.notes).map(function(string_notes){\n        return _(string_notes).map(function(note){\n            return _.clone(note.state);\n        });\n    });\n    \n    \n    \n    // assign the state objects to their new notes\n    _(this.notes).each(function(string_notes, str_num){\n        _(string_notes).each(function(note, fret_num){\n            \n            var newfret = fret_num - num;\n            if( newfret > -1 && newfret < Guitar.FRETS_SHOWN ){\n                //console.log( \"copying state: \" + newfret);\n                note.state = so[str_num][newfret];\n            } else {\n                // revert to default state\n                note.state = _.clone(GuitarNote.DEFAULT_STATE);\n            }\n                \n        });\n    });\n};\n\n\n/**\n * show function: shows chords, notes or scales on the fretboard\n * \n * @str : the input string\n * \n * @return : true if the query is valid and the fretboard has changed\n * \n */\n \nGuitar.prototype.show = function( str ){\n    \n    if( !str ) return;\n    \n    // clear fretboard\n    this.clearFretboard();\n    \n    if( MUSIQ.isValidNote( str )){\n        console.log(\"Showing single note\");\n       this.showNotes( [str] ); \n    } else if( MUSIQ.isValidNoteList( str ) ){\n        console.log(\"Showing multiple notes\");\n        var noteList = Note.fromNotation( str );\n        this.showNotes( noteList );\n    } else if( MUSIQ.isValidChord( str )){\n        console.log(\"Showing single chord\");\n        var chord = Chord.fromNotation( str );\n        this.showChords( [chord]);\n    } else if( MUSIQ.isValidScale( str )){\n        console.log(\"Showing single scale\");\n        var scale = Scale.fromNotation( str );\n        this.showScales( [chord]);\n    } else {\n        // cannot be parsed!\n        console.warn(\"String cannot be shown: \" + str);\n        \n        // function failed to show anything\n        return false;\n    }\n    \n    return true;\n    \n};\n\n/**\n * show all the notes on the fretboard that match a\n * particular array of basic notes\n * \n * @param notes : array with notes\n * @param options : object describing some formatting options:\n * \n *      {   only: boolean,\n *          active: boolean,\n *          ghosted: boolean,\n *          tonic: boolean\n *      }\n * \n */\nGuitar.prototype.showNotes = function( notes, options ){\n    \n    // set the default options\n    var opts = options || { only : true, active: true };\n    \n    console.log( notes );\n    // convert it to an array of note objects\n    \n    // TODO: probably solve this with reduce\n    var noteObjects = _(notes).map(function(n){\n            if( n instanceof Note){\n                return n;\n            // check if N is a number\n            } else if( _(n).isNumber() ){\n                \n                console.log(\"Note is number : \" + n);\n                \n                // relative\n                if( n < 12 ){\n                    return new Note(n, true); // return a relative note\n                } else {\n                    // absolute\n                    return new Note(n);\n                }\n            // check if N is a string\n            } else if( _(n).isString() ){\n                // convert it to a note\n                console.log(\"Note is string : \" + n);\n                return Note.fromNotation(n);\n            }\n            // no match\n            // return nothing\n            console.log(\"Note not recognized! \");\n            console.log(n);\n            return;\n        });\n    \n    //console.log( noteObjects );\n    \n    _(this.notes).each(function(string_notes){\n        _(string_notes).each(function(note){\n            \n            // note is a GuitarNote object\n            \n            var noteFound = _(noteObjects).find(function(n){\n                // check if n and note are the same\n                if( !n ) return false;\n                //console.log( n.relative );\n                \n                if( n.relative ){\n                    if( note.relativeNotePos() == n.pos ) return true;\n                } else {\n                    if( note.notePos() == n.pos ) return true;\n                }\n                return false;\n            } );\n            \n            //console.log( \"Note match! \" + note.notation() );\n            // set each note active that matches with one of the notes in the\n            // @notes parameter\n            \n            // the only parameter defines if we should activate only the matched\n            // chords\n            if( opts.only ) note.active( noteFound );\n            else \n                if( noteFound ) note.active( noteFound );\n            \n            if( opts.active ) note.active( noteFound );\n            \n            if( opts.tonic ) note.tonic( noteFound );\n            \n            if( opts.ghosted ) note.ghosted( noteFound );\n        });\n    });\n};\n\n/**\n * show all the notes of a list of chords on the fretboard\n */\nGuitar.prototype.showChords = function( chords ){\n    \n    // get a list of notes - only from the first chord\n    if( chords && chords.length > 0){\n        this.showNotes( chords[0].notes );\n        \n        // set the tonic\n        this.showTonic( chords[0].tonic );\n    }\n    \n    \n};\n\n/**\n * show all notes of a particular scale on the fretboard\n */\nGuitar.prototype.showScales = function( scales ){\n    console.log(\"Function showScales not implemented!\");\n};\n\n/**\n * show the tonic notes on the fret board as well\n * @param note : a Note object representing the current tonic\n */\nGuitar.prototype.showTonic = function( note ){\n    console.log(\"Showing tonic\");\n    console.log( note );\n    \n    this.showNotes( [note], { tonic: true });\n};\n\n/**\n * show the notes on the fretboard\n * @param frets : an array of integers representing which note to show\n *                on what string\n */\nGuitar.prototype.showFrets = function( frets ){\n   \n   _(this.notes).each( function( string_notes, key ){\n       if( frets[key] > -1 ){\n           string_notes[frets[key]].active(true);\n       };\n   });\n   \n};\n\n/**\n * clear all active or ghosted notes from the fretboard\n */\nGuitar.prototype.clearFretboard = function(){\n    \n    _(this.notes).each(function(string_notes){\n        _(string_notes).each(function(note){\n            note.state = { active: false, ghosted: false, root: false };\n        });\n    });\n    \n};"]],"start1":0,"start2":0,"length1":0,"length2":11293}]],"length":11293}
{"contributors":[],"silentsave":false,"ts":1360855681599,"patch":[[{"diffs":[[1,"\"use strict\";\n\n"],[0,"// guitar cl"]],"start1":0,"start2":0,"length1":12,"length2":27}]],"length":11308,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360869439057,"patch":[[{"diffs":[[0,"lidChord"],[1,"Notation"],[0,"( str ))"]],"start1":6441,"start2":6441,"length1":16,"length2":24}]],"length":11316,"saved":false}
{"ts":1360869449434,"patch":[[{"diffs":[[0,"lidChord"],[-1,"Notation"],[0,"( str ))"]],"start1":6441,"start2":6441,"length1":24,"length2":16}]],"length":11308,"saved":false}
{"ts":1360873476057,"patch":[[{"diffs":[[0," * @"],[-1,"str : the input string"],[1,"param matches : an array of Chord / Note / Scale objects to be shown"],[0,"\n * "]],"start1":5885,"start2":5885,"length1":30,"length2":76},{"diffs":[[0,"nction( "],[-1,"str"],[1,"matches"],[0," ){\n    "]],"start1":6068,"start2":6068,"length1":19,"length2":23},{"diffs":[[0,"    "],[-1,"if( MUSIQ.isValidNote( str )){\n        console.log(\"Showing single note\");\n       this.showNotes( [str] ); \n    } else if( MUSIQ.isValidNoteList( str ) ){\n        console.log(\"Showing multiple notes\");\n        var noteList = Note.fromNotation( str );\n"],[1,"_(matches).each(function(match){\n        if( typeof match == Note){\n    "],[0,"    "]],"start1":6175,"start2":6175,"length1":259,"length2":80},{"diffs":[[0,"es( "],[-1,"noteList );\n"],[1,"match );\n    "],[0,"    "]],"start1":6271,"start2":6271,"length1":20,"length2":21},{"diffs":[[0,"if( "],[-1,"MUSIQ.isValidChord( str )){\n        console.log(\"Showing single chord\");\n        var chord = Chord.fromNotation( str );\n"],[1,"typeof match == Chord ){\n    "],[0,"    "]],"start1":6299,"start2":6299,"length1":128,"length2":37},{"diffs":[[0,"Chords( "],[-1,"[chord]);\n"],[1,"match );\n    "],[0,"    } el"]],"start1":6349,"start2":6349,"length1":26,"length2":29},{"diffs":[[0,"if( "],[-1,"MUSIQ.isValidScale( str )){\n        console.log(\"Showing single s"],[1,"typeof match == S"],[0,"cale"],[-1,"\");"],[1," ){"],[0,"\n   "]],"start1":6381,"start2":6381,"length1":80,"length2":32},{"diffs":[[0,"    "],[-1,"var scale = Scale.fromNotation( str );\n        this.showScales( [chord]);\n    } else {\n        // cannot be parsed!\n        console.warn(\"String cannot be shown: \" + str"],[1,"    this.showScales( match "],[0,");\n "]],"start1":6414,"start2":6414,"length1":177,"length2":35},{"diffs":[[0,"    "],[1,"}"],[0,"\n"],[-1," "],[0,"       "],[-1,"// function failed to show anything\n        return false;"],[1," "],[0,"\n    }"],[1,")"],[0,"\n   "]],"start1":6452,"start2":6452,"length1":80,"length2":25}]],"length":10847,"saved":false}
{"ts":1360879634078,"patch":[[{"diffs":[[0,"   if( !"],[-1,"str"],[1,"matches"],[0," ) retur"]],"start1":6093,"start2":6093,"length1":19,"length2":23}]],"length":10851,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361043300837,"patch":[[{"diffs":[[0,"   });\n    \n    "],[1,"//"],[0,"console.log(note"]],"start1":3108,"start2":3108,"length1":32,"length2":34},{"diffs":[[0,"log(notes);\n"],[-1,""],[0,"    return C"]],"start1":3134,"start2":3134,"length1":24,"length2":24},{"diffs":[[0," );\n};\n\n"],[1,"/**\n * returns a match array with all the notes or chords that\n * match this finger position\n */\nGuitar.prototype.activeMatches = function(){\n    // get all notes\n    var notes = _(this.activeNotes()).map(function(note){\n            return note.notePos();\n        });\n    \n    \n    var matchedChords = Chord.fromNotes( notes );\n    if( !matchedChords ){\n        // just return the individual notes as an array\n        return _(this.activeNotes()).map(function(note){\n            return note.note; // because it's a GuitarNote\n        });\n    }\n    return matchedChords;\n}\n"],[0,"\n\n\n/**\n "]],"start1":3179,"start2":3179,"length1":16,"length2":588},{"diffs":[[0,"ook for\n"],[1," * \n * @returns an array of GuitarNote objects\n"],[0," */\nGuit"]],"start1":4870,"start2":4870,"length1":16,"length2":63},{"diffs":[[0,"ard();\n    \n"],[1,"    /**\n     * show the first match bright, the second and later\n     * matched slightly faded (ghosted) and the notes matched\n     * as tonic\n     */\n"],[0,"    _(matche"]],"start1":6788,"start2":6788,"length1":24,"length2":175},{"diffs":[[0,"on(match"],[1,", num"],[0,"){\n     "]],"start1":6977,"start2":6977,"length1":16,"length2":21},{"diffs":[[0,"        "],[-1,"if( typeof match =="],[1,"\n        console.log(num);\n        // options\n        var o = { only: true, active: true, ghosted: num > 0 };\n        \n        if( match instanceof"],[0," Note){\n"]],"start1":6993,"start2":6993,"length1":35,"length2":163},{"diffs":[[0,".showNotes( "],[1,"["],[0,"match"],[-1," )"],[1,"], o);\n            o.tonic = true"],[0,";\n        } "]],"start1":7172,"start2":7172,"length1":31,"length2":63},{"diffs":[[0,"lse if( "],[-1,"typeof match =="],[1,"match instanceof"],[0," Chord )"]],"start1":7236,"start2":7236,"length1":31,"length2":32},{"diffs":[[0,"Chords( "],[1,"["],[0,"match"],[1,"], o"],[0," );\n    "]],"start1":7291,"start2":7291,"length1":21,"length2":26},{"diffs":[[0,"if( "],[-1,"typeof match =="],[1,"match instanceof"],[0," Sca"]],"start1":7328,"start2":7328,"length1":23,"length2":24},{"diffs":[[0,"Scales( "],[1,"["],[0,"match"],[1,"], o"],[0," );\n    "]],"start1":7379,"start2":7379,"length1":21,"length2":26},{"diffs":[[0,"  \n    }"],[-1,")"],[1,",this);"],[0,"\n    \n  "]],"start1":7417,"start2":7417,"length1":17,"length2":23},{"diffs":[[0,"ons ){\n    \n"],[1,"    console.log( \"ShowNotes \");\n    //console.log( notes )\n    \n"],[0,"    // set t"]],"start1":7842,"start2":7842,"length1":24,"length2":88},{"diffs":[[0,"rue };\n    \n    "],[1,"//"],[0,"console.log( not"]],"start1":7999,"start2":7999,"length1":32,"length2":34},{"diffs":[[0,"                "],[1,"//"],[0,"console.log(\"Not"]],"start1":8342,"start2":8342,"length1":32,"length2":34},{"diffs":[[0,"                "],[1,"//"],[0,"console.log(\"Not"]],"start1":8780,"start2":8780,"length1":32,"length2":34},{"diffs":[[0,"   });\n    \n    "],[-1,"//"],[0,"console.log( not"]],"start1":9052,"start2":9052,"length1":34,"length2":32},{"diffs":[[0," chords ){\n    \n"],[1,"    console.log( \"ShowChords \");\n    console.log( chords )\n    \n"],[0,"    // get a lis"]],"start1":10503,"start2":10503,"length1":32,"length2":96},{"diffs":[[0,"ote );\n    \n"],[-1,""],[0,"    this.sho"]],"start1":11211,"start2":11211,"length1":24,"length2":24},{"diffs":[[0,"note], {"],[1," only: false,"],[0," tonic: "]],"start1":11244,"start2":11244,"length1":16,"length2":29}]],"length":11951,"saved":false}
{"ts":1361064664122,"patch":[[{"diffs":[[0,"ing ){\n    \n"],[1,"    // strings get initialized when a tuning is set\n    this.strings = [];\n"],[0,"    \n    // "]],"start1":80,"start2":80,"length1":24,"length2":99},{"diffs":[[0,"\n    }\n    \n"],[1,"    \n    \n"],[0,"    this.cre"]],"start1":642,"start2":642,"length1":24,"length2":34}]],"length":12036,"saved":false}
{"ts":1361064702365,"patch":[[{"diffs":[[0,"t\";\n"],[-1,"\n// guitar class\n// abstracts a guitar\n"],[1,"/**\n * Guitar object\n * \n * @param tuning : initializes the guitar object with a \n * \n */"],[0,"\nvar"]],"start1":10,"start2":10,"length1":47,"length2":97}]],"length":12086,"saved":false}
{"ts":1361064747440,"patch":[[{"diffs":[[0," with a "],[1,"tuning\n *                  defaults to \"standard\" guitar tuning\n *                  E A D G B E\n * \n * You can find more tunings in MUSIQ.tunings"],[0,"\n * \n */"]],"start1":87,"start2":87,"length1":16,"length2":161}]],"length":12231,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361208626622,"patch":[[{"diffs":[[0,"f( match"],[-1," instanceof N"],[1,".type() == 'n"],[0,"ote"],[1,"'"],[0,"){\n     "]],"start1":7409,"start2":7409,"length1":32,"length2":33},{"diffs":[[0,"atch"],[-1," instanceof C"],[1,".type() == 'c"],[0,"hord"],[1,"'"],[0," ){\n"]],"start1":7526,"start2":7526,"length1":25,"length2":26},{"diffs":[[0,"atch"],[-1," instanceof S"],[1,".type() == 's"],[0,"cale"],[1,"'"],[0," ){\n"]],"start1":7615,"start2":7615,"length1":25,"length2":26}]],"length":12234,"saved":false}
{"ts":1361208647498,"patch":[[{"diffs":[[0,"rd' "],[-1,"){\n            this.showChords( [match], o );\n        } else if("],[1,"||"],[0," mat"]],"start1":7545,"start2":7545,"length1":72,"length2":10},{"diffs":[[0,"his.show"],[-1,"Scale"],[1,"Chord"],[0,"s( [matc"]],"start1":7592,"start2":7592,"length1":21,"length2":21},{"diffs":[[0,", o );\n        }"],[1," "],[0,"\n        \n    },"]],"start1":7615,"start2":7615,"length1":32,"length2":33}]],"length":12173,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361469344301,"patch":[[{"diffs":[[0,"9, 62 ]\n"],[1,"    },\n    \"fourths\"   : {\n        \"name\"    : \"All Fourths\",\n        \"notes\" : [ 40, 45, 50, 55, 60, 65 ]\n"],[0,"    }\n};"]],"start1":1235,"start2":1235,"length1":16,"length2":123}]],"length":12280,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363909418070,"patch":[[{"diffs":[[0," object\n * \n"],[1," * @constructor\n * \n"],[0," * @param tu"]],"start1":27,"start2":27,"length1":24,"length2":44}]],"length":12300,"saved":false}
{"ts":1363909515867,"patch":[[{"diffs":[[0," *      "],[-1,"{"],[0,"   only:"]],"start1":8010,"start2":8010,"length1":17,"length2":16},{"diffs":[[0," *      "],[-1,"}"],[0,"\n * \n */"]],"start1":8122,"start2":8122,"length1":17,"length2":16}]],"length":12298,"saved":false}
{"ts":1363909520634,"patch":[[{"diffs":[[0," options"],[1," {object}"],[0," : objec"]],"start1":7952,"start2":7952,"length1":16,"length2":25}]],"length":12307,"saved":false}
{"ts":1363909581502,"patch":[[{"diffs":[[0,"m notes "],[-1,":"],[1,"{array} -"],[0," array w"]],"start1":7916,"start2":7916,"length1":17,"length2":25},{"diffs":[[0,"object} "],[-1,":"],[1,"-"],[0," object "]],"start1":7970,"start2":7970,"length1":17,"length2":17}]],"length":12315,"saved":false}
{"ts":1363909614307,"patch":[[{"diffs":[[0,"matches "],[-1,":"],[1,"-"],[0," an arra"]],"start1":6923,"start2":6923,"length1":17,"length2":17},{"diffs":[[0,"@return "],[-1,":"],[1,"{boolean} -"],[0," true if"]],"start1":6993,"start2":6993,"length1":17,"length2":27},{"diffs":[[0,"am note "],[-1,":"],[1,"-"],[0," a Note "]],"start1":11427,"start2":11427,"length1":17,"length2":17},{"diffs":[[0,"m frets "],[-1,":"],[1,"-"],[0," an arra"]],"start1":11707,"start2":11707,"length1":17,"length2":17}]],"length":12325,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363966003113,"patch":[[{"diffs":[[0," tuning "],[-1,":"],[1,"{string} -"],[0," initial"]],"start1":68,"start2":68,"length1":17,"length2":26},{"diffs":[[0,"D G B E\n"],[1," *                  \n"],[0," * \n * Y"]],"start1":212,"start2":212,"length1":16,"length2":37},{"diffs":[[0,"this );\n};\n\n"],[1,"/**\n * An object array with a number of different guitar tunings.\n * @todo add more tunings\n * \n */\n"],[0,"Guitar.tunin"]],"start1":962,"start2":962,"length1":24,"length2":124},{"diffs":[[0,"  }\n};\n\n"],[1,"/**\n * the number of frets shown in any visual representation (default value = 16 )\n */\n"],[0,"Guitar.F"]],"start1":1502,"start2":1502,"length1":16,"length2":104},{"diffs":[[0," = 16;\n\n"],[1,"/**\n * @private\n */\n"],[0,"Guitar.p"]],"start1":1616,"start2":1616,"length1":16,"length2":36},{"diffs":[[0,"ame "],[-1,": a "],[1,"{"],[0,"string"],[1,"} -"],[0," rep"]],"start1":2329,"start2":2329,"length1":18,"length2":18},{"diffs":[[0,"sitions "],[-1,":"],[1,"{array} -"],[0," the fin"]],"start1":3222,"start2":3222,"length1":17,"length2":25},{"diffs":[[0,"\n/**\n * "],[1,"@"],[0,"returns "],[-1,"a"],[1,"{array} an array of"],[0," Chord o"]],"start1":3532,"start2":3532,"length1":25,"length2":44},{"diffs":[[0,"d object"],[1,"s"],[0," from th"]],"start1":3573,"start2":3573,"length1":16,"length2":17},{"diffs":[[0,"\n/**\n * "],[1,"@"],[0,"returns"],[1," {array}"],[0," a match"]],"start1":3859,"start2":3859,"length1":23,"length2":32},{"diffs":[[0,"\n/**\n * "],[1,"@"],[0,"returns "],[-1,"an "],[1,"{"],[0,"array"],[1,"}"],[0," of Guit"]],"start1":4443,"start2":4443,"length1":32,"length2":32},{"diffs":[[0,"ord\n * @returns "],[-1,""],[0,""],[1,"{array} - "],[0,"an array with al"]],"start1":5346,"start2":5346,"length1":32,"length2":42},{"diffs":[[0," fretNr "],[-1,":"],[1,"{integer} -"],[0," the num"]],"start1":5525,"start2":5525,"length1":17,"length2":27},{"diffs":[[0,"\n * \n * @returns"],[1," {array}"],[0," an array of Gui"]],"start1":5579,"start2":5579,"length1":32,"length2":40},{"diffs":[[0,"ram str "],[-1,":"],[1,"{integer} -"],[0," the str"]],"start1":5875,"start2":5875,"length1":17,"length2":27},{"diffs":[[0,"am fret "],[-1,":"],[1,"{integer} -"],[0," the sel"]],"start1":5928,"start2":5928,"length1":17,"length2":27},{"diffs":[[0,"ram num "],[-1,":"],[1,"{integer} -"],[0," the num"]],"start1":6137,"start2":6137,"length1":17,"length2":27},{"diffs":[[0,"matches "],[-1,""],[0,""],[1,"{array} "],[0,"- an arr"]],"start1":7256,"start2":7256,"length1":16,"length2":24},{"diffs":[[0,"n the fretboard\n"],[1," * \n * @param {array} - array of Chord objects\n * \n * @todo: implement so we can show multiple chords. Now, it will only show the\n * first chord in the array\n"],[0," */\nGuitar.proto"]],"start1":11159,"start2":11159,"length1":32,"length2":190},{"diffs":[[0,"n the fretboard\n"],[1," * \n * @param scales {array} - of Scale objects\n"],[0," */\nGuitar.proto"]],"start1":11734,"start2":11734,"length1":32,"length2":80},{"diffs":[[0,"am note "],[-1,""],[0,""],[1,"{Note} "],[0,"- a Note"]],"start1":11974,"start2":11974,"length1":16,"length2":23},{"diffs":[[0,"am frets"],[-1,""],[0,""],[1," {array}"],[0," - an ar"]],"start1":12260,"start2":12260,"length1":16,"length2":24}]],"length":12887,"saved":false}
{"ts":1363966063269,"patch":[[{"diffs":[[0,"* @param"],[1," {array}"],[0," positio"]],"start1":3211,"start2":3211,"length1":16,"length2":24},{"diffs":[[0,"ositions"],[-1," {array}"],[0," - the f"]],"start1":3229,"start2":3229,"length1":24,"length2":16},{"diffs":[[0,"@returns"],[1," {array}"],[0," an arra"]],"start1":3290,"start2":3290,"length1":16,"length2":24},{"diffs":[[0,"@returns {array}"],[-1," -"],[0," an array with a"]],"start1":5361,"start2":5361,"length1":34,"length2":32},{"diffs":[[0," @param "],[-1,"fretNr "],[0,"{integer"]],"start1":5524,"start2":5524,"length1":23,"length2":16},{"diffs":[[0,"@param {integer}"],[1," fretNr"],[0," - the number of"]],"start1":5525,"start2":5525,"length1":32,"length2":39},{"diffs":[[0," @param "],[-1,"str "],[0,"{integer"]],"start1":5877,"start2":5877,"length1":20,"length2":16},{"diffs":[[0,"@param {integer}"],[1," str"],[0," - the string se"]],"start1":5878,"start2":5878,"length1":32,"length2":36},{"diffs":[[0," @param "],[-1,"fret "],[0,"{integer"]],"start1":5929,"start2":5929,"length1":21,"length2":16},{"diffs":[[0,"am {integer}"],[1," fret"],[0," - the selec"]],"start1":5934,"start2":5934,"length1":24,"length2":29}]],"length":12893,"saved":false}
{"ts":1363966105995,"patch":[[{"diffs":[[0,"ram "],[-1,"tuning "],[0,"{string}"],[1,"  [tuning=standard]"],[0," - i"]],"start1":65,"start2":65,"length1":23,"length2":35},{"diffs":[[0,"ram "],[-1,"name "],[0,"{string}"],[1," name"],[0," - r"]],"start1":2336,"start2":2336,"length1":21,"length2":21},{"diffs":[[0,"\n * @returns"],[1," {array}"],[0," a list of N"]],"start1":4885,"start2":4885,"length1":24,"length2":32}]],"length":12913,"saved":false}
{"ts":1363966206248,"patch":[[{"diffs":[[0," @param "],[-1,"num "],[0,"{integer"]],"start1":6159,"start2":6159,"length1":20,"length2":16},{"diffs":[[0,"integer}"],[1," num"],[0," - the n"]],"start1":6168,"start2":6168,"length1":16,"length2":20},{"diffs":[[0,"up)\n * \n"],[1," * @returns {Guitar} the Guitar object\n * \n"],[0," * we im"]],"start1":6247,"start2":6247,"length1":16,"length2":59},{"diffs":[[0,"});\n    });\n"],[1,"    \n    return this;\n"],[0,"};\n\n\n/**\n * "]],"start1":7225,"start2":7225,"length1":24,"length2":46},{"diffs":[[0,"rn {"],[-1,"boolean} - true if the query is valid and the fretboard has changed"],[1,"Guitar} - the Guitar object"],[0,"\n * "]],"start1":7430,"start2":7430,"length1":75,"length2":35},{"diffs":[[0,"hes ) return"],[1," this"],[0,";\n    \n    /"]],"start1":7535,"start2":7535,"length1":24,"length2":29},{"diffs":[[0,"    return t"],[-1,"rue"],[1,"his"],[0,";\n    \n};\n\n/"]],"start1":8194,"start2":8194,"length1":27,"length2":27}]],"length":12943,"saved":false}
{"ts":1363966323258,"patch":[[{"diffs":[[0,"ean\n *  "],[-1,"    "],[1,"\n * @returns {Guitar} the Guitar object"],[0,"\n * \n */"]],"start1":8542,"start2":8542,"length1":20,"length2":55}]],"length":12978,"saved":false}
{"ts":1363966365493,"patch":[[{"diffs":[[0,"});\n    });\n"],[1,"    \n    return this;\n"],[0,"};\n\n/**\n * s"]],"start1":11187,"start2":11187,"length1":24,"length2":46},{"diffs":[[0,"objects\n * \n"],[1," * @returns {Guitar} the Guitar object\n"],[0," * @todo: im"]],"start1":11327,"start2":11327,"length1":24,"length2":63},{"diffs":[[0,"e array\n"],[1," * \n"],[0," */\nGuit"]],"start1":11477,"start2":11477,"length1":16,"length2":20},{"diffs":[[0,"chords )"],[1,";"],[0,"\n    \n  "]],"start1":11598,"start2":11598,"length1":16,"length2":17},{"diffs":[[0," }\n    \n"],[-1,""],[0,"    "],[1,"return this;"],[0,"\n};\n\n/**"]],"start1":11829,"start2":11829,"length1":20,"length2":32}]],"length":13056,"saved":false}
{"ts":1363966415918,"patch":[[{"diffs":[[0,"f Scale objects\n"],[1," * @returns {Guitar} the Guitar object\n * \n * @todo implement function\n"],[0," */\n"],[-1,""],[0,"Guitar.prototype"]],"start1":11951,"start2":11951,"length1":36,"length2":107},{"diffs":[[0,"ted!\");\n"],[1,"    return this;\n"],[0,"};\n\n/**\n"]],"start1":12141,"start2":12141,"length1":16,"length2":33},{"diffs":[[0,"t tonic\n"],[1," * \n * @returns {Guitar} the Guitar object\n"],[0," */\nGuit"]],"start1":12285,"start2":12285,"length1":16,"length2":59},{"diffs":[[0,");\n    \n    "],[1,"return "],[0,"this.showNot"]],"start1":12443,"start2":12443,"length1":24,"length2":31},{"diffs":[[0,"     };\n"],[-1,""],[0,"   });\n "]],"start1":12864,"start2":12864,"length1":16,"length2":16},{"diffs":[[0,"\n   });\n   \n"],[1,"   return this;\n   \n"],[0,"};\n\n/**\n * c"]],"start1":12871,"start2":12871,"length1":24,"length2":44}]],"length":13214,"saved":false}
{"ts":1363966426905,"patch":[[{"diffs":[[0," string\n"],[1," * @returns {Guitar} the Guitar object\n"],[0," */\n"],[-1,""],[0,"Guitar.p"]],"start1":12664,"start2":12664,"length1":20,"length2":59},{"diffs":[[0,"etboard\n"],[1," * \n * @returns {Guitar} the Guitar object\n"],[0," */\nGuit"]],"start1":12998,"start2":12998,"length1":16,"length2":59},{"diffs":[[0," };\n        });\n"],[-1,""],[0,"    });\n    \n};"]],"start1":13265,"start2":13265,"length1":31,"length2":31},{"diffs":[[0,");\n    });\n    \n"],[1,"    return this;\n    \n"],[0,"};"]],"start1":13278,"start2":13278,"length1":18,"length2":40}]],"length":13318,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363966926916,"patch":[[{"diffs":[[0," object\n * \n"],[1," * @namespace Guitar\n * \n"],[0," * @construc"]],"start1":27,"start2":27,"length1":24,"length2":49}]],"length":13343,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363967360203,"patch":[[{"diffs":[[0,"mespace "],[-1,"G"],[1,"g"],[0,"uitar\n *"]],"start1":45,"start2":45,"length1":17,"length2":17}]],"length":13343,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363969068693,"patch":[[{"diffs":[[0," * \n"],[-1," * @namespace guitar\n"],[0," * \n"]],"start1":35,"start2":35,"length1":29,"length2":8}]],"length":13322,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363986980333,"patch":[[{"diffs":[[0,"ndard\")\n"],[1," * \n * @returns {Guitar} this object\n"],[0," */\nGuit"]],"start1":2406,"start2":2406,"length1":16,"length2":53},{"diffs":[[0,"* @returns {"],[-1,"array"],[1,"integer[]"],[0,"} a list of "]],"start1":4928,"start2":4928,"length1":29,"length2":33},{"diffs":[[0,"list of "],[-1,"Note object"],[1,"integers representing the MIDI notes for all finger position"],[0,"s \n */\nG"]],"start1":4953,"start2":4953,"length1":27,"length2":76}]],"length":13412,"saved":false}
{"ts":1363986995508,"patch":[[{"diffs":[[0,"gerings\n"],[1," * \n * @todo implement this method\n"],[0," */\nGuit"]],"start1":5522,"start2":5522,"length1":16,"length2":51}]],"length":13447,"saved":false}
{"ts":1363987007567,"patch":[[{"diffs":[[0,"* \n * @returns {"],[-1,"array"],[1,"GuitarNote[]"],[0,"} an array of Gu"]],"start1":5736,"start2":5736,"length1":37,"length2":44}]],"length":13454,"saved":false}
{"ts":1363987019757,"patch":[[{"diffs":[[0,"@returns"],[1," {string}"],[0," the not"]],"start1":5977,"start2":5977,"length1":16,"length2":25}]],"length":13463,"saved":false}
{"ts":1363987047083,"patch":[[{"diffs":[[0," this);\n};\n\n/**\n"],[1," * get the notation for a note on the specified string and fret\n"],[0," * @returns {str"]],"start1":5958,"start2":5958,"length1":32,"length2":96}]],"length":13527,"saved":false}
{"ts":1363987070148,"patch":[[{"diffs":[[0,"eturns {"],[-1,"array"],[1,"GuitarNote[]"],[0,"} of Gui"]],"start1":4514,"start2":4514,"length1":21,"length2":28}]],"length":13534,"saved":false}
{"ts":1363987118910,"patch":[[{"diffs":[[0,"eturns {"],[-1,"array"],[1,"Note[]|Chord[]"],[0,"} a matc"]],"start1":3930,"start2":3930,"length1":21,"length2":30},{"diffs":[[0,"ith "],[-1,"all the notes or chord"],[1,"Note object"],[0,"s th"]],"start1":3969,"start2":3969,"length1":30,"length2":19}]],"length":13532,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364083782068,"patch":[[{"diffs":[[0,"gs\n * @returns {"],[-1,"array"],[1,"Chord[]"],[0,"} an array of ch"]],"start1":3337,"start2":3337,"length1":37,"length2":39},{"diffs":[[0,"    "],[-1,"\n    var notes = this.notes"],[1,"return Chords.fromNotes( this.notesFromFingerPos( positions ) );\n};\n\n/**\n * returns one chord based on the finger positions for the \n * individual strings\n * \n * @param {integer[]} positions - the finger positions on the individual strings\n *                                -1 represents \n * @returns {Chord} a chord object that matches this fingering position. If no \n *                                chord is found, null is returned. \n * \n * \n */\nGuitar.prototype.chord"],[0,"From"]],"start1":3486,"start2":3486,"length1":35,"length2":480},{"diffs":[[0,"ordFromFingerPos"],[1," = function"],[0,"( positions );\n "]],"start1":3959,"start2":3959,"length1":32,"length2":43},{"diffs":[[0,"itions )"],[-1,";\n    "],[1,"{"],[0,"\n    ret"]],"start1":3991,"start2":3991,"length1":22,"length2":17},{"diffs":[[0,"mNotes( "],[-1,"notes );\n    "],[1,"this.notesFromFingerPos( positions ) );"],[0,"\n};\n\n/**"]],"start1":4021,"start2":4021,"length1":29,"length2":55},{"diffs":[[0,";\n    \n    \n"],[-1,""],[0,"    var matc"]],"start1":4673,"start2":4673,"length1":24,"length2":24},{"diffs":[[0,"ords = Chord"],[1,"s"],[0,".fromNotes( "]],"start1":4702,"start2":4702,"length1":24,"length2":25}]],"length":14012,"saved":false}
{"ts":1364085562935,"patch":[[{"diffs":[[0,"0, 65 ]\n"],[1,"    },\n    \"ukelele\"   : {\n        \"name\"    : \"Ukelele Standard (GCEA)\",\n        \"notes\" : [ 67, 60, 64, 67 ]\n"],[0,"    }\n};"]],"start1":1508,"start2":1508,"length1":16,"length2":127}]],"length":14123,"saved":false}
{"ts":1364085567998,"patch":[[{"diffs":[[0,"0, 64, 6"],[-1,"7"],[1,"9"],[0," ]\n    }"]],"start1":1615,"start2":1615,"length1":17,"length2":17}]],"length":14123,"saved":false}
{"ts":1364086369566,"patch":[[{"diffs":[[0,"dard"],[-1," (GCEA)"],[0,"\",\n "]],"start1":1576,"start2":1576,"length1":15,"length2":8}]],"length":14116,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364228430626,"patch":[[{"diffs":[[0," this);\n};\n\n"],[1,"/**\n * get all notes on a particular string\n * @param {integer} stringNr - the the number of the string to look for\n * \n * @returns {GuitarNote[]} an array of GuitarNote objects\n */\nGuitar.prototype.notesOnString = function( stringNr ){\n    return this.notes[stringNr];\n};\n\n"],[0,"/**\n * get t"]],"start1":6547,"start2":6547,"length1":24,"length2":298}]],"length":14390,"saved":false}
{"ts":1364228490878,"patch":[[{"diffs":[[0,"ingNr];\n};\n\n"],[1,"/**\n * get the note on a specific position on the fretboard\n * @param {integer[]} pos - an array like [ string, fret ]\n */\nG\n\n"],[0,"/**\n * get t"]],"start1":6821,"start2":6821,"length1":24,"length2":150}]],"length":14516,"saved":false}
{"ts":1364228543407,"patch":[[{"diffs":[[0," ]\n */\nG"],[1,"uitar.prototype.noteOnPos = function( pos ){\n    return this.notes[ pos[0] ][ pos[1] ];\n}"],[0,"\n\n/**\n *"]],"start1":6949,"start2":6949,"length1":16,"length2":105}]],"length":14605,"saved":false}
{"ts":1364228554047,"patch":[[{"diffs":[[0," fret ]\n"],[1," * \n * @returns {GuitarNote}\n"],[0," */\nGuit"]],"start1":6944,"start2":6944,"length1":16,"length2":45},{"diffs":[[0,"[1] ];\n}"],[1,";"],[0,"\n\n/**\n *"]],"start1":7067,"start2":7067,"length1":16,"length2":17}]],"length":14635,"saved":false}
