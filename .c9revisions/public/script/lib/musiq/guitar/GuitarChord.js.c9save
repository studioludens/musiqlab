{"ts":1360855315372,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360855557552,"patch":[[{"diffs":[[1,"/**\n * GuitarChord - a class for representing a guitar chord\n * \n * @param chord : a Chord object\n * @param notes : a collection of GuitarNote objects\n */\n\nvar GuitarChord = function( chord, notes ){\n    this.chord = chord;\n    \n    this.notes = notes;\n    \n};"]],"start1":0,"start2":0,"length1":0,"length2":260}]],"length":260,"saved":false}
{"ts":1360857307419,"patch":[[{"diffs":[[0,"\n    \n};"],[1,"\n\n/**\n * check if a guitar chord is valid\n * this is when all notes can be matched\n * with a note in the chord object.\n * \n * @returns true : if the chord is valid\n */\nGuitarChord.prototype.valid = function(){\n    \n};"]],"start1":252,"start2":252,"length1":8,"length2":225}]],"length":477,"saved":false}
{"ts":1360857982458,"patch":[[{"diffs":[[0,"object.\n * \n"],[1," * \n * \n"],[0," * @returns "]],"start1":371,"start2":371,"length1":24,"length2":32}]],"length":485,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360896378835,"patch":[[{"diffs":[[0,"   \n};\n\n"],[1,"GuitarChord.fromNotationAndTonic( notation, tonic ){\n    \n}\n\n"],[0,"/**\n * c"]],"start1":254,"start2":254,"length1":16,"length2":77}]],"length":546,"saved":false}
{"ts":1360896473947,"patch":[[{"diffs":[[0,"   \n"],[-1,"};\n"],[1,"    \n};\n\n/**\n * finds all variations of a particular chord with a specific\n * tonic. All these "],[0,"\nGui"]],"start1":254,"start2":254,"length1":11,"length2":103}]],"length":638,"saved":false}
{"ts":1360896662236,"patch":[[{"diffs":[[0,"ction(){\n    \n};"],[1,"\n\n/**\n * barre - returns an integer representing how\n * many fingers can be played barre.\n */\nGuitarChord.prototype.barre = function(){\n    // check highest strings and recurse down, adding as we go\n    var same = _(this.notes).pluck('fret').\n    \n}"]],"start1":622,"start2":622,"length1":16,"length2":265}]],"length":887,"saved":false}
{"ts":1360896817893,"patch":[[{"diffs":[[0,"r same ="],[1," 0;\n    var lastFret = \n   "],[0," _(this."]],"start1":843,"start2":843,"length1":16,"length2":43},{"diffs":[[0,"'fret')."],[1,"reverse().each(function(item){\n        \n        if( item == lastFret ) same++;\n    });\n    \n    console.log(same);\n    re"],[0,"\n    \n}"]],"start1":899,"start2":899,"length1":15,"length2":136}]],"length":1035,"saved":false}
{"ts":1360896824255,"patch":[[{"diffs":[[0," barre.\n"],[1," * \n * TODO: test\n"],[0," */\nGuit"]],"start1":720,"start2":720,"length1":16,"length2":34},{"diffs":[[0,";\n    re"],[1,"turn same;"],[0,"\n    \n}"]],"start1":1038,"start2":1038,"length1":15,"length2":25}]],"length":1063,"saved":false}
{"ts":1360896847304,"patch":[[{"diffs":[[0," chord;\n"],[-1,"    \n"],[0,"    this"]],"start1":216,"start2":216,"length1":21,"length2":16},{"diffs":[[0,"es;\n"],[-1,"    \n    \n"],[0,"};\n\n"]],"start1":244,"start2":244,"length1":18,"length2":8},{"diffs":[[0," these \n"],[1," */\n"],[0,"GuitarCh"]],"start1":331,"start2":331,"length1":16,"length2":20},{"diffs":[[0,"AndTonic"],[1," = function"],[0,"( notati"]],"start1":367,"start2":367,"length1":16,"length2":27}]],"length":1063,"saved":false}
{"ts":1360897062796,"patch":[[{"diffs":[[0," \n *"],[-1,"/\nGuitarChord.fromNotation"],[1," \n * @param guitar : the guitar object (with specific tuning)\n * @param chord : the Chord object to find specific GuitarChords for\n * @param tonic : the Tonic we want to base the chord on\n * \n * @returns an array of GuitarChord objects\n */\nGuitarChord.fromChord"],[0,"AndT"]],"start1":337,"start2":337,"length1":34,"length2":269},{"diffs":[[0,"on( "],[-1,"notation"],[1,"guitar, chord"],[0,", to"]],"start1":619,"start2":619,"length1":16,"length2":21}]],"length":1303,"saved":false}
{"ts":1360897189267,"patch":[[{"diffs":[[0,"hord on\n"],[1," * @param options : an object specifying more options:\n *                  {\n *                      upPreference: false\n *                      maxFingerStretch: 2\n *                      maxDifficulty: 10 \n *                  }\n"],[0," * \n * @"]],"start1":521,"start2":521,"length1":16,"length2":246},{"diffs":[[0,"{\n    \n}"],[1,";"],[0,"\n\n/**\n *"]],"start1":875,"start2":875,"length1":16,"length2":17}]],"length":1534,"saved":false}
{"ts":1360897289453,"patch":[[{"diffs":[[0,"onic ){\n    "],[1,"// from the tonic, walk up the neck, fret by fret\n    \n    // increase the difficulty\n    \n    // set finger stretch\n    \n    // check if we have found all the notes\n    \n    // can we calculate this recursively"],[0,"\n};\n\n/**\n * "]],"start1":869,"start2":869,"length1":24,"length2":235}]],"length":1745,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360898167396,"patch":[[{"diffs":[[0,"m){\n"],[-1,"        \n"],[0,"    "]],"start1":1634,"start2":1634,"length1":17,"length2":8}]],"length":1736,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361042613574,"patch":[[{"diffs":[[0," notes;\n"],[-1,"};"],[1,"    \n    this.barre = 0;\n};\n\n/**\n * maximum finger stretch\n */\nGuitarChord.MAX_STRETCH = 2;\n"],[0,"\n\n/**\n *"]],"start1":240,"start2":240,"length1":18,"length2":108}]],"length":1826,"saved":false}
{"ts":1361042683897,"patch":[[{"diffs":[[0,"r chord\n * \n"],[1," * @param guitar : a Guitar object on which this chord is played\n"],[0," * @param ch"]],"start1":53,"start2":53,"length1":24,"length2":89},{"diffs":[[0,"unction("],[1," guitar,"],[0," chord, "]],"start1":240,"start2":240,"length1":16,"length2":24},{"diffs":[[0,"d, notes ){\n"],[1,"    \n    this.guitar = guitar;\n"],[0,"    this.cho"]],"start1":261,"start2":261,"length1":24,"length2":55},{"diffs":[[0,"   this."],[-1,""],[0,""],[1,"_"],[0,"barre = "]],"start1":358,"start2":358,"length1":16,"length2":17}]],"length":1931,"saved":false}
{"ts":1361042764968,"patch":[[{"diffs":[[0,"Note objects"],[1," (optional)"],[0,"\n */\n\nvar Gu"]],"start1":203,"start2":203,"length1":24,"length2":35},{"diffs":[[0,", notes "],[1," "],[0,"){\n    \n"]],"start1":273,"start2":273,"length1":16,"length2":17},{"diffs":[[0,"tFret = "],[1,"this.guitar.frets[this.guitar.frets.length-1];\n    "],[0,"\n    _(t"]],"start1":1773,"start2":1773,"length1":16,"length2":67}]],"length":1994,"saved":false}
{"ts":1361042815725,"patch":[[{"diffs":[[0,"tFret = "],[1,"_("],[0,"this.gui"]],"start1":1773,"start2":1773,"length1":16,"length2":18},{"diffs":[[0,"rets"],[-1,"[this.guitar.frets.length-1]"],[1,").last()"],[0,";\n  "]],"start1":1796,"start2":1796,"length1":36,"length2":16}]],"length":1976,"saved":false}
{"ts":1361043098066,"patch":[[{"diffs":[[0,"y fret\n    \n"],[1,"    // get the string the tonic is on\n    \n    \n"],[0,"    // incre"]],"start1":1131,"start2":1131,"length1":24,"length2":72},{"diffs":[[0,"rsively\n};\n\n"],[1,"/**\n * finds all variations of a particular chord on the guitar neck\n * \n * if chord is relative, do the following:\n * - find the tonic on each fret\n */\nGuitarChord.fromChord = function( guitar, chord ){\n    \n};\n\n"],[0,"/**\n * check"]],"start1":1340,"start2":1340,"length1":24,"length2":237}]],"length":2237,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361063256668,"patch":[[{"diffs":[[0,"d, tonic ){\n"],[1,"    \n"],[0,"    // from "]],"start1":1072,"start2":1072,"length1":24,"length2":29},{"diffs":[[0,", chord ){\n    \n"],[1,"    // get all tonics\n    var tonics = \n"],[0,"};\n\n/**\n * check"]],"start1":1550,"start2":1550,"length1":32,"length2":72}]],"length":2282,"saved":false}
{"ts":1361063493910,"patch":[[{"diffs":[[0,"r chord\n * \n"],[1," * \n * \n"],[0," * @param gu"]],"start1":53,"start2":53,"length1":24,"length2":32}]],"length":2290,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361063838461,"patch":[[{"diffs":[[0,"chord on"],[1," (GuitarNote)"],[0,"\n * @par"]],"start1":735,"start2":735,"length1":16,"length2":29},{"diffs":[[0,"    "],[-1,"var tonics = "],[1,"_(this.notes).each(function(string_notes, str_num){\n        _(string_notes).each(function(note, fret_num){\n            \n                \n        });\n    });"],[0,"\n};\n"]],"start1":1609,"start2":1609,"length1":21,"length2":164}]],"length":2446,"saved":false}
{"ts":1361063909517,"patch":[[{"diffs":[[0,"\n * "],[-1,"if"],[1,"the"],[0," chord "],[-1,"is relative, do the following:"],[1,"should be relative"],[0,"\n * "]],"start1":1450,"start2":1450,"length1":47,"length2":36},{"diffs":[[0,"    "],[-1,"\n                "],[1,"if( chord.tonic )"],[0,"\n   "]],"start1":1717,"start2":1717,"length1":25,"length2":25}]],"length":2435,"saved":false}
{"ts":1361063958655,"patch":[[{"diffs":[[0,"ord ){\n    \n"],[1,"    if( !chord.relative ){\n        console.warn(\"Relative chord not allowed!\");\n        return;\n    }\n    \n"],[0,"    // get a"]],"start1":1564,"start2":1564,"length1":24,"length2":131}]],"length":2542,"saved":false}
{"ts":1361064264798,"patch":[[{"diffs":[[0,"ram "],[-1,"tonic"],[1,"base"],[0," : the "],[-1,"Tonic"],[1,"Base note"],[0," we "]],"start1":693,"start2":693,"length1":25,"length2":28},{"diffs":[[0,"dAnd"],[-1,"Tonic"],[1,"Base"],[0," = f"]],"start1":1062,"start2":1062,"length1":13,"length2":12},{"diffs":[[0," chord, "],[-1,"tonic"],[1,"base"],[0," ){\n    "]],"start1":1090,"start2":1090,"length1":21,"length2":20},{"diffs":[[0,"all "],[-1,"tonics"],[1,"base (lowest) notes\n    var baseNotes = [];\n    \n    // we only have to check the bottom four strings\n    "],[0,"\n    _("],[-1,"this"],[1,"guitar"],[0,".not"]],"start1":1695,"start2":1695,"length1":25,"length2":127},{"diffs":[[0,"if( "],[-1,"chord.tonic )\n        }"],[1,"note.inChord( chord ) ){\n                baseNotes.push( note );\n            }\n        });\n    });\n    \n    return _(baseNotes).map(function(note){\n        return GuitarChord.fromChordAndBase( guitar, chord, base "],[0,");\n "]],"start1":1931,"start2":1931,"length1":31,"length2":221},{"diffs":[[0,";\n    })"],[-1,";"],[0,"\n};\n\n/**"]],"start1":2149,"start2":2149,"length1":17,"length2":16}]],"length":2834,"saved":false}
{"ts":1361064272912,"patch":[[{"diffs":[[0,"unction("],[-1,"not"],[1,"bas"],[0,"e){\n    "]],"start1":2068,"start2":2068,"length1":19,"length2":19}]],"length":2834,"saved":false}
{"ts":1361064374498,"patch":[[{"diffs":[[0,"rom the "],[-1,"tonic"],[1,"base"],[0,", walk u"]],"start1":1119,"start2":1119,"length1":21,"length2":20},{"diffs":[[0,"y fret\n    \n"],[1,"    var baseFret = base.\n    \n"],[0,"    // get t"]],"start1":1157,"start2":1157,"length1":24,"length2":54}]],"length":2863,"saved":false}
{"ts":1361065510578,"patch":[[{"diffs":[[0,"base"],[-1,"Fret = base."],[1,"String = base.pos[0];\n    var baseFret = base.pos[1];\n    \n    var numNotes = chord.notes.length - (chord.optional ? chord.optional.length : 0);\n    \n    \n    /* a list of all five fingers the user has in his left hand\n       In case you're Django, please remove the last three\n       items from the list\n       \n       This will be used to determine the 'easyness' of the chord\n       \n    */\n    \n    /**\n     * how easy it is to play the chord.\n     */\n    var ease;\n    \n    var fingersUsed = [ false, false, false, false, false];\n    // exit if we have more required notes than possible frets to\n    \n    if( baseString + numNotes > guitar.strings.length){\n        console.warn( \"Not enough frets to find notes on!\" );\n    }\n    \n    // an array with possible matches \n    var foundNotes = [];\n    for( var i = baseString; i < guitar.strings.length ){\n        \n    }\n    \n    // look them up"],[0,"\n   "]],"start1":1177,"start2":1177,"length1":20,"length2":904}]],"length":3747,"saved":false}
{"ts":1361065668952,"patch":[[{"diffs":[[0," chord.\n"],[1,"     * \n     * these factors add weight:\n     * - each note played\n     * - the distance of each note relative to the previous note\n     *   add \n     * - the distance of the note to the base note\n     * - the number of fingers used\n     * \n"],[0,"     */\n"]],"start1":1621,"start2":1621,"length1":16,"length2":257}]],"length":3988,"saved":false}
{"ts":1361066117044,"patch":[[{"diffs":[[0," played\n"],[1,"     *   + 1 for each note played\n"],[0,"     * -"]],"start1":1688,"start2":1688,"length1":16,"length2":50},{"diffs":[[0,"    *   "],[-1,"add "],[1,"+ 1 for each extra fret distance between two notes"],[0,"\n     * "]],"start1":1796,"start2":1796,"length1":20,"length2":66},{"diffs":[[0,"used\n     * "],[1,"  + 1 for each finger used, + 100 if more than all fingers are used (impossible)\n     * \n     * lower is better, no note has ease 0,\n     * 1 note at least ease 1"],[0,"\n     */\n   "]],"start1":1937,"start2":1937,"length1":24,"length2":186},{"diffs":[[0,"var ease"],[1," = 0"],[0,";\n    \n "]],"start1":2124,"start2":2124,"length1":16,"length2":20}]],"length":4234,"saved":false}
{"ts":1361066290442,"patch":[[{"diffs":[[0,"    "],[-1,"\n    }\n    \n    // look them up"],[1,"// get all notes on the string that match the chord and are close enough to the \n    }\n    \n    // look them up - recursively\n    var lookup = function( strings, ){\n        \n        // note found? add to return\n        // remaining strings\n        var remStrings =\n        var remNotes = \n        // remaining notes\n        lookup()\n    }"],[0,"\n   "]],"start1":2529,"start2":2529,"length1":39,"length2":346}]],"length":4541,"saved":false}
{"ts":1361066307990,"patch":[[{"diffs":[[0,".length "],[1,"; i++"],[0,"){\n     "]],"start1":2514,"start2":2514,"length1":16,"length2":21}]],"length":4546,"saved":false}
{"ts":1361066396918,"patch":[[{"diffs":[[0,"rets to\n"],[1,"    var chordNotes = chord.relNotes();\n    \n"],[0,"    \n   "]],"start1":2261,"start2":2261,"length1":16,"length2":60},{"diffs":[[0,"kup("],[-1,")\n    }\n    \n    // get the string the tonic is on\n    \n    \n    // increase the difficulty"],[1," remStrings, remNotes )"],[0,"\n    "],[1,"}"],[0,"\n    "],[-1,"// set finger stretch"],[0,"\n   "]],"start1":2909,"start2":2909,"length1":130,"length2":42}]],"length":4502,"saved":false}
{"ts":1361066935035,"patch":[[{"diffs":[[0,"    "],[-1,"var chordNotes = chord.relNotes();"],[0,""],[1,""],[0,"\n   "]],"start1":2269,"start2":2269,"length1":42,"length2":8},{"diffs":[[0,"\n    }\n    \n"],[1,"    var chordNotes = chord.relNotes;\n"],[0,"    // an ar"]],"start1":2401,"start2":2401,"length1":24,"length2":61},{"diffs":[[0," matches"],[-1," "],[0,"\n    var"]],"start1":2479,"start2":2479,"length1":17,"length2":16},{"diffs":[[0,"h to the"],[-1," "],[1,"\n        var stringNotes = _(this.notes).filter(function(note){\n            return _(chordNotes).contains(note.relPos());\n        })\n        var strNotes = _(chordNotes).contains()"],[0,"\n    }\n "]],"start1":2655,"start2":2655,"length1":17,"length2":196},{"diffs":[[0,"\n    }\n    \n"],[1,"    \n"],[0,"    // look "]],"start1":2843,"start2":2843,"length1":24,"length2":29},{"diffs":[[0,"ring"],[-1,"s, ){\n        "],[1,"_nr, lastnote, notes ){\n        \n        _(this.notes[str_nr])"],[0,"\n   "]],"start1":2923,"start2":2923,"length1":22,"length2":70},{"diffs":[[0," return\n"],[1,"        if( lastnote.distanceTo( ))\n"],[0,"        "]],"start1":3019,"start2":3019,"length1":16,"length2":52},{"diffs":[[0,"    "],[-1,"var remStrings ="],[0,""],[1,""],[0,"\n   "]],"start1":3096,"start2":3096,"length1":24,"length2":8},{"diffs":[[0,"    "],[-1,"lookup("],[1,"if( string_nr <= )\n        return lookup( notes,"],[0," rem"]],"start1":3156,"start2":3156,"length1":15,"length2":56}]],"length":4797,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361067262295,"patch":[[{"diffs":[[0,"     })\n"],[1,"        \n        \n"],[0,"        "]],"start1":2788,"start2":2788,"length1":16,"length2":34}]],"length":4815,"saved":false}
{"ts":1361067329407,"patch":[[{"diffs":[[0,"       \n        "],[1,"// \n        _(stringNotes).filter(function(note){\n            if( note.distanceTo(base)[1] <= GuitarChord.MAX_STRETCH ){\n                console.log(\"Found note\")\n            }\n        })"],[0,"\n        var str"]],"start1":2797,"start2":2797,"length1":32,"length2":219}]],"length":5002,"saved":false}
{"ts":1361067439818,"patch":[[{"diffs":[[0,"s());\n        })"],[1,";"],[0,"\n        \n      "]],"start1":2779,"start2":2779,"length1":32,"length2":33},{"diffs":[[0,"und note"],[1," \" + note.simple() + \"on fret "],[0,"\")\n     "]],"start1":2966,"start2":2966,"length1":16,"length2":46}]],"length":5033,"saved":false}
{"ts":1361067469047,"patch":[[{"diffs":[[0,"n fret \""],[1," + note.pos[1] "],[0,")\n      "]],"start1":2997,"start2":2997,"length1":16,"length2":31}]],"length":5048,"saved":false}
{"ts":1361067482874,"patch":[[{"diffs":[[0,") + \"on "],[-1,"fret "],[1,"pos ["],[0,"\" + note"]],"start1":2991,"start2":2991,"length1":21,"length2":21},{"diffs":[[0,".pos"],[-1,"[1] )"],[1," \"]\");"],[0,"\n   "]],"start1":3012,"start2":3012,"length1":13,"length2":14}]],"length":5049,"saved":false}
{"ts":1361067487200,"patch":[[{"diffs":[[0,"e.pos \"]\");\n"],[1,"                return true;\n"],[0,"            "]],"start1":3011,"start2":3011,"length1":24,"length2":53}]],"length":5078,"saved":false}
{"ts":1361067497538,"patch":[[{"diffs":[[0,"      })"],[1,";\n        \n        "],[0,"\n       "]],"start1":3068,"start2":3068,"length1":16,"length2":35}]],"length":5097,"saved":false}
{"ts":1361067510116,"patch":[[{"diffs":[[0,"       \n        "],[1,"// now branch off for every next string"],[0,"\n        var str"]],"start1":3079,"start2":3079,"length1":32,"length2":71}]],"length":5136,"saved":false}
{"ts":1361067532005,"patch":[[{"diffs":[[0,"   \n"],[-1,"        // now branch off for every next string\n        var strNotes = _(chordNotes).contains()\n"],[0,"    "]],"start1":3083,"start2":3083,"length1":104,"length2":8}]],"length":5040,"saved":false}
{"ts":1361067599587,"patch":[[{"diffs":[[0,"h to the"],[1," base note"],[0,"\n       "]],"start1":2655,"start2":2655,"length1":16,"length2":26}]],"length":5050,"saved":false}
{"ts":1361067618516,"patch":[[{"diffs":[[0,"ord "],[-1,"and are close enough to the base note"],[0,"\n   "]],"start1":2632,"start2":2632,"length1":45,"length2":8},{"diffs":[[0,"     // "],[1,"and are close enough to the base note"],[0,"\n       "]],"start1":2782,"start2":2782,"length1":16,"length2":53}]],"length":5050,"saved":false}
{"ts":1361067640925,"patch":[[{"diffs":[[0,");\n        \n"],[1,"        // now we have to make sure we check all possible combinations\n"],[0,"    }\n    \n "]],"start1":3085,"start2":3085,"length1":24,"length2":95}]],"length":5121,"saved":false}
{"ts":1361067709049,"patch":[[{"diffs":[[0,"\n    }\n    \n"],[1,"    var lookup = function( chordNotes, baseString ){\n"],[0,"    var chor"]],"start1":2401,"start2":2401,"length1":24,"length2":77},{"diffs":[[0,"nations\n"],[1,"        chordNotes.\n"],[0,"    }\n  "]],"start1":3213,"start2":3213,"length1":16,"length2":36},{"diffs":[[0,"    "],[-1,"var lookup = function( string_nr, lastnote, notes ){"],[0,"\n   "]],"start1":3291,"start2":3291,"length1":60,"length2":8}]],"length":5142,"saved":false}
{"ts":1361067719963,"patch":[[{"diffs":[[0,"seString ){\n"],[1,"    "],[0,"    var chor"]],"start1":2454,"start2":2454,"length1":24,"length2":28},{"diffs":[[0,"lNotes;\n    "],[1,"  "],[1,"  "],[0,"// an array "]],"start1":2499,"start2":2499,"length1":24,"length2":28},{"diffs":[[0,"matches\n"],[1,"    "],[0,"    var "]],"start1":2541,"start2":2541,"length1":16,"length2":20},{"diffs":[[0,"Notes = [];\n"],[1,"    "],[0,"    for( var"]],"start1":2566,"start2":2566,"length1":24,"length2":28},{"diffs":[[0,"+){\n        "],[1,"    "],[0,"// get all n"]],"start1":2641,"start2":2641,"length1":24,"length2":28},{"diffs":[[0," chord \n"],[1,"    "],[0,"        "]],"start1":2702,"start2":2702,"length1":16,"length2":20},{"diffs":[[0,"            "],[1,"    "],[0,"return _(cho"]],"start1":2777,"start2":2777,"length1":24,"length2":28},{"diffs":[[0,"Pos());\n        "],[-1,"});\n"],[1,"    });\n    "],[0,"        \n       "]],"start1":2831,"start2":2831,"length1":36,"length2":44},{"diffs":[[0,"   \n        "],[1,"    "],[0,"// and are c"]],"start1":2864,"start2":2864,"length1":24,"length2":28},{"diffs":[[0,"se note\n        "],[1,"  "],[1,"  "],[0,"_(stringNotes).f"]],"start1":2913,"start2":2913,"length1":32,"length2":36},{"diffs":[[0,"function(note){\n"],[1,"    "],[0,"            if( "]],"start1":2955,"start2":2955,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"console.log(\"Fou"]],"start1":3046,"start2":3046,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"    "],[0,"return true;"]],"start1":3142,"start2":3142,"length1":24,"length2":28},{"diffs":[[0,"            "],[-1,"}\n"],[1,"    }\n  "],[0,"        "],[1,"  "],[0,"});\n        "]],"start1":3171,"start2":3171,"length1":34,"length2":42},{"diffs":[[0,"    });\n        "],[-1,"\n"],[1,"    \n    "],[0,"        // now w"]],"start1":3197,"start2":3197,"length1":33,"length2":41},{"diffs":[[0,"        "],[1,"    "],[0,"chordNot"]],"start1":3293,"start2":3293,"length1":16,"length2":20},{"diffs":[[0,"dNotes.\n    "],[-1,"}"],[1,"    }\n        \n    };"],[0,"\n    \n    \n "]],"start1":3309,"start2":3309,"length1":25,"length2":45}]],"length":5238,"saved":false}
{"ts":1361068187493,"patch":[[{"diffs":[[0,"  \n    \n    "],[-1,"\n"],[1,"var foundNotes = [];\n    \n    \n    var lookup = function( chordNotes, baseString, foundNotes ){\n        \n    "],[0,"    if( base"]],"start1":2271,"start2":2271,"length1":25,"length2":133},{"diffs":[[0,"    "],[-1,"}\n"],[0,"    "],[1,"}"],[0,"\n"],[-1," "],[0,"   "],[-1,"var lookup = function( chordNotes, baseString ){"],[1," "],[0,"\n   "]],"start1":2510,"start2":2510,"length1":67,"length2":18},{"diffs":[[0,"        "],[-1,"var foundNotes = [];"],[0,""],[1,""],[0,"\n       "]],"start1":2608,"start2":2608,"length1":36,"length2":16},{"diffs":[[0," // "],[-1,"now"],[1,"if"],[0," we "]],"start1":3268,"start2":3268,"length1":11,"length2":10},{"diffs":[[0,"ave "],[-1,"to make sure we check all possible combinations\n            chordNotes."],[1,"notes left, these \n            // are potentially interesting\n            \n            // remove already found notes\n            _(stringNotes).filter(function(note){\n                if( foundNotes.note.relPos() )\n            })\n            \n            // remove the found note\n            "],[0,"\n   "]],"start1":3279,"start2":3279,"length1":79,"length2":299},{"diffs":[[0,"      \n        }"],[1,";"],[0,"\n        \n    };"]],"start1":3568,"start2":3568,"length1":32,"length2":33}]],"length":5497,"saved":false}
{"ts":1361068244770,"patch":[[{"diffs":[[0,"note\n           "],[1," stringNotes ="],[0," _(stringNotes)."]],"start1":2955,"start2":2955,"length1":32,"length2":46},{"diffs":[[0,"resting\n"],[1,"            if( stringNotes.length == 0 ){\n                console.log(\"No notes on string found!\");\n            }\n"],[0,"        "]],"start1":3351,"start2":3351,"length1":16,"length2":131}]],"length":5626,"saved":false}
{"ts":1361068335620,"patch":[[{"diffs":[[0,"        if( "],[-1,""],[0,""],[1,"!stringNotes || "],[0,"stringNotes."]],"start1":3363,"start2":3363,"length1":24,"length2":40},{"diffs":[[0,"        "],[-1,"}\n            "],[1,"    \n            } else if( stringNotes.length == 1 ){\n                console.log(\"One matching note on string found!\");\n            }\n            \n            // return some"],[0,"\n       "]],"start1":3480,"start2":3480,"length1":30,"length2":191}]],"length":5803,"saved":false}
{"ts":1361068375352,"patch":[[{"diffs":[[0,"tring found!\");\n"],[1,"            } else {\n                // more notes found!\n                console.log( stringNotes.length + \"matching note on string found!\");\n                console.log( stringNotes );\n                return stringNotes;\n"],[0,"            }\n  "]],"start1":3594,"start2":3594,"length1":32,"length2":255}]],"length":6026,"saved":false}
{"ts":1361068395443,"patch":[[{"diffs":[[0,"  return"],[1," foundNotes.concat("],[0," stringN"]],"start1":3811,"start2":3811,"length1":16,"length2":35},{"diffs":[[0," stringNotes"],[1," )"],[0,";\n          "]],"start1":3838,"start2":3838,"length1":24,"length2":26}]],"length":6047,"saved":false}
{"ts":1361068405581,"patch":[[{"diffs":[[0," stringNotes );\n"],[1,"                \n                // return the combined array\n"],[0,"                "]],"start1":3781,"start2":3781,"length1":32,"length2":94}]],"length":6109,"saved":false}
{"ts":1361068439930,"patch":[[{"diffs":[[0,"note.pos"],[1," +"],[0," \"]\");\n "]],"start1":3176,"start2":3176,"length1":16,"length2":18},{"diffs":[[0,"            "],[1,"//"],[0,"if( foundNot"]],"start1":4068,"start2":4068,"length1":24,"length2":26},{"diffs":[[0,"      })"],[1,";"],[0,"\n       "]],"start1":4119,"start2":4119,"length1":16,"length2":17}]],"length":6114,"saved":false}
{"ts":1361068473941,"patch":[[{"diffs":[[0,"         // "],[-1,""],[0,""],[1,"for now, "],[0,"return the c"]],"start1":3823,"start2":3823,"length1":24,"length2":33},{"diffs":[[0,"    "],[-1,"  }\n"],[0,"      "],[-1,"  "],[1,"\n"],[0,"    "],[-1,"\n"],[0,"    "]],"start1":3933,"start2":3933,"length1":25,"length2":19},{"diffs":[[0,"ome\n            "],[1,"    "],[0,"// remove alread"]],"start1":3971,"start2":3971,"length1":32,"length2":36},{"diffs":[[0,"found notes\n"],[1,"    "],[0,"            "]],"start1":4009,"start2":4009,"length1":24,"length2":28},{"diffs":[[0,"        "],[1,"    "],[0,"//if( fo"]],"start1":4083,"start2":4083,"length1":16,"length2":20},{"diffs":[[0,") )\n            "],[-1,"});"],[1,"    });\n            }\n            \n            "],[0,"\n            \n  "]],"start1":4124,"start2":4124,"length1":35,"length2":79}]],"length":6173,"saved":false}
{"ts":1361068490899,"patch":[[{"diffs":[[0,"und!\");\n"],[-1,"                \n"],[0,"        "]],"start1":3470,"start2":3470,"length1":33,"length2":16},{"diffs":[[0,"  }\n"],[-1,"            \n            \n            \n            // remove the found note\n            \n"],[0,"    "]],"start1":4141,"start2":4141,"length1":97,"length2":8}]],"length":6067,"saved":false}
{"ts":1361068619369,"patch":[[{"diffs":[[0,"    "],[-1,"\n    // look them up - recursively\n    \n        \n        _(this.notes[str_nr])\n        // note found? add to return\n        if( lastnote.distanceTo( ))\n        // remaining strings\n        \n        var remNotes = \n        // remaining notes\n        if( string_nr <= )\n        return lookup( notes, remStrings, remNotes )\n    }"],[1,"var foundNotes = lookup( chord.notes, baseString, foundNotes );\n    // look them up - recursively"],[0,"\n   "]],"start1":4177,"start2":4177,"length1":334,"length2":105}]],"length":5838,"saved":false}
{"ts":1361068641177,"patch":[[{"diffs":[[0,"rsively\n    "],[1,"console.log(\"FoundNotes:\");\n    console.log(foundNotes);"],[0,"\n    \n    //"]],"start1":4271,"start2":4271,"length1":24,"length2":80}]],"length":5894,"saved":false}
{"ts":1361070034742,"patch":[[{"diffs":[[0,"if( "],[-1,"note.inChord( chord "],[1,"chord.contains(note"],[0,") ){"]],"start1":4991,"start2":4991,"length1":28,"length2":27}]],"length":5893,"saved":false}
{"ts":1361070061226,"patch":[[{"diffs":[[0,"ins(note"],[1,".note"],[0,") ){\n   "]],"start1":5006,"start2":5006,"length1":16,"length2":21}]],"length":5898,"saved":false}
{"ts":1361070083418,"patch":[[{"diffs":[[0,"   });\n    \n"],[1,"    console.log(baseNotes);\n    \n"],[0,"    return _"]],"start1":5091,"start2":5091,"length1":24,"length2":57}]],"length":5931,"saved":false}
{"ts":1361070096486,"patch":[[{"diffs":[[0,"otes);\n    \n"],[1,"    // get all possible chord variations for each chord\n"],[0,"    return _"]],"start1":5124,"start2":5124,"length1":24,"length2":80}]],"length":5987,"saved":false}
{"ts":1361070133054,"patch":[[{"diffs":[[0," fret_num){\n"],[1,"            console.log(note);\n"],[0,"            "]],"start1":4967,"start2":4967,"length1":24,"length2":55}]],"length":6018,"saved":false}
{"ts":1361070172255,"patch":[[{"diffs":[[0,"m){\n            "],[1,"//"],[0,"console.log(note"]],"start1":4975,"start2":4975,"length1":32,"length2":34}]],"length":6020,"saved":false}
{"ts":1361070184355,"patch":[[{"diffs":[[0,"       }"],[1,", this"],[0,");\n    }"],[1,",this"],[0,");\n    \n"]],"start1":5112,"start2":5112,"length1":24,"length2":35}]],"length":6031,"saved":false}
{"ts":1361070211509,"patch":[[{"diffs":[[0,"  //"],[-1,"console.log(note);"],[0,"\n"],[1,""],[0,"    "]],"start1":4989,"start2":4989,"length1":27,"length2":9},{"diffs":[[0,"te.note) ){\n"],[1,"                console.log(note);\n"],[0,"            "]],"start1":5027,"start2":5027,"length1":24,"length2":59},{"diffs":[[0,"   }"],[-1,", this"],[0,");\n    }"],[-1,",this"],[0,");\n "]],"start1":5133,"start2":5133,"length1":27,"length2":16}]],"length":6037,"saved":false}
{"ts":1361070219998,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[1,"console.log(note);"],[0,"\n       "]],"start1":4983,"start2":4983,"length1":18,"length2":34}]],"length":6053,"saved":false}
{"ts":1361070265518,"patch":[[{"diffs":[[0,"m){\n            "],[1,"//"],[0,"console.log(note"]],"start1":4975,"start2":4975,"length1":32,"length2":34}]],"length":6055,"saved":false}
{"ts":1361070645728,"patch":[[{"diffs":[[0,"                "],[1,"//"],[0,"console.log(note"]],"start1":5057,"start2":5057,"length1":32,"length2":34}]],"length":6057,"saved":false}
{"ts":1361070688043,"patch":[[{"diffs":[[0,");\n            \n"],[1,"            console.log( stringNotes );\n            \n"],[0,"            // a"]],"start1":2891,"start2":2891,"length1":32,"length2":85}]],"length":6110,"saved":false}
{"ts":1361070907723,"patch":[[{"diffs":[[0,"});\n            "],[1,"console.log(\"stringNotes\");"],[0,"\n            con"]],"start1":2890,"start2":2890,"length1":32,"length2":59}]],"length":6137,"saved":false}
{"ts":1361071047148,"patch":[[{"diffs":[[0,"undNotes"],[1,", guitar"],[0," ){\n    "]],"start1":2367,"start2":2367,"length1":16,"length2":24},{"diffs":[[0,", foundNotes"],[1,", guitar"],[0," );\n    // l"]],"start1":4317,"start2":4317,"length1":24,"length2":32}]],"length":6153,"saved":false}
{"ts":1361071085042,"patch":[[{"diffs":[[0,"   \n"],[-1,"        var chordNotes = chord.relNotes;\n        // an array with possible matches\n        \n"],[0,"    "]],"start1":2529,"start2":2529,"length1":100,"length2":8}]],"length":6061,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361071249656,"patch":[[{"diffs":[[0,"s = [];\n    "],[1,"var allNotes = this.notes;"],[0,"\n    \n    va"]],"start1":2296,"start2":2296,"length1":24,"length2":50},{"diffs":[[0,"tes = _("],[-1,"this.n"],[1,"allN"],[0,"otes).fi"]],"start1":2715,"start2":2715,"length1":22,"length2":20}]],"length":6085,"saved":false}
{"ts":1361071264622,"patch":[[{"diffs":[[0,"[];\n"],[-1,"    var allNotes = this.notes;\n"],[0,"    "]],"start1":2300,"start2":2300,"length1":39,"length2":8},{"diffs":[[0,"= _("],[-1,"allN"],[1,"guitar.n"],[0,"otes"]],"start1":2688,"start2":2688,"length1":12,"length2":16}]],"length":6058,"saved":false}
{"ts":1361071304496,"patch":[[{"diffs":[[0,"guitar.notes"],[1,"[i]"],[0,").filter(fun"]],"start1":2692,"start2":2692,"length1":24,"length2":27}]],"length":6061,"saved":false}
{"ts":1361071356724,"patch":[[{"diffs":[[0,"le() + \""],[1," "],[0,"on pos ["]],"start1":3152,"start2":3152,"length1":16,"length2":17}]],"length":6062,"saved":false}
{"ts":1361071366538,"patch":[[{"diffs":[[0,"     if("],[1," Math.abs("],[0," note.di"]],"start1":3031,"start2":3031,"length1":16,"length2":26},{"diffs":[[0,"base)[1]"],[1," )"],[0," <= Guit"]],"start1":3066,"start2":3066,"length1":16,"length2":18}]],"length":6074,"saved":false}
{"ts":1361071414012,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(\"stringNotes\");\n            console.log( stringNotes );"],[0,"\n   "]],"start1":2818,"start2":2818,"length1":75,"length2":8},{"diffs":[[0,"tring found!\");\n"],[1,"                console.log( stringNotes );\n                return foundNotes.push( stringNotes );\n"],[0,"            } el"]],"start1":3521,"start2":3521,"length1":32,"length2":131}]],"length":6106,"saved":false}
{"ts":1361071416164,"patch":[[{"diffs":[[0," stringNotes );\n"],[1,"                \n"],[0,"            } el"]],"start1":3620,"start2":3620,"length1":32,"length2":49}]],"length":6123,"saved":false}
{"ts":1361071495988,"patch":[[{"diffs":[[0,"                "],[1,"//"],[0,"return foundNote"]],"start1":3581,"start2":3581,"length1":32,"length2":34},{"diffs":[[0,"                "],[1,"//"],[0,"console.log( str"]],"start1":3798,"start2":3798,"length1":32,"length2":34}]],"length":6127,"saved":false}
{"ts":1361071505200,"patch":[[{"diffs":[[0,"rsively\n"],[1,"    return foundNotes;\n"],[0,"};\n\n/**\n"]],"start1":4497,"start2":4497,"length1":16,"length2":39}]],"length":6150,"saved":false}
{"ts":1361071606678,"patch":[[{"diffs":[[0,"            "],[-1,"return"],[1,"foundNotes ="],[0," foundNotes."]],"start1":3919,"start2":3919,"length1":30,"length2":36}]],"length":6156,"saved":false}
{"ts":1361071646292,"patch":[[{"diffs":[[0,"                "],[1,"//"],[0,"console.log(\"One"]],"start1":3470,"start2":3470,"length1":32,"length2":34},{"diffs":[[0,"                "],[1,"//"],[0,"console.log( str"]],"start1":3539,"start2":3539,"length1":32,"length2":34},{"diffs":[[0,"    "],[-1,"//return "],[0,"foun"]],"start1":3597,"start2":3597,"length1":17,"length2":8}]],"length":6151,"saved":false}
{"ts":1361071652796,"patch":[[{"diffs":[[0,"};\n        \n"],[1,"        return foundNotes;\n        \n"],[0,"    };\n    \n"]],"start1":4216,"start2":4216,"length1":24,"length2":60}]],"length":6187,"saved":false}
{"ts":1361071707396,"patch":[[{"diffs":[[0,"ength){\n        "],[1,"    "],[0,"console.warn( \"N"]],"start1":2443,"start2":2443,"length1":32,"length2":36}]],"length":6191,"saved":false}
{"ts":1361071719103,"patch":[[{"diffs":[[0,"tes on!\" );\n"],[1,"            return;\n"],[0,"        }\n  "]],"start1":2505,"start2":2505,"length1":24,"length2":44}]],"length":6211,"saved":false}
{"ts":1361071759189,"patch":[[{"diffs":[[0,"        "],[-1,"return"],[1,"var guitarChord ="],[0," GuitarC"]],"start1":5460,"start2":5460,"length1":22,"length2":33},{"diffs":[[0,"rd, base );\n"],[1,"        return guitarChord;\n"],[0,"    })\n};\n\n/"]],"start1":5527,"start2":5527,"length1":24,"length2":52}]],"length":6250,"saved":false}
{"ts":1361071793949,"patch":[[{"diffs":[[0,"h){\n            "],[1,"//"],[0,"console.warn( \"N"]],"start1":2447,"start2":2447,"length1":32,"length2":34}]],"length":6252,"saved":false}
{"ts":1361071820475,"patch":[[{"diffs":[[0,"h){\n            "],[-1,"//"],[0,"console.warn( \"N"]],"start1":2447,"start2":2447,"length1":34,"length2":32},{"diffs":[[0," enough "],[-1,"fret"],[1,"string"],[0,"s to fin"]],"start1":2481,"start2":2481,"length1":20,"length2":22},{"diffs":[[0,"es on!\" "],[1,"+ guitar.strings.length"],[0,");\n     "]],"start1":2508,"start2":2508,"length1":16,"length2":39}]],"length":6275,"saved":false}
{"ts":1361071826502,"patch":[[{"diffs":[[0,"s.length"],[1," - baseString"],[0,");\n     "]],"start1":2531,"start2":2531,"length1":16,"length2":29}]],"length":6288,"saved":false}
{"ts":1361071839027,"patch":[[{"diffs":[[0," on!\" + "],[1,"("],[0,"guitar.s"]],"start1":2510,"start2":2510,"length1":16,"length2":17},{"diffs":[[0,"eString)"],[1,")"],[0,";\n      "]],"start1":2546,"start2":2546,"length1":16,"length2":17}]],"length":6290,"saved":false}
{"ts":1361071873686,"patch":[[{"diffs":[[0,"h){\n            "],[1,"//"],[0,"console.warn( \"N"]],"start1":2447,"start2":2447,"length1":32,"length2":34}]],"length":6292,"saved":false}
{"ts":1361071952556,"patch":[[{"diffs":[[0,";\n    })"],[1,";"],[0,"\n};\n\n/**"]],"start1":5607,"start2":5607,"length1":16,"length2":17}]],"length":6293,"saved":false}
{"ts":1361071970331,"patch":[[{"diffs":[[0,"  return"],[1," _.compact("],[0," _(baseN"]],"start1":5460,"start2":5460,"length1":16,"length2":27},{"diffs":[[0,";\n    })"],[1,")"],[0,";\n};\n\n/*"]],"start1":5618,"start2":5618,"length1":16,"length2":17}]],"length":6305,"saved":false}
{"ts":1361072102673,"patch":[[{"diffs":[[0,"                "],[1,"//"],[0,"_(stringNotes).f"]],"start1":4133,"start2":4133,"length1":32,"length2":34},{"diffs":[[0,"            "],[1,"//"],[0,"    //if( fo"]],"start1":4193,"start2":4193,"length1":24,"length2":26},{"diffs":[[0,"                "],[1,"//"],[0,"});\n            "]],"start1":4244,"start2":4244,"length1":32,"length2":34}]],"length":6311,"saved":false}
{"ts":1361072150403,"patch":[[{"diffs":[[0,"o\n    \n    \n    "],[1,"//"],[0,"var foundNotes ="]],"start1":2267,"start2":2267,"length1":32,"length2":34}]],"length":6313,"saved":false}
{"ts":1361072161596,"patch":[[{"diffs":[[0,"baseString, "],[-1,"foundNotes"],[1,"[]"],[0,", guitar );\n"]],"start1":4392,"start2":4392,"length1":34,"length2":26}]],"length":6305,"saved":false}
{"ts":1361072190513,"patch":[[{"diffs":[[0,"rsively\n    "],[1,"//"],[0,"console.log("]],"start1":4444,"start2":4444,"length1":24,"length2":26},{"diffs":[[0,"tes:\");\n    "],[1,"//"],[0,"console.log("]],"start1":4478,"start2":4478,"length1":24,"length2":26}]],"length":6309,"saved":false}
{"ts":1361072225960,"patch":[[{"diffs":[[0,"ngth + \""],[1," "],[0,"matching"]],"start1":3819,"start2":3819,"length1":16,"length2":17}]],"length":6310,"saved":false}
{"ts":1361072300952,"patch":[[{"diffs":[[0,"undNotes"],[-1,", guitar "],[0,"){\n     "]],"start1":2364,"start2":2364,"length1":25,"length2":16},{"diffs":[[0,"   \n    var "],[-1,"foun"],[1,"chor"],[0,"dNotes = loo"]],"start1":4338,"start2":4338,"length1":28,"length2":28},{"diffs":[[0,"vely\n    return "],[-1,"foun"],[1,"chor"],[0,"dNotes;\n};\n\n/**\n"]],"start1":4599,"start2":4599,"length1":36,"length2":36}]],"length":6301,"saved":false}
{"ts":1361072366464,"patch":[[{"diffs":[[0,"    };\n        \n"],[1,"        // check if we have really found all notes in the chord\n"],[0,"        return f"]],"start1":4278,"start2":4278,"length1":32,"length2":96}]],"length":6365,"saved":false}
{"ts":1361072529203,"patch":[[{"diffs":[[0,"tes."],[-1,"concat"],[1,"push"],[0,"( st"]],"start1":4006,"start2":4006,"length1":14,"length2":12},{"diffs":[[0,"n the chord\n"],[1,"        \n        \n"],[0,"        retu"]],"start1":4344,"start2":4344,"length1":24,"length2":42}]],"length":6381,"saved":false}
{"ts":1361072565820,"patch":[[{"diffs":[[0,", []"],[-1,", guitar "],[0,");\n "]],"start1":4474,"start2":4474,"length1":17,"length2":8}]],"length":6372,"saved":false}
{"ts":1361072624317,"patch":[[{"diffs":[[0,"        "],[-1," foundNotes ="],[0," foundNo"]],"start1":3977,"start2":3977,"length1":29,"length2":16}]],"length":6359,"saved":false}
{"ts":1361072708461,"patch":[[{"diffs":[[0,"RETCH = "],[-1,"2"],[1,"3"],[0,";\n\n\n/**\n"]],"start1":454,"start2":454,"length1":17,"length2":17}]],"length":6359,"saved":false}
{"ts":1361072824594,"patch":[[{"diffs":[[0,"H = "],[-1,"3"],[1,"4"],[0,";\n\n\n"]],"start1":458,"start2":458,"length1":9,"length2":9}]],"length":6359,"saved":false}
{"ts":1361072916838,"patch":[[{"diffs":[[0," chord \n"],[1,"            var lowestFret = 1000;\n            var highestFret = -1;\n"],[0,"        "]],"start1":2711,"start2":2711,"length1":16,"length2":85}]],"length":6428,"saved":false}
{"ts":1361072986689,"patch":[[{"diffs":[[0,"function(note){\n"],[1,"                lowestFret = Math.min(note.pos[1], lowestFret);\n                highestFret = Math.max(note.pos[1], highestFret);\n                \n"],[0,"                "]],"start1":2844,"start2":2844,"length1":32,"length2":179}]],"length":6575,"saved":false}
{"ts":1361073142602,"patch":[[{"diffs":[[0,"var "],[-1,"lowestFret = 1000;\n            var highestFret = -1;\n            var stringNotes = _(guitar.notes[i]).filter(function(note){\n                lowestFret = Math.min(note.pos[1], lowestFret);\n                highestFret = Math.max(note.pos[1], highestFret);\n                "],[1,"stringNotes = _(guitar.notes[i]).filter(function(note){"],[0,"\n   "]],"start1":2731,"start2":2731,"length1":279,"length2":63},{"diffs":[[0,"});\n"],[-1,"            \n            "],[0,"\n   "]],"start1":2865,"start2":2865,"length1":33,"length2":8},{"diffs":[[0,"    "],[1,"}\n"],[0,"    "],[-1,"// return some"],[1,"    };"],[0,"\n   "]],"start1":4018,"start2":4018,"length1":26,"length2":20},{"diffs":[[0,"     };\n        "],[1,"\n"],[0,"        // remov"]],"start1":4027,"start2":4027,"length1":32,"length2":33},{"diffs":[[0," // "],[-1,"remove alread"],[1,"check if we have reall"],[0,"y found "],[1,"all "],[0,"notes"],[1," in the chord"],[0,"\n   "]],"start1":4051,"start2":4051,"length1":34,"length2":60},{"diffs":[[0,"e chord\n        "],[1,"\n"],[0,"        //_(stri"]],"start1":4100,"start2":4100,"length1":32,"length2":33},{"diffs":[[0,"  //"],[-1,"_(stringNotes).filter(function(note){\n           "],[1,"var lowestFret = 1000;\n        //var highestFret = -1;\n"],[0,"     "],[-1,"//"],[0,"   "],[-1," //if( foundNotes.note.relPos() )\n                //});\n            }\n        };\n        \n        // check if we have really found all notes in the chord"],[1,"var stringNotes = _(foundNotes).each(function(note){\n            lowestFret = Math.min(note.pos[1], lowestFret);\n            highestFret = Math.max(note.pos[1], highestFret);"],[0,"\n   "]],"start1":4123,"start2":4123,"length1":220,"length2":245},{"diffs":[[0,"tFret);\n        "],[1,"});"],[0,"\n        \n      "]],"start1":4357,"start2":4357,"length1":32,"length2":35}]],"length":6384,"saved":false}
{"ts":1361073167908,"patch":[[{"diffs":[[0,"ch(function(note"],[1,"s"],[0,"){\n            l"]],"start1":4224,"start2":4224,"length1":32,"length2":33},{"diffs":[[0,"ath.min(note"],[1,"s[0]"],[0,".pos[1], low"]],"start1":4270,"start2":4270,"length1":24,"length2":28},{"diffs":[[0,"ath.max(note"],[1,"s[0]"],[0,".pos[1], hig"]],"start1":4335,"start2":4335,"length1":24,"length2":28}]],"length":6393,"saved":false}
{"ts":1361073204507,"patch":[[{"diffs":[[0,"   });\n        \n"],[1,"        console.log( \"Biggest distance between frets: \" + highestFret-lowestFret);\n        \n"],[0,"        return f"]],"start1":4379,"start2":4379,"length1":32,"length2":124}]],"length":6485,"saved":false}
{"ts":1361073221542,"patch":[[{"diffs":[[0,"   \n        "],[-1,"//"],[0,"var lowestFr"]],"start1":4113,"start2":4113,"length1":26,"length2":24},{"diffs":[[0,"00;\n        "],[-1,"//"],[0,"var highestF"]],"start1":4144,"start2":4144,"length1":26,"length2":24},{"diffs":[[0,"t = -1;\n"],[1,"        \n"],[0,"        "]],"start1":4170,"start2":4170,"length1":16,"length2":25}]],"length":6490,"saved":false}
{"ts":1361074563952,"patch":[[{"diffs":[[0,"ion("],[-1,"prev_note, note"],[1,"memo, note, index, list"],[0,"){\n "]],"start1":4728,"start2":4728,"length1":23,"length2":31}]],"length":6566,"saved":false}
{"ts":1361074608079,"patch":[[{"diffs":[[0," list){\n"],[1,"        // first item\n        if( memo instanceof Guitarnote ) memo = [memo];\n"],[0,"        "]],"start1":4750,"start2":4750,"length1":16,"length2":94}]],"length":6644,"saved":false}
{"ts":1361074620542,"patch":[[{"diffs":[[0,"o];\n        "],[1,"memo.push(note);"],[0,"\n    })\n    "]],"start1":4832,"start2":4832,"length1":24,"length2":40}]],"length":6660,"saved":false}
{"ts":1361074643930,"patch":[[{"diffs":[[0,"f Guitar"],[-1,"n"],[1,"N"],[0,"ote ) me"]],"start1":4806,"start2":4806,"length1":17,"length2":17}]],"length":6660,"saved":false}
{"ts":1361074676323,"patch":[[{"diffs":[[0,"if( "],[1,"!"],[0,"memo "],[-1,"instanceof GuitarNote "],[0,") me"]],"start1":4788,"start2":4788,"length1":35,"length2":14},{"diffs":[[0,"memo = ["],[-1,"memo"],[0,"];\n     "]],"start1":4800,"start2":4800,"length1":20,"length2":16}]],"length":6635,"saved":false}
{"ts":1361074699665,"patch":[[{"diffs":[[0,"s);\n    "],[1,"/*"],[0,"_(chordN"]],"start1":4694,"start2":4694,"length1":16,"length2":18},{"diffs":[[0,";\n    })"],[1,"*/"],[0,"\n    \n  "]],"start1":4836,"start2":4836,"length1":16,"length2":18}]],"length":6639,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363909410373,"patch":[[{"diffs":[[0,"ar chord\n * \n * "],[1,"@constructor"],[0,"\n * \n * @param g"]],"start1":52,"start2":52,"length1":32,"length2":44},{"diffs":[[0,"\");\n    "],[-1,"/*"],[0,"//consol"]],"start1":4675,"start2":4675,"length1":18,"length2":16},{"diffs":[[0,"    "],[-1,"*/\n    // check if we have found all the notes"],[1,"/*_(chordNotes).reduce(function(memo, note, index, list){"],[0,"\n   "]],"start1":4710,"start2":4710,"length1":54,"length2":65},{"diffs":[[0," memo = [];\n"],[1,"    "],[0,"    memo.pus"]],"start1":4813,"start2":4813,"length1":24,"length2":28},{"diffs":[[0,"push(note);\n"],[1,"    })*/\n    \n    // check if we have found all the notes\n    \n"],[0,"    // can w"]],"start1":4838,"start2":4838,"length1":24,"length2":87}]],"length":6651,"saved":false}
{"ts":1363909682584,"patch":[[{"diffs":[[0,"        "],[-1,"{"],[0,"\n *     "]],"start1":839,"start2":839,"length1":17,"length2":16},{"diffs":[[0,"        "],[-1,"}"],[0,"\n * \n * "]],"start1":991,"start2":991,"length1":17,"length2":16}]],"length":6649,"saved":false}
{"ts":1363909699492,"patch":[[{"diffs":[[0,"same;\n    \n}"],[1,";"]],"start1":6637,"start2":6637,"length1":12,"length2":13}]],"length":6650,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363948933180,"patch":[[{"diffs":[[0," guitar "],[-1,":"],[1,"{Guitar} -"],[0," a Guita"]],"start1":94,"start2":94,"length1":17,"length2":26},{"diffs":[[0,"m chord "],[-1,":"],[1,"{Chord} -"],[0," a Chord"]],"start1":167,"start2":167,"length1":17,"length2":25},{"diffs":[[0,"m notes "],[-1,":"],[1,"{array} -"],[0," a colle"]],"start1":208,"start2":208,"length1":17,"length2":25},{"diffs":[[0," guitar "],[-1,":"],[1,"{Guitar} -"],[0," the gui"]],"start1":604,"start2":604,"length1":17,"length2":26},{"diffs":[[0,"m chord "],[-1,":"],[1,"{Chord} -"],[0," the Cho"]],"start1":672,"start2":672,"length1":17,"length2":25},{"diffs":[[0,"am base "],[-1,":"],[1,"{GuitarNote}"],[0," the Bas"]],"start1":748,"start2":748,"length1":17,"length2":28},{"diffs":[[0,"options "],[-1,":"],[1,"{object}"],[0," an obje"]],"start1":835,"start2":835,"length1":17,"length2":24},{"diffs":[[0,"       \n * \n"],[-1,""],[0," * @returns "]],"start1":1052,"start2":1052,"length1":24,"length2":24},{"diffs":[[0,"\n * @returns"],[1," {array}"],[0," an array of"]],"start1":1063,"start2":1063,"length1":24,"length2":32},{"diffs":[[0,"ch fret\n"],[1," * \n * @param guit\n"],[0," */\nGuit"]],"start1":5177,"start2":5177,"length1":16,"length2":35}]],"length":6737,"saved":false}
{"ts":1363948962714,"patch":[[{"diffs":[[0,"ram guit"],[1,"ar {Guitar} - A Guitar object\n * @param chord {Chord} - A chord object\n * \n * @returns {GuitarChord}"],[0,"\n */\nGui"]],"start1":5195,"start2":5195,"length1":16,"length2":116}]],"length":6837,"saved":false}
{"ts":1363948987716,"patch":[[{"diffs":[[0,"urns"],[1," {boolean} -"],[0," true"],[-1," :"],[0," if "]],"start1":6300,"start2":6300,"length1":15,"length2":25}]],"length":6847,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363966485571,"patch":[[{"diffs":[[0," @param "],[-1,"guitar "],[0,"{Guitar}"],[1," guitar"],[0," - a Gui"]],"start1":87,"start2":87,"length1":31,"length2":31},{"diffs":[[0," @param "],[-1,"c"],[1,"{C"],[0,"hord"],[-1," {C"],[1,"}  c"],[0,"hord"],[-1,"}"],[0," - a Cho"]],"start1":161,"start2":161,"length1":29,"length2":30},{"diffs":[[0,"ram "],[-1,"notes "],[0,"{array}"],[1,"  notes"],[0," - a"]],"start1":207,"start2":207,"length1":21,"length2":22}]],"length":6849,"saved":false}
{"ts":1363966571076,"patch":[[{"diffs":[[0,"valid\n *"],[-1,""],[0,""],[1," \n * @todo implement function\n *"],[0,"/\nGuitar"]],"start1":6340,"start2":6340,"length1":16,"length2":48},{"diffs":[[0,"e - "],[1,"\n * \n * @"],[0,"returns "],[-1,"an "],[1,"{"],[0,"integer"],[-1," representing"],[1,"}  "],[0," how"],[-1,"\n *"],[0," man"]],"start1":6444,"start2":6444,"length1":46,"length2":40},{"diffs":[[0,"rre."],[-1,"\n * \n * TODO: test"],[1," Calculated from the\n *                      top string\n * \n * @todo test function"],[0,"\n */"]],"start1":6510,"start2":6510,"length1":26,"length2":90}]],"length":6939,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363966936294,"patch":[[{"diffs":[[0,"r chord\n * \n"],[1," * @namespace Guitar\n * \n"],[0," * @construc"]],"start1":53,"start2":53,"length1":24,"length2":49}]],"length":6964,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363967347875,"patch":[[{"diffs":[[0,"mespace "],[-1,"G"],[1,"g"],[0,"uitar"],[1,".chord"],[0,"\n * \n * "]],"start1":71,"start2":71,"length1":22,"length2":28}]],"length":6970,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364225795025,"patch":[[{"diffs":[[0," * \n"],[-1," * @namespace guitar.chord\n"],[0," * \n"]],"start1":61,"start2":61,"length1":35,"length2":8},{"diffs":[[0,"                "],[1,"//"],[0,"console.log(\"Fou"]],"start1":3162,"start2":3162,"length1":32,"length2":34},{"diffs":[[0,"pos + \"]\");\n"],[-1,""],[0,"            "]],"start1":3243,"start2":3243,"length1":24,"length2":24},{"diffs":[[0,"                "],[1,"//"],[0,"console.log( str"]],"start1":3828,"start2":3828,"length1":32,"length2":34},{"diffs":[[0,"       \n        "],[1,"// TODO: not working\n        //"],[0,"console.log( \"Bi"]],"start1":4480,"start2":4480,"length1":32,"length2":63},{"diffs":[[0,"rsively\n    "],[-1,"//"],[0,"console.log("]],"start1":4744,"start2":4744,"length1":26,"length2":24},{"diffs":[[0,"tes:\");\n    "],[-1,"//"],[0,"console.log("]],"start1":4776,"start2":4776,"length1":26,"length2":24},{"diffs":[[0,"ole.log("],[-1,"foun"],[1,"chor"],[0,"dNotes);"]],"start1":4792,"start2":4792,"length1":20,"length2":20},{"diffs":[[0,"allowed!\");\n"],[-1,""],[0,"        retu"]],"start1":5469,"start2":5469,"length1":24,"length2":24},{"diffs":[[0,"      return"],[1," null"],[0,";\n    }\n    "]],"start1":5483,"start2":5483,"length1":24,"length2":29}]],"length":6979,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364229116316,"patch":[[{"diffs":[[0,"e = 0;\n    \n"],[1,"    /** \n     * five fingers that we can use\n     * 0 : thumb\n     * 1 : index\n     * 2 : middle\n     * 3 : ring\n     * 4 : pinky\n     */\n"],[0,"    var fing"]],"start1":2215,"start2":2215,"length1":24,"length2":162}]],"length":7117,"saved":false}
{"ts":1364229320753,"patch":[[{"diffs":[[0,"re = 0;\n"],[1,"    \n    /**\n     * how easy it is to play the chord.\n     * \n     * these factors add weight:\n     * - each note played\n     *   + 1 for each note played\n     * - the distance of each note relative to the previous note\n     *   + 1 for each extra fret distance between two notes\n     * - the distance of the note to the base note\n     * - the number of fingers used\n     *   + 1 for each finger used, + 100 if more than all fingers are used (impossible)\n     * \n     * lower is better, no note has ease 0,\n     * 1 note at least ease 1\n     */\n    var ease = 0;\n    \n    /** \n     * five fingers that we can use\n     * 0 : thumb\n     * 1 : index\n     * 2 : middle\n     * 3 : ring\n     * 4 : pinky\n     */\n    var fingersUsed = [ false, false, false, false, false];\n"],[0,"};\n\n/**\n"]],"start1":433,"start2":433,"length1":16,"length2":782},{"diffs":[[0,"    "],[-1,"/**\n     * how easy it is to play the chord.\n     * \n     * these factors add weight:\n     * - each note played\n     *   + 1 for each note played\n     * - the distance of each note relative to the previous note\n     *   + 1 for each extra fret distance between two notes\n     * - the distance of the note to the base note\n     * - the number of fingers used\n     *   + 1 for each finger used, + 100 if more than all fingers are used (impossible)\n     * \n     * lower is better, no note has ease 0,\n     * 1 note at least ease 1\n     */\n    var ease = 0;\n    \n    /** \n     * five fingers that we can use\n     * 0 : thumb\n     * 1 : index\n     * 2 : middle\n     * 3 : ring\n     * 4 : pinky\n     */\n    var fingersUsed = [ false, false, false, false, false];"],[0,"\n   "]],"start1":2430,"start2":2430,"length1":764,"length2":8}]],"length":7127,"saved":false}
{"ts":1364229388886,"patch":[[{"diffs":[[0,"can use\n"],[1,"     * \n     * In case you're Django, please remove the last three\n     * items from the list \n"],[0,"     * 0"]],"start1":1046,"start2":1046,"length1":16,"length2":111},{"diffs":[[0,"   \n"],[-1,"    \n    /* a list of all five fingers the user has in his left hand\n       In case you're Django, please remove the last three\n       items from the list\n       \n       This will be used to determine the 'easyness' of the chord\n       \n    */\n    \n    \n"],[0,"    "]],"start1":2272,"start2":2272,"length1":262,"length2":8}]],"length":6968,"saved":false}
{"ts":1364229621810,"patch":[[{"diffs":[[0,"   \n"],[-1,"        // check if we have really found all notes in the chord\n        \n        var lowestFret = 1000;\n        var highestFret = -1;\n        \n        var stringNotes = _(foundNotes).each(function(notes){\n            lowestFret = Math.min(notes[0].pos[1], lowestFret);\n            highestFret = Math.max(notes[0].pos[1], highestFret);\n        });\n        \n        // TODO: not working\n        //console.log( \"Biggest distance between frets: \" + highestFret-lowestFret);\n        \n"],[0,"    "]],"start1":4117,"start2":4117,"length1":487,"length2":8}]],"length":6489,"saved":false}
{"ts":1364229829628,"patch":[[{"diffs":[[0,"hordNotes);\n"],[1,"    \n    /* CREATE CHORDS OF ALL POSSIBLE COMBINATIONS */\n    \n    \n"],[0,"    /*_(chor"]],"start1":4311,"start2":4311,"length1":24,"length2":92}]],"length":6557,"saved":false}
{"ts":1364230598728,"patch":[[{"diffs":[[0,"ONS */\n    \n"],[1,"    // array of chords\n    var matches = [];\n    \n    matches.push([]);\n    // add notes to the chord\n    _(chordNotes).each(function(notes, index){\n        \n        _(notes).each(function(note, noteindex){\n            if( noteindex == 0)\n                matches.last.push( note );\n            else \n        });\n    });\n"],[0,"    \n    /*_"]],"start1":4374,"start2":4374,"length1":24,"length2":344}]],"length":6877,"saved":false}
{"ts":1364230756053,"patch":[[{"diffs":[[0,"    "],[1,"_("],[0,"matches"],[1,")"],[0,".last"],[1,"()"],[0,".pus"]],"start1":4637,"start2":4637,"length1":20,"length2":25},{"diffs":[[0,"   else "],[1,"{\n                // make a copy of the last item\n                matches.push( _( _(matches).last() ).clone().push(note) );\n                // add this item to it\n                // and push it\n            }\n                "],[0,"\n       "]],"start1":4682,"start2":4682,"length1":16,"length2":241},{"diffs":[[0,"   });\n    \n"],[1,"    c\n    \n"],[0,"    /*_(chor"]],"start1":4929,"start2":4929,"length1":24,"length2":35}]],"length":7118,"saved":false}
{"ts":1364230788327,"patch":[[{"diffs":[[0,"  \n    c"],[1,"onsole.log(\"Matches:\");\n    console.log( matches );"],[0,"\n    \n  "]],"start1":4938,"start2":4938,"length1":16,"length2":67}]],"length":7169,"saved":false}
{"ts":1364230810132,"patch":[[{"diffs":[[0,"().push("],[1," ["],[0,"note"],[1," ]"],[0,") );\n   "]],"start1":4798,"start2":4798,"length1":20,"length2":24}]],"length":7173,"saved":false}
{"ts":1364230889275,"patch":[[{"diffs":[[0,"    "],[-1,"matches.push("],[1,"var newMatch ="],[0," _("],[-1," "],[0,"_(ma"]],"start1":4752,"start2":4752,"length1":25,"length2":25},{"diffs":[[0,"st()"],[-1," "],[0,").clone("],[-1,").push( [note ]) "],[0,");\n "]],"start1":4786,"start2":4786,"length1":34,"length2":16},{"diffs":[[0,"    "],[-1,"// and push it"],[1,"newMatch.push( note );\n                // and push it\n                matches.push( newMatch );"],[0,"\n   "]],"start1":4852,"start2":4852,"length1":22,"length2":103}]],"length":7236,"saved":false}
{"ts":1364231110920,"patch":[[{"diffs":[[0,"];\n    \n    "],[1,"//"],[0,"matches.push"]],"start1":4428,"start2":4428,"length1":24,"length2":26},{"diffs":[[0,"s.push([]);\n"],[-1,""],[0,"    // add n"]],"start1":4448,"start2":4448,"length1":24,"length2":24},{"diffs":[[0,"    "],[-1,"if( noteindex == 0)\n                _(matches).last().push( note );\n            else {\n                // make a copy of the last item\n                var newMatch = _(_(matches).last()).clone();\n                // add this item to it\n                newMatch.push( note );\n                // and push it\n                matches.push( newMatch );\n            }\n                "],[0,"\n   "]],"start1":4603,"start2":4603,"length1":385,"length2":8}]],"length":6861,"saved":false}
{"ts":1364231710855,"patch":[[{"diffs":[[0,"index){\n"],[-1,"        \n"],[0,"        "]],"start1":4529,"start2":4529,"length1":25,"length2":16},{"diffs":[[0,"x){\n            "],[1,"_matches.each(function(match){\n                \n            });"],[0,"\n        });\n   "]],"start1":4582,"start2":4582,"length1":32,"length2":95}]],"length":6915,"saved":false}
{"ts":1364232271521,"patch":[[{"diffs":[[0,"o the chord\n"],[1,"    \n    for( var i = 0; i < chordNotes.length; i++){\n        var notes = chordNotes[i];\n        \n        if( notes.length > 1 ){\n            // we need to make a copy of the current matches\n            \n        }\n        for( var j = 0; j < notes.length; j++){\n            var note = notes[j];\n            \n        }\n    }\n    /*\n"],[0,"    _(chordN"]],"start1":4478,"start2":4478,"length1":24,"length2":355},{"diffs":[[0,"     });\n    });"],[1,"*/"],[0,"\n    \n    consol"]],"start1":4996,"start2":4996,"length1":32,"length2":34}]],"length":7248,"saved":false}
{"ts":1364232599857,"patch":[[{"diffs":[[0,"    "],[-1,"// array of chords\n    var matches = [];"],[1,"var combinations = function(lists) {"],[0,"\n    "],[-1,"\n"],[0,"    "],[-1,"//matches.push([]);\n    // add notes to the chord\n    \n    for( var i = 0; i < chordNotes.length; i++){\n        var notes = chordNotes[i]"],[1,"if (lists.length == 0) {\n            return [];\n        } else {\n            var pr = permutations(_.rest(lists))"],[0,";\n  "]],"start1":4386,"start2":4386,"length1":195,"length2":166},{"diffs":[[0,"    "],[-1,"\n"],[0,"    "],[-1,"    if( notes.length > 1 ){\n            // we need to make a copy of the current matches"],[1,"return _.map(_.first(lists),function(fp) {\n                return [fp].concat(pr);"],[0,"\n   "]],"start1":4554,"start2":4554,"length1":101,"length2":94},{"diffs":[[0,"r);\n            "],[1,"});"],[0,"\n        }\n     "]],"start1":4641,"start2":4641,"length1":32,"length2":35},{"diffs":[[0,"    "],[1,"};\n"],[0,"    "],[-1,"for( var j = 0; j < notes.length; j++){\n            var note = n"],[1,"// array of chords\n    var matches = combinations( chordN"],[0,"otes"],[-1,"[j]"],[1," )"],[0,";\n    "],[1,"\n"],[0,"    "],[-1,"    \n        }\n    }"],[0,"\n   "]],"start1":4671,"start2":4671,"length1":113,"length2":89}]],"length":7191,"saved":false}
{"ts":1364232610286,"patch":[[{"diffs":[[0,"r = "],[-1,"permut"],[1,"combin"],[0,"atio"]],"start1":4517,"start2":4517,"length1":14,"length2":14},{"diffs":[[0,"   \n"],[-1,"    /*\n    _(chordNotes).each(function(notes, index){\n        _(notes).each(function(note, noteindex){\n            _matches.each(function(match){\n                \n            });\n        });\n    });*/\n    \n"],[0,"    "]],"start1":4753,"start2":4753,"length1":214,"length2":8}]],"length":6985,"saved":false}
{"ts":1364232724246,"patch":[[{"diffs":[[0,"e {\n"],[-1,"            var pr = combinations(_.rest(lists));\n"],[0,"    "]],"start1":4496,"start2":4496,"length1":58,"length2":8},{"diffs":[[0,".concat("],[-1,"pr"],[1,"combinations(_.rest(lists))"],[0,");\n     "]],"start1":4582,"start2":4582,"length1":18,"length2":43},{"diffs":[[0,"      }\n"],[-1,""],[0,"    };\n"],[1,"    \n"],[0,"    // a"]],"start1":4638,"start2":4638,"length1":23,"length2":28}]],"length":6965,"saved":false}
{"ts":1364233300984,"patch":[[{"diffs":[[0,"    var "],[-1,"combin"],[1,"permut"],[0,"ations ="]],"start1":4386,"start2":4386,"length1":22,"length2":22},{"diffs":[[0,"ists) {\n"],[-1,"       "],[0," if (lis"]],"start1":4419,"start2":4419,"length1":23,"length2":16},{"diffs":[[0,"== 0) {\n"],[-1,"          "],[0,"  return"]],"start1":4445,"start2":4445,"length1":26,"length2":16},{"diffs":[[0,"urn [];\n"],[-1,"       "],[0," } else "]],"start1":4458,"start2":4458,"length1":23,"length2":16},{"diffs":[[0,"lse {\n  "],[-1,"        "],[1,"var pr = permutations(_.rest(lists));\n"],[0,"  return"]],"start1":4470,"start2":4470,"length1":24,"length2":54},{"diffs":[[0," {\n "],[-1,"               return [fp].concat(combinations(_.rest(lists)));\n            });\n        }\n   "],[1,"return _.map(pr,function(p) {\n     return [fp].concat(p);\n });\n  });\n }\n"],[0," };\n"]],"start1":4558,"start2":4558,"length1":101,"length2":80},{"diffs":[[0,"tches = "],[-1,"combin"],[1,"permut"],[0,"ations( "]],"start1":4676,"start2":4676,"length1":22,"length2":22}]],"length":6950,"saved":false}
{"ts":1364238601060,"patch":[[{"diffs":[[0,"ists) {\n"],[1,"       "],[0," if (lis"]],"start1":4419,"start2":4419,"length1":16,"length2":23},{"diffs":[[0,"== 0) {\n"],[1,"          "],[0,"  return"]],"start1":4452,"start2":4452,"length1":16,"length2":26},{"diffs":[[0,"urn [];\n"],[1,"       "],[0," } else "]],"start1":4475,"start2":4475,"length1":16,"length2":23},{"diffs":[[0," else {\n"],[1,"          "],[0,"  var pr"]],"start1":4492,"start2":4492,"length1":16,"length2":26},{"diffs":[[0,"ists));\n"],[1,"          "],[0,"  return"]],"start1":4542,"start2":4542,"length1":16,"length2":26},{"diffs":[[0,"n(fp) {\n"],[1,"               "],[0," return "]],"start1":4597,"start2":4597,"length1":16,"length2":31},{"diffs":[[0," {\n "],[-1,"   "],[1,"                  "],[0," ret"]],"start1":4648,"start2":4648,"length1":11,"length2":26},{"diffs":[[0,");\n "],[-1,"});\n  });\n }\n"],[1,"                   });\n                });\n        }\n   "],[0," };\n"]],"start1":4691,"start2":4691,"length1":21,"length2":64}]],"length":7067,"saved":false}
{"ts":1364239184220,"patch":[[{"diffs":[[0,"        "],[1," "],[0,"if (list"]],"start1":4427,"start2":4427,"length1":16,"length2":17},{"diffs":[[0," 0) {\n          "],[-1,"  "],[0,"return [];\n     "]],"start1":4455,"start2":4455,"length1":34,"length2":32},{"diffs":[[0,"urn [];\n        "],[1," "],[0,"} else {\n       "]],"start1":4474,"start2":4474,"length1":32,"length2":33},{"diffs":[[0,"       } else {\n"],[-1,"  "],[0,"          var pr"]],"start1":4484,"start2":4484,"length1":34,"length2":32},{"diffs":[[0,"ts));\n          "],[-1,"  "],[0,"return _.map(_.f"]],"start1":4542,"start2":4542,"length1":34,"length2":32},{"diffs":[[0,") {\n"],[-1,"                return _.map(pr,function(p) {\n      "],[0,"    "]],"start1":4597,"start2":4597,"length1":60,"length2":8},{"diffs":[[0,"concat(p"],[1,"r"],[0,");\n     "]],"start1":4627,"start2":4627,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"      "],[-1,"    });\n                });\n        }\n"],[1,"});\n         }\n "],[0,"    "]],"start1":4645,"start2":4645,"length1":52,"length2":24}]],"length":6984,"saved":false}
{"ts":1364239303635,"patch":[[{"diffs":[[0,"ction(fp) {\n"],[1,"              console.log(fp);\n"],[0,"            "]],"start1":4589,"start2":4589,"length1":24,"length2":55}]],"length":7015,"saved":false}
{"ts":1364239322516,"patch":[[{"diffs":[[0,"ole.log("],[-1,"f"],[0,"p"],[1,"r"],[0,");\n     "]],"start1":4619,"start2":4619,"length1":18,"length2":18}]],"length":7015,"saved":false}
{"ts":1364239414257,"patch":[[{"diffs":[[0,"(lists))"],[1,"[0]"],[0,";\n      "]],"start1":4538,"start2":4538,"length1":16,"length2":19}]],"length":7018,"saved":false}
{"ts":1364239421890,"patch":[[{"diffs":[[0,"{\n              "],[1,"//"],[0,"console.log(pr);"]],"start1":4602,"start2":4602,"length1":32,"length2":34}]],"length":7020,"saved":false}
{"ts":1364239425175,"patch":[[{"diffs":[[0,"{\n              "],[-1,"//"],[0,"console.log(pr);"]],"start1":4602,"start2":4602,"length1":34,"length2":32}]],"length":7018,"saved":false}
{"ts":1364241166296,"patch":[[{"diffs":[[0,"  return"],[1," pr ?"],[0," [fp].co"]],"start1":4647,"start2":4647,"length1":16,"length2":21},{"diffs":[[0,"].concat(pr)"],[1," : [fp]"],[0,";\n          "]],"start1":4664,"start2":4664,"length1":24,"length2":31}]],"length":7030,"saved":false}
{"ts":1364241490056,"patch":[[{"diffs":[[0,"(lists))"],[-1,"[0];"],[1,";\n          console.log(\"pr length: \" + pr.length)"],[0,"\n       "]],"start1":4538,"start2":4538,"length1":20,"length2":66}]],"length":7076,"saved":false}
{"ts":1364241702046,"patch":[[{"diffs":[[0,"log("],[-1,"\""],[0,"pr"],[-1," length: \" + pr.length"],[0,")\n  "]],"start1":4566,"start2":4566,"length1":33,"length2":10}]],"length":7053,"saved":false}
{"ts":1364241719814,"patch":[[{"diffs":[[0,"{\n              "],[1,"//"],[0,"console.log(pr);"]],"start1":4625,"start2":4625,"length1":32,"length2":34},{"diffs":[[0,"turn"],[-1," pr ?"],[0," [fp"]],"start1":4676,"start2":4676,"length1":13,"length2":8},{"diffs":[[0,"(pr)"],[-1," : [fp]"],[0,";\n  "]],"start1":4692,"start2":4692,"length1":15,"length2":8}]],"length":7043,"saved":false}
{"ts":1364241886707,"patch":[[{"diffs":[[0,".log(pr)"],[1,";\n          console.log(pr.length);"],[0,"\n       "]],"start1":4565,"start2":4565,"length1":16,"length2":51}]],"length":7078,"saved":false}
{"ts":1364241980354,"patch":[[{"diffs":[[0,"st(lists));\n"],[1,"          console.log(\"pr\");\n"],[0,"          co"]],"start1":4536,"start2":4536,"length1":24,"length2":53},{"diffs":[[0,"onsole.log(pr);\n"],[1,"              console.log(\"fp\");\n              console.log(fp);\n"],[0,"              re"]],"start1":4708,"start2":4708,"length1":32,"length2":96}]],"length":7171,"saved":false}
{"ts":1364242084720,"patch":[[{"diffs":[[0,";\n              "],[1,"//"],[0,"console.log(\"fp\""]],"start1":4722,"start2":4722,"length1":32,"length2":34},{"diffs":[[0,";\n              "],[1,"//"],[0,"console.log(fp);"]],"start1":4757,"start2":4757,"length1":32,"length2":34},{"diffs":[[0,";\n              "],[1,"//"],[0,"return [fp].conc"]],"start1":4790,"start2":4790,"length1":32,"length2":34},{"diffs":[[0,"concat(pr);\n"],[1,"              return pr.push(fp);\n"],[0,"          })"]],"start1":4820,"start2":4820,"length1":24,"length2":58}]],"length":7211,"saved":false}
{"ts":1364242585538,"patch":[[{"diffs":[[0,"    "],[-1,"//console.log(pr);\n              //console.log(\"fp\");\n              //console.log(fp);\n"],[1,"return _.map(pr,function(p) {\n          "],[0,"    "]],"start1":4701,"start2":4701,"length1":95,"length2":48},{"diffs":[[0,"        "],[-1,"    //"],[0,"return ["]],"start1":4747,"start2":4747,"length1":22,"length2":16},{"diffs":[[0,"concat(p"],[-1,"r"],[0,");\n "],[-1,"   "],[1,"   "],[0,"        "]],"start1":4767,"start2":4767,"length1":24,"length2":23},{"diffs":[[0,"    "],[-1,"return pr.push(fp"],[1,"}"],[0,");\n "]],"start1":4788,"start2":4788,"length1":25,"length2":9}]],"length":7141,"saved":false}
{"ts":1364242628383,"patch":[[{"diffs":[[0,") {\n            "],[-1,"  "],[0,"return _.map(pr,"]],"start1":4687,"start2":4687,"length1":34,"length2":32},{"diffs":[[0,"on(p) {\n"],[-1,"    "],[0,"        "]],"start1":4725,"start2":4725,"length1":20,"length2":16},{"diffs":[[0,");\n "],[-1,"   "],[1," "],[0,"    "]],"start1":4769,"start2":4769,"length1":11,"length2":9}]],"length":7133,"saved":false}
{"ts":1364243535707,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(\"pr\");\n          console.log(pr);\n          console.log(pr.length);\n          return _.map"],[1,"\n          var ret = [];\n          _.each"],[0,"(_.f"]],"start1":4554,"start2":4554,"length1":110,"length2":49},{"diffs":[[0,"    "],[-1,"return _.map"],[1,"_.each"],[0,"(pr,"]],"start1":4638,"start2":4638,"length1":20,"length2":14},{"diffs":[[0,"     ret"],[-1,"urn"],[1,".push("],[0," [fp].co"]],"start1":4677,"start2":4677,"length1":19,"length2":22},{"diffs":[[0,"oncat(p)"],[1," )"],[0,";\n      "]],"start1":4698,"start2":4698,"length1":16,"length2":18},{"diffs":[[0,"    "],[1," return ret;\n         }\n     };\n     \n     var combinations = function( lists ){\n         if( lists.length == 0) return [];\n         else {\n             \n         "],[0,"}\n     }"],[-1,";"],[0,"\n   "]],"start1":4745,"start2":4745,"length1":17,"length2":179}]],"length":7233,"saved":false}
{"ts":1364243613534,"patch":[[{"diffs":[[0,"ction(fp) {\n"],[1,"              console.log(\"fp.length \" + fp.length);\n              console.log(\"pr.length \" + pr.length);\n"],[0,"            "]],"start1":4618,"start2":4618,"length1":24,"length2":130}]],"length":7339,"saved":false}
{"ts":1364243637355,"patch":[[{"diffs":[[0,";\n          });\n"],[1,"          \n          console.log(\"ret\");\n          console.log(ret);\n"],[0,"          return"]],"start1":4830,"start2":4830,"length1":32,"length2":101}]],"length":7408,"saved":false}
{"ts":1364243738217,"patch":[[{"diffs":[[0,"s));\n          \n"],[1,"          console.log(\"lists\");\n          console.log(lists);\n          \n"],[0,"          var re"]],"start1":4543,"start2":4543,"length1":32,"length2":105}]],"length":7481,"saved":false}
{"ts":1364243809309,"patch":[[{"diffs":[[0,"     return [];\n"],[1,"         } else if( lists.length == 1 ){\n             return lists[0];\n"],[0,"         } else "]],"start1":4466,"start2":4466,"length1":32,"length2":103}]],"length":7552,"saved":false}
{"ts":1364243884454,"patch":[[{"diffs":[[0," });\n          \n"],[1,"          console.log(\"ret.length \" + ret.length);\n"],[0,"          consol"]],"start1":4985,"start2":4985,"length1":32,"length2":83}]],"length":7603,"saved":false}
{"ts":1364244095125,"patch":[[{"diffs":[[0,"    var "],[-1,"permut"],[1,"combin"],[0,"ations ="]],"start1":4386,"start2":4386,"length1":22,"length2":22},{"diffs":[[0,"        "],[-1," "],[0,"if (list"]],"start1":4427,"start2":4427,"length1":17,"length2":16},{"diffs":[[0,"{\n          "],[1," "],[1," "],[0,"return [];\n "]],"start1":4458,"start2":4458,"length1":24,"length2":26},{"diffs":[[0,"     return [];\n"],[-1," "],[0,"        } else i"]],"start1":4467,"start2":4467,"length1":33,"length2":32},{"diffs":[[0,".length == 1 ){\n"],[-1," "],[0,"            retu"]],"start1":4507,"start2":4507,"length1":33,"length2":32},{"diffs":[[0,"sts[0];\n        "],[-1," "],[0,"} else {\n       "]],"start1":4544,"start2":4544,"length1":33,"length2":32},{"diffs":[[0,"       } else {\n"],[1,"  "],[0,"          var pr"]],"start1":4553,"start2":4553,"length1":32,"length2":34},{"diffs":[[0,"ar pr = "],[-1,"permut"],[1,"combin"],[0,"ations(_"]],"start1":4582,"start2":4582,"length1":22,"length2":22},{"diffs":[[0,"    "],[-1,"\n          console.log(\"lists\");\n          console.log(lists);\n          \n        "],[0,"  va"]],"start1":4625,"start2":4625,"length1":90,"length2":8},{"diffs":[[0,"r ret = [];\n"],[1,"  "],[0,"          _."]],"start1":4633,"start2":4633,"length1":24,"length2":26},{"diffs":[[0,"    "],[-1,"          console.log(\"fp.length \" + fp.length);\n              console.log(\"pr.length \" + pr.length);\n"],[0,"    "]],"start1":4694,"start2":4694,"length1":110,"length2":8},{"diffs":[[0,"nction(p) {\n"],[1,"    "],[0,"            "]],"start1":4722,"start2":4722,"length1":24,"length2":28},{"diffs":[[0,"        "],[-1,"  });\n"],[0,"      "],[-1,"    "],[0,"});\n    "]],"start1":4784,"start2":4784,"length1":32,"length2":22},{"diffs":[[0,"    "],[-1,"\n  "],[0,"  "],[-1,"      console.log(\"ret.length \" + ret.length);\n          console.log(\"ret\");\n          console.log(ret"],[1,"}"],[0,");\n "]],"start1":4808,"start2":4808,"length1":115,"length2":11},{"diffs":[[0,"    "],[-1," "],[0,"}\n"],[-1," "],[0,"    };\n"],[-1,"     \n     var combinations = function( lists ){\n         if( lists.length == 0) return [];\n         else {\n             \n         }\n     }\n"],[0,"    "]],"start1":4844,"start2":4844,"length1":159,"length2":17}]],"length":7169,"saved":false}
{"ts":1364244119699,"patch":[[{"diffs":[[0,"s = "],[-1,"permut"],[1,"combin"],[0,"atio"]],"start1":4899,"start2":4899,"length1":14,"length2":14}]],"length":7169,"saved":false}
{"ts":1364244245856,"patch":[[{"diffs":[[0,"otes );\n"],[-1,"    \n    "],[0,"\n    con"]],"start1":4923,"start2":4923,"length1":25,"length2":16},{"diffs":[[0,"og(\""],[-1,"M"],[1,"# of m"],[0,"atches"],[-1,":"],[0,"\");\n"]],"start1":4945,"start2":4945,"length1":16,"length2":20},{"diffs":[[0,"ches"],[1,".length"],[0," );\n    "],[-1,"\n    /*_(chordNotes).reduce(function(memo, note, index, list){\n        // first item\n        if( !memo ) memo = [];\n        memo.push(note);\n    })*/"],[0,"\n   "]],"start1":4985,"start2":4985,"length1":165,"length2":23}]],"length":7022,"saved":false}
{"ts":1364244323043,"patch":[[{"diffs":[[0,"otes = [];\n    \n"],[1,"    /*\n    STEP 1: \n    create a list for each fret of possible notes within the MAX_STRETCH\n    */\n"],[0,"    var lookup ="]],"start1":2368,"start2":2368,"length1":32,"length2":132},{"diffs":[[0,"\n    /* "],[1,"\n    STEP 1:\n    "],[0,"CREATE C"]],"start1":4427,"start2":4427,"length1":16,"length2":33},{"diffs":[[0,";\n    \n    \n"],[1,"    \n"],[0,"    // check"]],"start1":5115,"start2":5115,"length1":24,"length2":29}]],"length":7144,"saved":false}
{"ts":1364244363538,"patch":[[{"diffs":[[0,"   STEP "],[-1,"1"],[1,"2"],[0,":\n    CR"]],"start1":4437,"start2":4437,"length1":17,"length2":17}]],"length":7144,"saved":false}
{"ts":1364245591116,"patch":[[{"diffs":[[0,"   C"],[-1,"REATE CHORDS OF ALL POSSIBLE COMBINATIONS"],[1,"reate chords of all possible combinations \n   "],[0," */\n"]],"start1":4449,"start2":4449,"length1":49,"length2":54},{"diffs":[[0,"gth );\n    \n"],[1,"    /*\n    STEP 3:\n    filter out the chords that don't have all notes\n    */\n    \n    /\n"],[0,"    \n    \n  "]],"start1":5115,"start2":5115,"length1":24,"length2":113}]],"length":7238,"saved":false}
{"ts":1364245634088,"patch":[[{"diffs":[[0,"  \n    /"],[1,"*\n    STEP 4:\n    filter out the chords where the fingers are too far from each other\n    */"],[0,"\n    \n  "]],"start1":5207,"start2":5207,"length1":16,"length2":108}]],"length":7330,"saved":false}
{"ts":1364246349666,"patch":[[{"diffs":[[0,"ll notes\n    */\n"],[1,"    var matches = _(matches).filter(function(match){\n        \n        // make a copy for reference\n        var remainingNotes = chord.relNotes.slice();\n        \n        // loop through all notes of the match\n        _(match).each(function( note ){\n            _(remainingNotes).without( note.relPos() );\n        });\n        \n        return remainingNotes.length == 0;\n    });\n    \n    console.log(\"# of matches\");\n    console.log( matches.length );\n"],[0,"    \n    /*\n    "]],"start1":5189,"start2":5189,"length1":32,"length2":481}]],"length":7779,"saved":false}
{"ts":1364246473999,"patch":[[{"diffs":[[0,"lice();\n"],[-1,"        \n"],[0,"        "]],"start1":5349,"start2":5349,"length1":25,"length2":16},{"diffs":[[0,"    "],[-1,"_(match).each(function( note ){\n            _(remainingNotes).without( note.relPos() );\n        });"],[1,"\n        // a match is an array with length strings\n        // each item a guitarNote\n        _(match)."],[0,"\n   "]],"start1":5408,"start2":5408,"length1":107,"length2":111}]],"length":7774,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364247586792,"patch":[[{"diffs":[[0,"ray "],[-1,"with "],[1,"("],[0,"length "],[1,"= # of "],[0,"strings"],[1,")"],[0,"\n   "]],"start1":5440,"start2":5440,"length1":27,"length2":31},{"diffs":[[0,"    "],[-1,"_(match)."],[0,"\n   "]],"start1":5506,"start2":5506,"length1":17,"length2":8},{"diffs":[[0,"       \n        "],[1,"// get an array of relative positions\n        var relNotes = _(match).map(function(note){\n            return note.relPos();\n            \n        });\n        //console.log(\"relnotes: \", relNotes);\n        //console.log( _(remainingNotes).difference(relNotes).length );"],[0,"\n        return "]],"start1":5503,"start2":5503,"length1":32,"length2":299},{"diffs":[[0," return "],[1,"_("],[0,"remainin"]],"start1":5794,"start2":5794,"length1":16,"length2":18},{"diffs":[[0,"_(remainingNotes"],[1,").difference(relNotes)"],[0,".length == 0;\n  "]],"start1":5802,"start2":5802,"length1":32,"length2":54},{"diffs":[[0,"ch other\n    */\n"],[1,"    var matches = _(matches).filter(function(match){\n        \n        var lowestFret = guitar.FRETS_SHOWN;\n        var highestFret = -1;\n        \n        var relNotes = _(match).map(function(note){\n            \n        };\n    });\n"],[0,"    \n    \n    //"]],"start1":6022,"start2":6022,"length1":32,"length2":262}]],"length":8290,"saved":false}
{"ts":1364247621355,"patch":[[{"diffs":[[0,"   console.log(\""],[1,"STEP 2 - "],[0,"# of matches\");\n"]],"start1":5055,"start2":5055,"length1":32,"length2":41},{"diffs":[[0,"le.log(\""],[1,"STEP 3 - "],[0,"# of mat"]],"start1":5885,"start2":5885,"length1":16,"length2":25},{"diffs":[[0,"   });\n    \n"],[1,"    console.log(\"STEP 4 - # of matches\");\n    console.log( matches.length );\n"],[0,"    \n    // "]],"start1":6279,"start2":6279,"length1":24,"length2":101}]],"length":8385,"saved":false}
{"ts":1364247692031,"patch":[[{"diffs":[[0," = -1;\n        \n"],[1,"        var fretNrs = _(match).map(function(note){\n            return note.fret();\n        };\n        \n"],[0,"        var relN"]],"start1":6186,"start2":6186,"length1":32,"length2":135}]],"length":8488,"saved":false}
{"ts":1364248235516,"patch":[[{"diffs":[[0,"    };\n        \n"],[1,"        var lowestFret = _(fretNrs).min();\n        var highestFret = _(fretNrs).max();\n        \n"],[0,"        var relN"]],"start1":6289,"start2":6289,"length1":32,"length2":128}]],"length":8584,"saved":false}
{"ts":1364248328533,"patch":[[{"diffs":[[0,"   \n"],[-1,"        var lowestFret = guitar.FRETS_SHOWN;\n        var highestFret = -1;\n"],[0,"    "]],"start1":6114,"start2":6114,"length1":83,"length2":8},{"diffs":[[0,"max();\n        \n"],[1,"        if( Math.abs(lowestFret - highestFret) > GuitarChord.MAX_STRETCH ){\n            // we \n        }\n        \n"],[0,"        var relN"]],"start1":6310,"start2":6310,"length1":32,"length2":146}]],"length":8623,"saved":false}
{"ts":1364248338437,"patch":[[{"diffs":[[0,"ret();\n        }"],[1,")"],[0,";\n        \n     "]],"start1":6203,"start2":6203,"length1":32,"length2":33}]],"length":8624,"saved":false}
{"ts":1364248342766,"patch":[[{"diffs":[[0,"  \n        }"],[1,")"],[0,";\n    });\n  "]],"start1":6503,"start2":6503,"length1":24,"length2":25}]],"length":8625,"saved":false}
{"ts":1364248386006,"patch":[[{"diffs":[[0,"  // we "],[1,"remove all matches where the notes are too far apart\n            return false;"],[0,"\n       "]],"start1":6413,"start2":6413,"length1":16,"length2":94},{"diffs":[[0,"   \n        });\n"],[1,"        \n        return true;\n"],[0,"    });\n    \n   "]],"start1":6580,"start2":6580,"length1":32,"length2":62}]],"length":8733,"saved":false}
{"ts":1364249095091,"patch":[[{"diffs":[[0,"max();\n        \n"],[1,"        // we remove all matches where the notes are too far apart\n"],[0,"        if( Math"]],"start1":6311,"start2":6311,"length1":32,"length2":99},{"diffs":[[0," ){\n            "],[-1,"// we"],[1,"return false;\n        }\n        \n        // now"],[0," remove all matc"]],"start1":6466,"start2":6466,"length1":37,"length2":79},{"diffs":[[0,"tches where the "],[-1,"note"],[1,"finger"],[0,"s are too far ap"]],"start1":6543,"start2":6543,"length1":36,"length2":38},{"diffs":[[0,"re too far apart"],[1," from"],[0,"\n            ret"]],"start1":6568,"start2":6568,"length1":32,"length2":37},{"diffs":[[0,"    "],[-1,"    return false;\n        }\n        \n        var relNotes = _(match).map(function(note"],[1,"// note to note\n        for( var i = 0; i < match.length; i++ "],[0,"){\n "]],"start1":6594,"start2":6594,"length1":94,"length2":70},{"diffs":[[0,"      \n        }"],[-1,");"],[0,""],[1,""],[0,"\n        \n      "]],"start1":6669,"start2":6669,"length1":34,"length2":32}]],"length":8823,"saved":false}
{"ts":1364249106132,"patch":[[{"diffs":[[0,"var i = "],[-1,"0"],[1,"1"],[0,"; i < ma"]],"start1":6627,"start2":6627,"length1":17,"length2":17}]],"length":8823,"saved":false}
{"ts":1364249538087,"patch":[[{"diffs":[[0,"rd.MAX_STRETCH )"],[-1,"{"],[0,"\n            ret"]],"start1":6452,"start2":6452,"length1":33,"length2":32},{"diffs":[[0," false;\n        "],[-1,"}"],[0,"\n        \n      "]],"start1":6487,"start2":6487,"length1":33,"length2":32},{"diffs":[[0," ){\n            "],[1,"if( Math.abs(match[i].fret() - match[i-1].fret()) > GuitarChord.MAX_STRETCH )\n                return false;"],[0,"\n        }\n     "]],"start1":6657,"start2":6657,"length1":32,"length2":139}]],"length":8928,"saved":false}
{"ts":1364249550391,"patch":[[{"diffs":[[0,"art from"],[1," each other"],[0,"\n       "]],"start1":6579,"start2":6579,"length1":16,"length2":27}]],"length":8939,"saved":false}
{"ts":1364249672066,"patch":[[{"diffs":[[0,"ote.fret"],[1,"Pos"],[0,"();\n    "]],"start1":6198,"start2":6198,"length1":16,"length2":19},{"diffs":[[0,"[i].fret"],[1,"Pos"],[0,"() - mat"]],"start1":6705,"start2":6705,"length1":16,"length2":19},{"diffs":[[0,"-1].fret"],[1,"Pos"],[0,"()) > Gu"]],"start1":6728,"start2":6728,"length1":16,"length2":19}]],"length":8948,"saved":false}
{"ts":1364249989268,"patch":[[{"diffs":[[0,"to note\n        "],[1,"/*"],[0,"for( var i = 1; "]],"start1":6618,"start2":6618,"length1":32,"length2":34},{"diffs":[[0,"false;\n        }"],[1,"*/"],[0,"\n        \n      "]],"start1":6796,"start2":6796,"length1":32,"length2":34}]],"length":8952,"saved":false}
{"ts":1364250058717,"patch":[[{"diffs":[[0,"   }*/\n        \n"],[1,"        console.log(\"match \", fretNrs );\n"],[0,"        return t"]],"start1":6808,"start2":6808,"length1":32,"length2":73},{"diffs":[[0,"gth );\n    \n"],[1,"    \n"],[0,"    // check"]],"start1":6969,"start2":6969,"length1":24,"length2":29}]],"length":8998,"saved":false}
{"ts":1364250259452,"patch":[[{"diffs":[[0,"RETCH = "],[-1,"4"],[1,"3"],[0,";\n\n\n/**\n"]],"start1":1358,"start2":1358,"length1":17,"length2":17}]],"length":8998,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364250628198,"patch":[[{"diffs":[[0,"et\n    \n    "],[1,"//"],[0,"var baseStri"]],"start1":2106,"start2":2106,"length1":24,"length2":26},{"diffs":[[0,"ase."],[-1,"pos[0]"],[1,"stringPos()"],[0,";\n    "],[1,"//"],[0,"var "]],"start1":2138,"start2":2138,"length1":20,"length2":27},{"diffs":[[0,"ase."],[-1,"pos[1]"],[1,"fretPos()"],[0,";\n  "]],"start1":2177,"start2":2177,"length1":14,"length2":17},{"diffs":[[0,";\n        }\n"],[1,"        \n        foundNotes.push()\n"],[0,"    \n       "]],"start1":2755,"start2":2755,"length1":24,"length2":59}]],"length":9045,"saved":false}
{"ts":1364250746443,"patch":[[{"diffs":[[0,"et\n    \n    "],[-1,"//"],[0,"var baseStri"]],"start1":2106,"start2":2106,"length1":26,"length2":24},{"diffs":[[0,"gPos();\n    "],[-1,"//"],[0,"var baseFret"]],"start1":2145,"start2":2145,"length1":26,"length2":24},{"diffs":[[0,"TEP "],[-1,"1: "],[1,"0:"],[0,"\n    "],[-1,"create a list for each fret of possibl"],[1,"filter out situations where not even all th"],[0,"e notes "],[-1,"with"],[0,"in the "],[-1,"MAX_STRETCH\n    */\n    var lookup = function( chordNotes, baseString, foundNotes){\n        \n    "],[1,"chord would fit\n    on the selected strings\n    */\n"],[0,"    "]],"start1":2404,"start2":2404,"length1":169,"length2":124},{"diffs":[[0,"ength){\n        "],[-1,"   "],[-1," "],[0,"//console.warn( "]],"start1":2572,"start2":2572,"length1":36,"length2":32},{"diffs":[[0,"    "],[-1,"    "],[0,"return;"],[1,"\n    }\n    \n    /*\n    STEP 1: \n    create a list for each fret of possible notes within the MAX_STRETCH"],[0,"\n    "],[1,"*/\n"],[0,"    "],[-1,"}"],[0,"\n    "],[-1,"    \n    "],[1,"// push the base note on the return array  \n"],[0,"    "]],"start1":2688,"start2":2688,"length1":43,"length2":180},{"diffs":[[0,"es.push("],[1," base "],[0,")\n    \n "]],"start1":2876,"start2":2876,"length1":16,"length2":22}]],"length":9135,"saved":false}
