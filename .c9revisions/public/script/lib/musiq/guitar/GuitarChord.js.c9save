{"ts":1360855315372,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360855557552,"patch":[[{"diffs":[[1,"/**\n * GuitarChord - a class for representing a guitar chord\n * \n * @param chord : a Chord object\n * @param notes : a collection of GuitarNote objects\n */\n\nvar GuitarChord = function( chord, notes ){\n    this.chord = chord;\n    \n    this.notes = notes;\n    \n};"]],"start1":0,"start2":0,"length1":0,"length2":260}]],"length":260,"saved":false}
{"ts":1360857307419,"patch":[[{"diffs":[[0,"\n    \n};"],[1,"\n\n/**\n * check if a guitar chord is valid\n * this is when all notes can be matched\n * with a note in the chord object.\n * \n * @returns true : if the chord is valid\n */\nGuitarChord.prototype.valid = function(){\n    \n};"]],"start1":252,"start2":252,"length1":8,"length2":225}]],"length":477,"saved":false}
{"ts":1360857982458,"patch":[[{"diffs":[[0,"object.\n * \n"],[1," * \n * \n"],[0," * @returns "]],"start1":371,"start2":371,"length1":24,"length2":32}]],"length":485,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360896378835,"patch":[[{"diffs":[[0,"   \n};\n\n"],[1,"GuitarChord.fromNotationAndTonic( notation, tonic ){\n    \n}\n\n"],[0,"/**\n * c"]],"start1":254,"start2":254,"length1":16,"length2":77}]],"length":546,"saved":false}
{"ts":1360896473947,"patch":[[{"diffs":[[0,"   \n"],[-1,"};\n"],[1,"    \n};\n\n/**\n * finds all variations of a particular chord with a specific\n * tonic. All these "],[0,"\nGui"]],"start1":254,"start2":254,"length1":11,"length2":103}]],"length":638,"saved":false}
{"ts":1360896662236,"patch":[[{"diffs":[[0,"ction(){\n    \n};"],[1,"\n\n/**\n * barre - returns an integer representing how\n * many fingers can be played barre.\n */\nGuitarChord.prototype.barre = function(){\n    // check highest strings and recurse down, adding as we go\n    var same = _(this.notes).pluck('fret').\n    \n}"]],"start1":622,"start2":622,"length1":16,"length2":265}]],"length":887,"saved":false}
{"ts":1360896817893,"patch":[[{"diffs":[[0,"r same ="],[1," 0;\n    var lastFret = \n   "],[0," _(this."]],"start1":843,"start2":843,"length1":16,"length2":43},{"diffs":[[0,"'fret')."],[1,"reverse().each(function(item){\n        \n        if( item == lastFret ) same++;\n    });\n    \n    console.log(same);\n    re"],[0,"\n    \n}"]],"start1":899,"start2":899,"length1":15,"length2":136}]],"length":1035,"saved":false}
{"ts":1360896824255,"patch":[[{"diffs":[[0," barre.\n"],[1," * \n * TODO: test\n"],[0," */\nGuit"]],"start1":720,"start2":720,"length1":16,"length2":34},{"diffs":[[0,";\n    re"],[1,"turn same;"],[0,"\n    \n}"]],"start1":1038,"start2":1038,"length1":15,"length2":25}]],"length":1063,"saved":false}
{"ts":1360896847304,"patch":[[{"diffs":[[0," chord;\n"],[-1,"    \n"],[0,"    this"]],"start1":216,"start2":216,"length1":21,"length2":16},{"diffs":[[0,"es;\n"],[-1,"    \n    \n"],[0,"};\n\n"]],"start1":244,"start2":244,"length1":18,"length2":8},{"diffs":[[0," these \n"],[1," */\n"],[0,"GuitarCh"]],"start1":331,"start2":331,"length1":16,"length2":20},{"diffs":[[0,"AndTonic"],[1," = function"],[0,"( notati"]],"start1":367,"start2":367,"length1":16,"length2":27}]],"length":1063,"saved":false}
{"ts":1360897062796,"patch":[[{"diffs":[[0," \n *"],[-1,"/\nGuitarChord.fromNotation"],[1," \n * @param guitar : the guitar object (with specific tuning)\n * @param chord : the Chord object to find specific GuitarChords for\n * @param tonic : the Tonic we want to base the chord on\n * \n * @returns an array of GuitarChord objects\n */\nGuitarChord.fromChord"],[0,"AndT"]],"start1":337,"start2":337,"length1":34,"length2":269},{"diffs":[[0,"on( "],[-1,"notation"],[1,"guitar, chord"],[0,", to"]],"start1":619,"start2":619,"length1":16,"length2":21}]],"length":1303,"saved":false}
{"ts":1360897189267,"patch":[[{"diffs":[[0,"hord on\n"],[1," * @param options : an object specifying more options:\n *                  {\n *                      upPreference: false\n *                      maxFingerStretch: 2\n *                      maxDifficulty: 10 \n *                  }\n"],[0," * \n * @"]],"start1":521,"start2":521,"length1":16,"length2":246},{"diffs":[[0,"{\n    \n}"],[1,";"],[0,"\n\n/**\n *"]],"start1":875,"start2":875,"length1":16,"length2":17}]],"length":1534,"saved":false}
{"ts":1360897289453,"patch":[[{"diffs":[[0,"onic ){\n    "],[1,"// from the tonic, walk up the neck, fret by fret\n    \n    // increase the difficulty\n    \n    // set finger stretch\n    \n    // check if we have found all the notes\n    \n    // can we calculate this recursively"],[0,"\n};\n\n/**\n * "]],"start1":869,"start2":869,"length1":24,"length2":235}]],"length":1745,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360898167396,"patch":[[{"diffs":[[0,"m){\n"],[-1,"        \n"],[0,"    "]],"start1":1634,"start2":1634,"length1":17,"length2":8}]],"length":1736,"saved":false}
