{"ts":1360890905400,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/** \n * the guitar note data object\n * @param guitar : a Guitar object this note belongs to\n * @param guitarString : a GuitarString object this note belongs to\n * @param fret : the GuitarFret this note belongs to\n * @param pos : the position as in [ string, fret ]\n * \n * @param state : an object representing the state of the note:\n *                      {   active: false,\n *                          ghosted: false,\n *                          tonic: false\n *                      }\n */\nvar GuitarNote = function( guitar, guitarString, fret, pos, state ){\n\n    this.guitar = guitar;\n    this.guitarString = guitarString;\n    this.fret = fret;\n    this.pos = pos;\n    \n    //console.log( this.pos );\n    \n    this.state = state || _.clone( GuitarNote.DEFAULT_STATE );\n    \n    /**\n     * create a Note object for easy access\n     */\n    this.note = new Note( guitarString.base + fret.pos );\n\n    //console.log( this.note );\n};\n\n/**\n * the default state of the guitar note. \n * when you use this, make sure to MAKE A COPY!\n */\nGuitarNote.DEFAULT_STATE = { active: false, ghosted: false, tonic: false };\n\nGuitarNote.prototype.notation = function(){\n    return this.note.notation();\n};\n\nGuitarNote.prototype.short = \nGuitarNote.prototype.simple = function(){\n    return this.note.simpleNotation();\n};\n\n\n/**\n * sets or gets the active state. \n * @returns true if the state is active\n */\nGuitarNote.prototype.active = function( value ){\n    if( typeof value != 'undefined'){\n        this.state.active = value;\n        return this.state.active;\n    } else {\n        return this.state.active;\n    }\n};\n\n/**\n * sets or gets the tonic state. \n * @returns true if the state is tonic\n */\nGuitarNote.prototype.tonic = function( value ){\n    if( typeof value != 'undefined'){\n        this.state.tonic = value;\n        return this.state.tonic;\n    } else {\n        return this.state.tonic;\n    }\n};\n\n/**\n * sets or gets the active state. \n * @returns true if the state is active\n */\nGuitarNote.prototype.ghosted = function( value ){\n    if( typeof value != 'undefined'){\n        this.state.ghosted = value;\n        return this.state.ghosted;\n    } else {\n        return this.state.ghosted;\n    }\n};\n\n/**\n * sets this note as the only active note on the string\n */\nGuitarNote.prototype.onlyActive = function( value ){\n    return this.guitarString.onlyActive( this.pos[1], value );\n}\n\n/**\n * get a string representation of the class\n */\nGuitarNote.prototype.class = function(){\n   var ret = [];\n   if( this.state.active ) ret.push('active');\n   if( this.state.ghosted ) ret.push('ghosted');\n   if( this.state.tonic ) ret.push('tonic');\n   return ret.join(' ');\n};\n\n/**\n * get the int note position\n */\nGuitarNote.prototype.notePos = function(){\n    return this.note.pos;\n}\n\n/**\n * get the relative note position\n */\nGuitarNote.prototype.relativeNotePos = function(){\n    return this.note.toRelative().pos;\n}\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2896}]],"length":2896}
{"contributors":[],"silentsave":false,"ts":1360904110991,"patch":[[{"diffs":[[0,"n(' ');\n};\n\n"],[1,"/**\n * the interval to the tonic\n * \n * @returns an Interval object relative to the tonic\n */\nGuitarNote.prototype.intervalToTonic( tonic ){\n    this.note.interval( tonic );\n}\n\n"],[0,"/**\n * get t"]],"start1":2640,"start2":2640,"length1":24,"length2":201}]],"length":3073,"saved":false}
{"ts":1360904216959,"patch":[[{"diffs":[[0,"onic');\n"],[1,"   \n   // add the interval to the tonic as well\n   \n"],[0,"   retur"]],"start1":2615,"start2":2615,"length1":16,"length2":68}]],"length":3125,"saved":false}
{"ts":1360904361057,"patch":[[{"diffs":[[0," = function("],[1," tonic "],[0,"){\n   var re"]],"start1":2450,"start2":2450,"length1":24,"length2":31},{"diffs":[[0,"as well\n"],[1,"   if( tonic ) ret.push(this.intervalToTonic(tonic));\n"],[0,"   \n   r"]],"start1":2670,"start2":2670,"length1":16,"length2":70}]],"length":3186,"saved":false}
{"ts":1360904766362,"patch":[[{"diffs":[[0,"onic ){\n    "],[1,"return "],[0,"this.note.in"]],"start1":2898,"start2":2898,"length1":24,"length2":31}]],"length":3193,"saved":false}
{"ts":1360904773798,"patch":[[{"diffs":[[0,"lToTonic"],[1," = function"],[0,"( tonic "]],"start1":2887,"start2":2887,"length1":16,"length2":27}]],"length":3204,"saved":false}
{"ts":1360904872698,"patch":[[{"diffs":[[0,"c(tonic)"],[1,".name()"],[0,");\n   \n "]],"start1":2721,"start2":2721,"length1":16,"length2":23}]],"length":3211,"saved":false}
{"ts":1360927149926,"patch":[[{"diffs":[[0,").name()"],[1,".replace(\" \",\"-\")"],[0,");\n   \n "]],"start1":2728,"start2":2728,"length1":16,"length2":33}]],"length":3228,"saved":false}
{"ts":1360929141776,"patch":[[{"diffs":[[0,"return t"],[-1,"his.note"],[1,"onic"],[0,".interva"]],"start1":2945,"start2":2945,"length1":24,"length2":20},{"diffs":[[0,"erval( t"],[-1,"onic"],[1,"his.note"],[0," );\n}\n\n/"]],"start1":2961,"start2":2961,"length1":20,"length2":24}]],"length":3228,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360932992196,"patch":[[{"diffs":[[0,"n( tonic ){\n"],[1,"    if( tonic )\n    "],[0,"    return t"]],"start1":2929,"start2":2929,"length1":24,"length2":44}]],"length":3248,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361065896629,"patch":[[{"diffs":[[0,"ative().pos;\n}\n\n"],[1,"/**\n * get the 'distance' of a fret to another note on the fretboard\n * returns an array [ strings, frets ]\n */\nGuitarNote.prototype.distanceTo( otherNote ){\n    return [ Math.abs( otherNote.pos[0] - this.pos[0]), Math.abs( otherNote.pos[1] - this.pos[1]) ];\n}\n"]],"start1":3232,"start2":3232,"length1":16,"length2":277}]],"length":3509,"saved":false}
{"ts":1361065945698,"patch":[[{"diffs":[[0,"return ["],[-1," Math.abs("],[0," otherNo"]],"start1":3410,"start2":3410,"length1":26,"length2":16},{"diffs":[[0,"s[0]"],[-1,")"],[0,","],[-1," Math.abs("],[0," oth"]],"start1":3445,"start2":3445,"length1":20,"length2":9},{"diffs":[[0,"s.pos[1]"],[-1,")"],[0," ];\n}\n"]],"start1":3473,"start2":3473,"length1":15,"length2":14}]],"length":3487,"saved":false}
{"ts":1361066960642,"patch":[[{"diffs":[[0,"te position\n */\n"],[1,"GuitarNote.prototype.relPos =\n"],[0,"GuitarNote.proto"]],"start1":3139,"start2":3139,"length1":32,"length2":62}]],"length":3517,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361069332001,"patch":[[{"diffs":[[0,"stanceTo"],[1," = function"],[0,"( otherN"]],"start1":3413,"start2":3413,"length1":16,"length2":27}]],"length":3528,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361321153264,"patch":[[{"diffs":[[0,"mple = function("],[1," signature "],[0,"){\n    return th"]],"start1":1240,"start2":1240,"length1":32,"length2":43},{"diffs":[[0,"pleNotation("],[1," signature "],[0,");\n};\n\n\n/**\n"]],"start1":1294,"start2":1294,"length1":24,"length2":35}]],"length":3550,"saved":false}
