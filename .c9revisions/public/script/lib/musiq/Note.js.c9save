{"ts":1360857437880,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * the MUSIQ.js Note object\n * \n * @param pos : the midi position of the note\n * @param relative : a boolean, true if the note is relative (it doesn't have\n *                   an octave). if relative is true, pos should not be larger\n *                   than 12\n */\nvar Note = function( pos, relative ){\n    this.pos = pos;\n    this.relative = relative || false;\n    \n    // if the note is relative, decrease the position to fall inbetween\n    // 0 <= pos < 12\n    if( this.relative ){\n        this.pos = this.pos % 12;\n    }\n};\n\n\n /**\n  * get a new note object from the notation\n    @param : notation in the form C4, Bb6 etc\n             where the number is the octave\n             this should also match lowerCase notations\n */\nNote.fromNotation = function( notation ){\n     \n    var ret;\n    // split the notation\n    \n    var items = notation.split(/(\\d+)/);\n    \n    if( items.length > 3 ){\n        // more than one note, return \n        console.log(\"more than one note!\");\n        console.log(items);\n        \n    } else {\n        // convert octave to integer, defaulting on 0 (if parsing fails)\n        var octave = ( +items[1] || 0);\n        // make relative or not\n        var relative = octave < 1;\n        \n        console.log(\" Note \" + notation + \" octave = \" + octave + \", relative = \" + relative);\n        \n        // just one note\n        //console.log(items);\n        \n        // get note position \n        var nn = items[0][0].toUpperCase();\n        var npos = MUSIQ.notePositions[ MUSIQ.noteNames.indexOf( nn ) ];\n        \n        // get accidental position\n        var accString = items[0].substring(1);\n        var acc = MUSIQ.accidentals.indexOf( accString ) - 3;\n        \n        // error case\n        if( acc < -3 || typeof npos == 'undefined' || npos < 0 ){\n            // sorry, nothing we can do\n            console.log(\"ERROR: note not found (\" + notation + \")\");\n            console.assert(false); // break\n            return;\n        }\n        \n        // build the note together with the octave\n        ret = new Note( npos + acc + octave * 12, relative );\n        \n    }\n    \n    //console.log( ret );\n    \n    return ret;\n        \n};\n\n\n\n\n/**\n * the distance (in semitones) to another note\n * this is the number notation of the interval\n */\nNote.distance = function( note1, note2 ){\n  return note2.pos - note1.pos;  \n};\n\n/**\n * returns the relative distance from note1 to note2\n */\nNote.relativeDistance = function( note1, note2){\n  var rel = note2.toRelative().pos - note1.toRelative().pos;\n  return ( rel < 0 ) ? rel + 12 : rel;\n};\n\n/**\n * returns the shortest distance from note1 to note2\n */\nNote.shortestDistance = function( note1, note2 ){\n    return 0;\n};\n\n/**\n * returns the shortest relative distance\n */\nNote.shortestRelativeDistance = function( note1, note2 ){\n    return 0;\n}; \n\n\n/**\n * the interval between the notes\n */\nNote.interval = function( note1, note2 ){\n    return new Interval( Note.distance(note1, note2) );\n};\n\nNote.signature = function( note ){\n    return MUSIQ.signatures[note.toRelative().pos];\n};\n\nNote.cofPosition = function( note ){\n    return MUSIQ.cofPositions[note.toRelative().pos];\n};\n\n/**\n * get the proper notation for a note\n */\nNote.notation = function( note, flat ){\n    // check flat\n    if( flat ){\n        return MUSIQ.flatNames[note.toRelative().pos] + note.octave();\n    } else {\n        return MUSIQ.sharpNames[note.toRelative().pos] + note.octave();\n    }\n};\n\n/**\n * get a simple notation for a note, i.e. C#\n */\nNote.simpleNotation = function( note, flat ){\n   \n   n = note;\n   if( !(note instanceof Note) ) n = new Note(note);\n   \n   if( flat ){\n        return MUSIQ.flatNames[n.toRelative().pos];\n    } else {\n        return MUSIQ.sharpNames[n.toRelative().pos];\n    } \n};\n\n/**\n * transpose a note with an interval\n */\nNote.transpose = function( note, interval ){\n    // check if it's an interval object\n    if( _.isNumber( interval ) ){\n        return new Note(note.pos + interval);\n    } else if(_.isString( interval )) {\n        return new Note(note.pos + Interval.fromName(interval).distance);\n    } else {\n        // let's hope it's an interval object\n        return new Note(note.pos + interval.distance);\n    }\n};\n\n/**\n * class methods\n */\nNote.prototype.distance = function( note ){\n    return Note.distance( this, note );\n};\n\nNote.prototype.relativeDistance = function( note ){\n    return Note.relativeDistance( this, note);\n};\n\nNote.prototype.shortestDistance = function( note ){\n    return Note.shortestDistance( this, note);\n};\n\nNote.prototype.interval = function( note ){\n    return Note.interval( this, note);\n};\n\nNote.prototype.signature = function() {\n    return Note.signature( this );\n};\n\nNote.prototype.cofPosition = function() {\n    return Note.cofPosition( this );\n};\n\nNote.prototype.notation = function(flat) {\n    return Note.notation(this, flat);\n};\n\nNote.prototype.simpleNotation = function(flat){\n    return Note.simpleNotation(this, flat);\n};\n\n/**\n * the octave the note is in\n */\nNote.prototype.octave = function( ){\n    return Math.floor(this.pos/12) || 0;\n};\n\n/**\n * convert the note to a relative position\n */\nNote.prototype.toRelative = function( ){\n    return new Note(this.pos - this.octave()*12);\n};\n\n/**\n * transpose a note\n */\n Note.prototype.transpose = function( interval ){\n     return Note.transpose( this, interval );\n };\n\n/**\n * returns the frequency (in Hz) of the note\n * in equal temperament\n * \n * use this for sound generation\n * \n * possible optimization: lookup table\n */\nNote.prototype.frequency = function(){\n    return 440 * Math.pow(2, (this.pos-69)/12 );\n};\n\n"]],"start1":0,"start2":0,"length1":0,"length2":5603}]],"length":5603}
{"contributors":[],"silentsave":false,"ts":1360865075123,"patch":[[{"diffs":[[0,"\");\n            "],[1,"//"],[0,"console.assert(f"]],"start1":1894,"start2":1894,"length1":32,"length2":34}]],"length":5605,"saved":false}
{"ts":1360865740032,"patch":[[{"diffs":[[0," or not\n"],[1,"        // the items[1] == \"0\" checks if we have the 0 character. if so, it's relative,\n        // but on the lowest octave\n"],[0,"        "]],"start1":1172,"start2":1172,"length1":16,"length2":140},{"diffs":[[0,"tave < 1"],[1," || items[1] == \"0\""],[0,";\n      "]],"start1":1329,"start2":1329,"length1":16,"length2":35}]],"length":5748,"saved":false}
{"ts":1360865764022,"patch":[[{"diffs":[[0,"|| items[1] "],[-1,"="],[1,"!"],[0,"= \"0\";\n     "]],"start1":1338,"start2":1338,"length1":25,"length2":25}]],"length":5748,"saved":false}
{"ts":1360865805720,"patch":[[{"diffs":[[0,"ave < 1 "],[-1,"||"],[1,"&&"],[0," items[1"]],"start1":1330,"start2":1330,"length1":18,"length2":18},{"diffs":[[0,"= \"0\";\n        \n"],[1,"        \n        \n"],[0,"        console."]],"start1":1351,"start2":1351,"length1":32,"length2":50}]],"length":5766,"saved":false}
{"ts":1360866006599,"patch":[[{"diffs":[[0,"    "],[-1,"// make relative or not\n        // the items[1] == \"0\" checks if we have the 0 character. if so, it's"],[1,"\n        // if no octave is specified\n        // but if a 0 is explicitly mentioned (like in C0)\n        // it's not a"],[0," rel"]],"start1":1152,"start2":1152,"length1":109,"length2":126},{"diffs":[[0,"relative"],[-1,","],[1," note"],[0,"\n       "]],"start1":1275,"start2":1275,"length1":17,"length2":21},{"diffs":[[0,"    "],[-1,"// but on the lowest octave"],[1,"\n        // "],[0,"\n   "]],"start1":1293,"start2":1293,"length1":35,"length2":20},{"diffs":[[0," < 1"],[-1," &&"],[1,";\n        if("],[0," ite"]],"start1":1339,"start2":1339,"length1":11,"length2":21},{"diffs":[[0,"[1] "],[-1,"!"],[1,"="],[0,"= \"0\""],[1," ) relative = false"],[0,";\n  "]],"start1":1362,"start2":1362,"length1":14,"length2":33}]],"length":5801,"saved":false}
{"ts":1360866019500,"patch":[[{"diffs":[[0,"   \n"],[-1,"        // \n"],[0,"    "]],"start1":1294,"start2":1294,"length1":20,"length2":8}]],"length":5789,"saved":false}
{"ts":1360867663343,"patch":[[{"diffs":[[0,"\");\n"],[-1,"            //console.assert(false); // break\n"],[0,"    "]],"start1":2078,"start2":2078,"length1":54,"length2":8}]],"length":5743,"saved":false}
{"ts":1360867667658,"patch":[[{"diffs":[[0,"console."],[-1,"log"],[1,"warn"],[0,"(\"ERROR:"]],"start1":2025,"start2":2025,"length1":19,"length2":20}]],"length":5744,"saved":false}
{"ts":1360867677769,"patch":[[{"diffs":[[0,"    "],[-1,"    \n    }\n    \n    //console.log( ret );"],[1,"}"],[0,"\n   "]],"start1":2235,"start2":2235,"length1":49,"length2":9}]],"length":5704,"saved":false}
{"ts":1360867696642,"patch":[[{"diffs":[[0,"       \n        "],[1,"//"],[0,"console.log(\" No"]],"start1":1400,"start2":1400,"length1":32,"length2":34}]],"length":5706,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360884463705,"patch":[[{"diffs":[[0,"       \n"],[-1,"        \n        \n"],[0,"        "]],"start1":1382,"start2":1382,"length1":34,"length2":16}]],"length":5688,"saved":false}
{"ts":1360886978309,"patch":[[{"diffs":[[0,"\n    } \n};\n\n"],[1,"/**\n * can this note have the following name?\n * \n * compensates for accidentals, i.e. \n */\n \n\n"],[0,"/**\n * trans"]],"start1":3836,"start2":3836,"length1":24,"length2":119}]],"length":5783,"saved":false}
{"ts":1360887003222,"patch":[[{"diffs":[[0,". \n */\n "],[1,"Note.hasName = function( name ){\n     \n }"],[0,"\n\n/**\n *"]],"start1":3933,"start2":3933,"length1":16,"length2":57}]],"length":5824,"saved":false}
{"ts":1360887194974,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"/**\n * can this note have the following name?\n * \n * compensates for accidentals, i.e. \n */\n Note.hasName = function( name ){\n     \n }"],[0,"\n\n/*"]],"start1":3844,"start2":3844,"length1":142,"length2":8}]],"length":5690,"saved":false}
{"ts":1360887376377,"patch":[[{"diffs":[[0," flat);\n};\n\n"],[1,"/**\n * can this note have the following name?\n * \n * compensates for accidentals, i.e. \n */\n Note.prototype.hasName = function( name ){\n     return this.pos == Note.fromNotation(name).pos;\n }\n\n"],[0,"/**\n * the o"]],"start1":5035,"start2":5035,"length1":24,"length2":217}]],"length":5883,"saved":false}
{"ts":1360887627158,"patch":[[{"diffs":[[0,"he notation\n"],[1,"    if( !notation) return;\n"],[0,"    \n    var"]],"start1":811,"start2":811,"length1":24,"length2":51}]],"length":5910,"saved":false}
{"ts":1360887629971,"patch":[[{"diffs":[[0,"notation"],[1," "],[0,") return"]],"start1":832,"start2":832,"length1":16,"length2":17}]],"length":5911,"saved":false}
{"ts":1360887747197,"patch":[[{"diffs":[[0,"  return"],[1," Note.fromNotation(name) &&"],[0," this.po"]],"start1":5214,"start2":5214,"length1":16,"length2":43}]],"length":5938,"saved":false}
{"ts":1360889861424,"patch":[[{"diffs":[[0," do\n            "],[1,"//"],[0,"console.warn(\"ER"]],"start1":2021,"start2":2021,"length1":32,"length2":34}]],"length":5940,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360899327855,"patch":[[{"diffs":[[0,"eturn;\n    \n"],[1,"    var matches = MUSIQ.isValidNote( name );\n    \n    //console.log( matches );\n    \n    // no chord found?\n    if( !matches ){\n        console.warn(\"Note not found : \" + name);\n        return;\n    }\n    \n    \n"],[0,"    var item"]],"start1":844,"start2":844,"length1":24,"length2":234}]],"length":6150,"saved":false}
{"ts":1360899342259,"patch":[[{"diffs":[[0,");\n    \n    "],[-1,"//"],[0,"console.log("]],"start1":898,"start2":898,"length1":26,"length2":24},{"diffs":[[0,"}\n    \n    \n"],[1,"    \n    \n"],[0,"    var item"]],"start1":1052,"start2":1052,"length1":24,"length2":34}]],"length":6158,"saved":false}
{"ts":1360899495498,"patch":[[{"diffs":[[0,"dNote( n"],[-1,"ame"],[1,"otation"],[0," );\n    "]],"start1":886,"start2":886,"length1":19,"length2":23},{"diffs":[[0,"ion );\n    \n"],[1,"    console.log( \"Note.fromNotation matches : \" + notation );\n"],[0,"    console."]],"start1":898,"start2":898,"length1":24,"length2":86}]],"length":6224,"saved":false}
{"ts":1360899563315,"patch":[[{"diffs":[[0,");\n    \n    "],[1,"//"],[0,"console.log("]],"start1":902,"start2":902,"length1":24,"length2":26},{"diffs":[[0,"tion );\n    "],[1,"//"],[0,"console.log("]],"start1":966,"start2":966,"length1":24,"length2":26}]],"length":6228,"saved":false}
{"ts":1360899731716,"patch":[[{"diffs":[[0," }\n    \n    "],[-1,"\n    \n    "],[1,"var note = matches[1];\n    var acc = matches[2];\n    var octave = matches[3];\n    \n    \n    \n    /*"],[0,"\n    var ite"]],"start1":1121,"start2":1121,"length1":34,"length2":123},{"diffs":[[0,"   \n    } else {"],[1,"*/"],[0,"\n        // conv"]],"start1":1423,"start2":1423,"length1":32,"length2":34},{"diffs":[[0,"tive );\n    "],[1,"//"],[0,"}\n    \n    r"]],"start1":2620,"start2":2620,"length1":24,"length2":26}]],"length":6321,"saved":false}
{"ts":1360899851861,"patch":[[{"diffs":[[0,"ls)\n        "],[-1,"var "],[0,"octave = ( +"]],"start1":1511,"start2":1511,"length1":28,"length2":24},{"diffs":[[0,"ve = ( +"],[-1,"items[1]"],[1,"octave"],[0," || 0);\n"]],"start1":1527,"start2":1527,"length1":24,"length2":22},{"diffs":[[0,"if( "],[-1,"items[1"],[1,"matches[3"],[0,"] =="]],"start1":1742,"start2":1742,"length1":15,"length2":17},{"diffs":[[0,"n = "],[-1,"items[0][0]"],[1,"note"],[0,".toU"]],"start1":2006,"start2":2006,"length1":19,"length2":12},{"diffs":[[0,"ion\n"],[-1,"        var accString = items[0].substring(1);\n"],[0,"    "]],"start1":2143,"start2":2143,"length1":55,"length2":8},{"diffs":[[0,"xOf( acc"],[-1,"String"],[0," ) - 3;\n"]],"start1":2187,"start2":2187,"length1":22,"length2":16}]],"length":6257,"saved":false}
{"ts":1360899972282,"patch":[[{"diffs":[[0,");\n    \n    "],[-1,"//"],[0,"console.log("]],"start1":902,"start2":902,"length1":26,"length2":24},{"diffs":[[0,"tion );\n    "],[-1,"//"],[0,"console.log("]],"start1":964,"start2":964,"length1":26,"length2":24}]],"length":6253,"saved":false}
{"ts":1360900056081,"patch":[[{"diffs":[[0,"n ) ];\n        \n"],[1,"        console.log( npos );\n        \n"],[0,"        // get a"]],"start1":2092,"start2":2092,"length1":32,"length2":70}]],"length":6291,"saved":false}
{"ts":1360900094752,"patch":[[{"diffs":[[0,"       \n        "],[-1,"//"],[0,"console.log(\" No"]],"start1":1781,"start2":1781,"length1":34,"length2":32}]],"length":6289,"saved":false}
{"ts":1360900147417,"patch":[[{"diffs":[[0," do\n            "],[-1,"//"],[0,"console.warn(\"ER"]],"start1":2368,"start2":2368,"length1":34,"length2":32}]],"length":6287,"saved":false}
{"ts":1360900173605,"patch":[[{"diffs":[[0,"relative"],[1," + \", acc = \" + acc"],[0,");\n     "]],"start1":1873,"start2":1873,"length1":16,"length2":35}]],"length":6306,"saved":false}
{"ts":1360900238160,"patch":[[{"diffs":[[0,"tches[2]"],[1," || \"\""],[0,";\n    va"]],"start1":1168,"start2":1168,"length1":16,"length2":22},{"diffs":[[0,"ar octave = "],[1,"+"],[0,"matches[3];\n"]],"start1":1189,"start2":1189,"length1":24,"length2":25},{"diffs":[[0,"tches[3]"],[1," || 0 "],[0,";\n    \n "]],"start1":1204,"start2":1204,"length1":16,"length2":22},{"diffs":[[0,"ls)\n"],[-1,"        octave = ( +octave || 0);\n"],[0,"    "]],"start1":1520,"start2":1520,"length1":42,"length2":8}]],"length":6285,"saved":false}
{"ts":1360902591546,"patch":[[{"diffs":[[0,"l );\n };"],[1,"\n \n Note.prototype.type = function(){\n    return \"Note\";\n}"],[0,"\n\n/**\n *"]],"start1":6026,"start2":6026,"length1":16,"length2":74}]],"length":6343,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360904820781,"patch":[[{"diffs":[[0,");\n    \n    "],[1,"//"],[0,"console.log("]],"start1":902,"start2":902,"length1":24,"length2":26},{"diffs":[[0,"tion );\n    "],[1,"//"],[0,"console.log("]],"start1":966,"start2":966,"length1":24,"length2":26},{"diffs":[[0,"       \n        "],[1,"//"],[0,"console.log(\" No"]],"start1":1764,"start2":1764,"length1":32,"length2":34},{"diffs":[[0,"       \n        "],[1,"//"],[0,"console.log( npo"]],"start1":2102,"start2":2102,"length1":32,"length2":34}]],"length":6351,"saved":false}
{"ts":1360927046760,"patch":[[{"diffs":[[0,"elative().pos] +"],[1," this.relative ?"],[0," note.octave();\n"]],"start1":3787,"start2":3787,"length1":32,"length2":48},{"diffs":[[0,"ote.octave()"],[1," : \"\""],[0,";\n    } else"]],"start1":3821,"start2":3821,"length1":24,"length2":29},{"diffs":[[0,").pos] +"],[1," this.relative ?"],[0," note.oc"]],"start1":3901,"start2":3901,"length1":16,"length2":32},{"diffs":[[0,"octave()"],[1," : \"\""],[0,";\n    }\n"]],"start1":3931,"start2":3931,"length1":16,"length2":21}]],"length":6393,"saved":false}
{"ts":1360928349307,"patch":[[{"diffs":[[0,"lative().pos] + "],[1,"("],[0,"this.relative ? "]],"start1":3788,"start2":3788,"length1":32,"length2":33},{"diffs":[[0,"ctave() : \"\""],[1,")"],[0,";\n    } else"]],"start1":3827,"start2":3827,"length1":24,"length2":25},{"diffs":[[0,".pos] + "],[1,"("],[0,"this.rel"]],"start1":3904,"start2":3904,"length1":16,"length2":17},{"diffs":[[0,"e() : \"\""],[1,")"],[0,";\n    }\n"]],"start1":3939,"start2":3939,"length1":16,"length2":17}]],"length":6397,"saved":false}
{"ts":1360928366601,"patch":[[{"diffs":[[0,"ative().pos] + ("],[-1,"this"],[1,"note"],[0,".relative ? note"]],"start1":3789,"start2":3789,"length1":36,"length2":36},{"diffs":[[0,"pos] + ("],[-1,"this"],[1,"note"],[0,".relativ"]],"start1":3905,"start2":3905,"length1":20,"length2":20}]],"length":6397,"saved":false}
{"ts":1360928391649,"patch":[[{"diffs":[[0,"ative().pos] + ("],[1,"!"],[0,"note.relative ? "]],"start1":3789,"start2":3789,"length1":32,"length2":33},{"diffs":[[0,"pos] + ("],[1,"!"],[0,"note.rel"]],"start1":3906,"start2":3906,"length1":16,"length2":17}]],"length":6399,"saved":false}
{"ts":1360930822771,"patch":[[{"diffs":[[0,"   \n};\n\n"],[1,"/**\n * make a note object from a position\n */\nNote.fromPos( pos ){\n    return new Note( pos );\n}"],[0,"\n\n\n/**\n "]],"start1":2634,"start2":2634,"length1":16,"length2":112},{"diffs":[[0,").pos];\n};\n\n"],[1,"\n\n"],[0,"/**\n * get t"]],"start1":3712,"start2":3712,"length1":24,"length2":26}]],"length":6497,"saved":false}
{"ts":1360930827996,"patch":[[{"diffs":[[0,"pos );\n}"],[1,";"],[0,"\n\n\n/**\n "]],"start1":2730,"start2":2730,"length1":16,"length2":17}]],"length":6498,"saved":false}
{"ts":1360930833037,"patch":[[{"diffs":[[0,".fromPos"],[1," = function"],[0,"( pos ){"]],"start1":2692,"start2":2692,"length1":16,"length2":27}]],"length":6509,"saved":false}
{"ts":1360930871183,"patch":[[{"diffs":[[0," flat);\n};\n\n"],[1,"Note.prototype.simple = \n"],[0,"Note.prototy"]],"start1":5480,"start2":5480,"length1":24,"length2":49}]],"length":6534,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360948369859,"patch":[[{"diffs":[[0,"ion( pos ){\n"],[1,"    console.log( pos );\n"],[0,"    return n"]],"start1":2708,"start2":2708,"length1":24,"length2":48},{"diffs":[[0,"ck flat\n"],[1,"    var ret = \"\";\n    \n"],[0,"    if( "]],"start1":3858,"start2":3858,"length1":16,"length2":39},{"diffs":[[0,"t ){\n        ret"],[-1,"urn"],[1," ="],[0," MUSIQ.flatNames"]],"start1":3900,"start2":3900,"length1":35,"length2":34},{"diffs":[[0,"se {\n        ret"],[-1,"urn"],[1," ="],[0," MUSIQ.sharpName"]],"start1":4007,"start2":4007,"length1":35,"length2":34},{"diffs":[[0,"() : \"\");\n    }\n"],[1,"    \n    // experimental : replace b with ♭\n    return ret.replace(\"b\",\"♭\");\n    \n"],[0,"};\n\n/**\n * get a"]],"start1":4097,"start2":4097,"length1":32,"length2":114}]],"length":6661,"saved":false}
{"ts":1360948419357,"patch":[[{"diffs":[[0,"\"b\",\"♭\")"],[1,".replace(\"#\",\"♯\")"],[0,";\n    \n}"]],"start1":4180,"start2":4180,"length1":16,"length2":33}]],"length":6678,"saved":false}
{"ts":1360948425472,"patch":[[{"diffs":[[0,"b with ♭"],[1," and # with ♯"],[0,"\n    ret"]],"start1":4148,"start2":4148,"length1":16,"length2":29}]],"length":6691,"saved":false}
{"ts":1360948438394,"patch":[[{"diffs":[[0," with ♯\n"],[1,"    // should probably check for unicode support?\n"],[0,"    retu"]],"start1":4162,"start2":4162,"length1":16,"length2":66}]],"length":6741,"saved":false}
{"ts":1360948511079,"patch":[[{"diffs":[[0,"= note;\n"],[1,"   var ret;\n   \n"],[0,"   if( !"]],"start1":4387,"start2":4387,"length1":16,"length2":32},{"diffs":[[0,"\n        ret"],[-1,"urn"],[1," ="],[0," MUSIQ.flatN"]],"start1":4482,"start2":4482,"length1":27,"length2":26},{"diffs":[[0,"\n        ret"],[-1,"urn"],[1," ="],[0," MUSIQ.sharp"]],"start1":4546,"start2":4546,"length1":27,"length2":26},{"diffs":[[0,"\n    } \n"],[1,"    \n    // experimental : replace b with ♭ and # with ♯\n    // should probably check for unicode support?\n    return ret.replace(\"b\",\"♭\").replace(\"#\",\"♯\");\n"],[0,"};\n\n\n\n/*"]],"start1":4598,"start2":4598,"length1":16,"length2":173}]],"length":6912,"saved":false}
