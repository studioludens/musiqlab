{"ts":1360857437880,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * the MUSIQ.js Note object\n * \n * @param pos : the midi position of the note\n * @param relative : a boolean, true if the note is relative (it doesn't have\n *                   an octave). if relative is true, pos should not be larger\n *                   than 12\n */\nvar Note = function( pos, relative ){\n    this.pos = pos;\n    this.relative = relative || false;\n    \n    // if the note is relative, decrease the position to fall inbetween\n    // 0 <= pos < 12\n    if( this.relative ){\n        this.pos = this.pos % 12;\n    }\n};\n\n\n /**\n  * get a new note object from the notation\n    @param : notation in the form C4, Bb6 etc\n             where the number is the octave\n             this should also match lowerCase notations\n */\nNote.fromNotation = function( notation ){\n     \n    var ret;\n    // split the notation\n    \n    var items = notation.split(/(\\d+)/);\n    \n    if( items.length > 3 ){\n        // more than one note, return \n        console.log(\"more than one note!\");\n        console.log(items);\n        \n    } else {\n        // convert octave to integer, defaulting on 0 (if parsing fails)\n        var octave = ( +items[1] || 0);\n        // make relative or not\n        var relative = octave < 1;\n        \n        console.log(\" Note \" + notation + \" octave = \" + octave + \", relative = \" + relative);\n        \n        // just one note\n        //console.log(items);\n        \n        // get note position \n        var nn = items[0][0].toUpperCase();\n        var npos = MUSIQ.notePositions[ MUSIQ.noteNames.indexOf( nn ) ];\n        \n        // get accidental position\n        var accString = items[0].substring(1);\n        var acc = MUSIQ.accidentals.indexOf( accString ) - 3;\n        \n        // error case\n        if( acc < -3 || typeof npos == 'undefined' || npos < 0 ){\n            // sorry, nothing we can do\n            console.log(\"ERROR: note not found (\" + notation + \")\");\n            console.assert(false); // break\n            return;\n        }\n        \n        // build the note together with the octave\n        ret = new Note( npos + acc + octave * 12, relative );\n        \n    }\n    \n    //console.log( ret );\n    \n    return ret;\n        \n};\n\n\n\n\n/**\n * the distance (in semitones) to another note\n * this is the number notation of the interval\n */\nNote.distance = function( note1, note2 ){\n  return note2.pos - note1.pos;  \n};\n\n/**\n * returns the relative distance from note1 to note2\n */\nNote.relativeDistance = function( note1, note2){\n  var rel = note2.toRelative().pos - note1.toRelative().pos;\n  return ( rel < 0 ) ? rel + 12 : rel;\n};\n\n/**\n * returns the shortest distance from note1 to note2\n */\nNote.shortestDistance = function( note1, note2 ){\n    return 0;\n};\n\n/**\n * returns the shortest relative distance\n */\nNote.shortestRelativeDistance = function( note1, note2 ){\n    return 0;\n}; \n\n\n/**\n * the interval between the notes\n */\nNote.interval = function( note1, note2 ){\n    return new Interval( Note.distance(note1, note2) );\n};\n\nNote.signature = function( note ){\n    return MUSIQ.signatures[note.toRelative().pos];\n};\n\nNote.cofPosition = function( note ){\n    return MUSIQ.cofPositions[note.toRelative().pos];\n};\n\n/**\n * get the proper notation for a note\n */\nNote.notation = function( note, flat ){\n    // check flat\n    if( flat ){\n        return MUSIQ.flatNames[note.toRelative().pos] + note.octave();\n    } else {\n        return MUSIQ.sharpNames[note.toRelative().pos] + note.octave();\n    }\n};\n\n/**\n * get a simple notation for a note, i.e. C#\n */\nNote.simpleNotation = function( note, flat ){\n   \n   n = note;\n   if( !(note instanceof Note) ) n = new Note(note);\n   \n   if( flat ){\n        return MUSIQ.flatNames[n.toRelative().pos];\n    } else {\n        return MUSIQ.sharpNames[n.toRelative().pos];\n    } \n};\n\n/**\n * transpose a note with an interval\n */\nNote.transpose = function( note, interval ){\n    // check if it's an interval object\n    if( _.isNumber( interval ) ){\n        return new Note(note.pos + interval);\n    } else if(_.isString( interval )) {\n        return new Note(note.pos + Interval.fromName(interval).distance);\n    } else {\n        // let's hope it's an interval object\n        return new Note(note.pos + interval.distance);\n    }\n};\n\n/**\n * class methods\n */\nNote.prototype.distance = function( note ){\n    return Note.distance( this, note );\n};\n\nNote.prototype.relativeDistance = function( note ){\n    return Note.relativeDistance( this, note);\n};\n\nNote.prototype.shortestDistance = function( note ){\n    return Note.shortestDistance( this, note);\n};\n\nNote.prototype.interval = function( note ){\n    return Note.interval( this, note);\n};\n\nNote.prototype.signature = function() {\n    return Note.signature( this );\n};\n\nNote.prototype.cofPosition = function() {\n    return Note.cofPosition( this );\n};\n\nNote.prototype.notation = function(flat) {\n    return Note.notation(this, flat);\n};\n\nNote.prototype.simpleNotation = function(flat){\n    return Note.simpleNotation(this, flat);\n};\n\n/**\n * the octave the note is in\n */\nNote.prototype.octave = function( ){\n    return Math.floor(this.pos/12) || 0;\n};\n\n/**\n * convert the note to a relative position\n */\nNote.prototype.toRelative = function( ){\n    return new Note(this.pos - this.octave()*12);\n};\n\n/**\n * transpose a note\n */\n Note.prototype.transpose = function( interval ){\n     return Note.transpose( this, interval );\n };\n\n/**\n * returns the frequency (in Hz) of the note\n * in equal temperament\n * \n * use this for sound generation\n * \n * possible optimization: lookup table\n */\nNote.prototype.frequency = function(){\n    return 440 * Math.pow(2, (this.pos-69)/12 );\n};\n\n"]],"start1":0,"start2":0,"length1":0,"length2":5603}]],"length":5603}
{"contributors":[],"silentsave":false,"ts":1360865075123,"patch":[[{"diffs":[[0,"\");\n            "],[1,"//"],[0,"console.assert(f"]],"start1":1894,"start2":1894,"length1":32,"length2":34}]],"length":5605,"saved":false}
{"ts":1360865740032,"patch":[[{"diffs":[[0," or not\n"],[1,"        // the items[1] == \"0\" checks if we have the 0 character. if so, it's relative,\n        // but on the lowest octave\n"],[0,"        "]],"start1":1172,"start2":1172,"length1":16,"length2":140},{"diffs":[[0,"tave < 1"],[1," || items[1] == \"0\""],[0,";\n      "]],"start1":1329,"start2":1329,"length1":16,"length2":35}]],"length":5748,"saved":false}
{"ts":1360865764022,"patch":[[{"diffs":[[0,"|| items[1] "],[-1,"="],[1,"!"],[0,"= \"0\";\n     "]],"start1":1338,"start2":1338,"length1":25,"length2":25}]],"length":5748,"saved":false}
{"ts":1360865805720,"patch":[[{"diffs":[[0,"ave < 1 "],[-1,"||"],[1,"&&"],[0," items[1"]],"start1":1330,"start2":1330,"length1":18,"length2":18},{"diffs":[[0,"= \"0\";\n        \n"],[1,"        \n        \n"],[0,"        console."]],"start1":1351,"start2":1351,"length1":32,"length2":50}]],"length":5766,"saved":false}
{"ts":1360866006599,"patch":[[{"diffs":[[0,"    "],[-1,"// make relative or not\n        // the items[1] == \"0\" checks if we have the 0 character. if so, it's"],[1,"\n        // if no octave is specified\n        // but if a 0 is explicitly mentioned (like in C0)\n        // it's not a"],[0," rel"]],"start1":1152,"start2":1152,"length1":109,"length2":126},{"diffs":[[0,"relative"],[-1,","],[1," note"],[0,"\n       "]],"start1":1275,"start2":1275,"length1":17,"length2":21},{"diffs":[[0,"    "],[-1,"// but on the lowest octave"],[1,"\n        // "],[0,"\n   "]],"start1":1293,"start2":1293,"length1":35,"length2":20},{"diffs":[[0," < 1"],[-1," &&"],[1,";\n        if("],[0," ite"]],"start1":1339,"start2":1339,"length1":11,"length2":21},{"diffs":[[0,"[1] "],[-1,"!"],[1,"="],[0,"= \"0\""],[1," ) relative = false"],[0,";\n  "]],"start1":1362,"start2":1362,"length1":14,"length2":33}]],"length":5801,"saved":false}
{"ts":1360866019500,"patch":[[{"diffs":[[0,"   \n"],[-1,"        // \n"],[0,"    "]],"start1":1294,"start2":1294,"length1":20,"length2":8}]],"length":5789,"saved":false}
{"ts":1360867663343,"patch":[[{"diffs":[[0,"\");\n"],[-1,"            //console.assert(false); // break\n"],[0,"    "]],"start1":2078,"start2":2078,"length1":54,"length2":8}]],"length":5743,"saved":false}
{"ts":1360867667658,"patch":[[{"diffs":[[0,"console."],[-1,"log"],[1,"warn"],[0,"(\"ERROR:"]],"start1":2025,"start2":2025,"length1":19,"length2":20}]],"length":5744,"saved":false}
{"ts":1360867677769,"patch":[[{"diffs":[[0,"    "],[-1,"    \n    }\n    \n    //console.log( ret );"],[1,"}"],[0,"\n   "]],"start1":2235,"start2":2235,"length1":49,"length2":9}]],"length":5704,"saved":false}
{"ts":1360867696642,"patch":[[{"diffs":[[0,"       \n        "],[1,"//"],[0,"console.log(\" No"]],"start1":1400,"start2":1400,"length1":32,"length2":34}]],"length":5706,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360884463705,"patch":[[{"diffs":[[0,"       \n"],[-1,"        \n        \n"],[0,"        "]],"start1":1382,"start2":1382,"length1":34,"length2":16}]],"length":5688,"saved":false}
{"ts":1360886978309,"patch":[[{"diffs":[[0,"\n    } \n};\n\n"],[1,"/**\n * can this note have the following name?\n * \n * compensates for accidentals, i.e. \n */\n \n\n"],[0,"/**\n * trans"]],"start1":3836,"start2":3836,"length1":24,"length2":119}]],"length":5783,"saved":false}
{"ts":1360887003222,"patch":[[{"diffs":[[0,". \n */\n "],[1,"Note.hasName = function( name ){\n     \n }"],[0,"\n\n/**\n *"]],"start1":3933,"start2":3933,"length1":16,"length2":57}]],"length":5824,"saved":false}
{"ts":1360887194974,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"/**\n * can this note have the following name?\n * \n * compensates for accidentals, i.e. \n */\n Note.hasName = function( name ){\n     \n }"],[0,"\n\n/*"]],"start1":3844,"start2":3844,"length1":142,"length2":8}]],"length":5690,"saved":false}
{"ts":1360887376377,"patch":[[{"diffs":[[0," flat);\n};\n\n"],[1,"/**\n * can this note have the following name?\n * \n * compensates for accidentals, i.e. \n */\n Note.prototype.hasName = function( name ){\n     return this.pos == Note.fromNotation(name).pos;\n }\n\n"],[0,"/**\n * the o"]],"start1":5035,"start2":5035,"length1":24,"length2":217}]],"length":5883,"saved":false}
{"ts":1360887627158,"patch":[[{"diffs":[[0,"he notation\n"],[1,"    if( !notation) return;\n"],[0,"    \n    var"]],"start1":811,"start2":811,"length1":24,"length2":51}]],"length":5910,"saved":false}
{"ts":1360887629971,"patch":[[{"diffs":[[0,"notation"],[1," "],[0,") return"]],"start1":832,"start2":832,"length1":16,"length2":17}]],"length":5911,"saved":false}
{"ts":1360887747197,"patch":[[{"diffs":[[0,"  return"],[1," Note.fromNotation(name) &&"],[0," this.po"]],"start1":5214,"start2":5214,"length1":16,"length2":43}]],"length":5938,"saved":false}
{"ts":1360889861424,"patch":[[{"diffs":[[0," do\n            "],[1,"//"],[0,"console.warn(\"ER"]],"start1":2021,"start2":2021,"length1":32,"length2":34}]],"length":5940,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360899327855,"patch":[[{"diffs":[[0,"eturn;\n    \n"],[1,"    var matches = MUSIQ.isValidNote( name );\n    \n    //console.log( matches );\n    \n    // no chord found?\n    if( !matches ){\n        console.warn(\"Note not found : \" + name);\n        return;\n    }\n    \n    \n"],[0,"    var item"]],"start1":844,"start2":844,"length1":24,"length2":234}]],"length":6150,"saved":false}
{"ts":1360899342259,"patch":[[{"diffs":[[0,");\n    \n    "],[-1,"//"],[0,"console.log("]],"start1":898,"start2":898,"length1":26,"length2":24},{"diffs":[[0,"}\n    \n    \n"],[1,"    \n    \n"],[0,"    var item"]],"start1":1052,"start2":1052,"length1":24,"length2":34}]],"length":6158,"saved":false}
{"ts":1360899495498,"patch":[[{"diffs":[[0,"dNote( n"],[-1,"ame"],[1,"otation"],[0," );\n    "]],"start1":886,"start2":886,"length1":19,"length2":23},{"diffs":[[0,"ion );\n    \n"],[1,"    console.log( \"Note.fromNotation matches : \" + notation );\n"],[0,"    console."]],"start1":898,"start2":898,"length1":24,"length2":86}]],"length":6224,"saved":false}
{"ts":1360899563315,"patch":[[{"diffs":[[0,");\n    \n    "],[1,"//"],[0,"console.log("]],"start1":902,"start2":902,"length1":24,"length2":26},{"diffs":[[0,"tion );\n    "],[1,"//"],[0,"console.log("]],"start1":966,"start2":966,"length1":24,"length2":26}]],"length":6228,"saved":false}
{"ts":1360899731716,"patch":[[{"diffs":[[0," }\n    \n    "],[-1,"\n    \n    "],[1,"var note = matches[1];\n    var acc = matches[2];\n    var octave = matches[3];\n    \n    \n    \n    /*"],[0,"\n    var ite"]],"start1":1121,"start2":1121,"length1":34,"length2":123},{"diffs":[[0,"   \n    } else {"],[1,"*/"],[0,"\n        // conv"]],"start1":1423,"start2":1423,"length1":32,"length2":34},{"diffs":[[0,"tive );\n    "],[1,"//"],[0,"}\n    \n    r"]],"start1":2620,"start2":2620,"length1":24,"length2":26}]],"length":6321,"saved":false}
{"ts":1360899851861,"patch":[[{"diffs":[[0,"ls)\n        "],[-1,"var "],[0,"octave = ( +"]],"start1":1511,"start2":1511,"length1":28,"length2":24},{"diffs":[[0,"ve = ( +"],[-1,"items[1]"],[1,"octave"],[0," || 0);\n"]],"start1":1527,"start2":1527,"length1":24,"length2":22},{"diffs":[[0,"if( "],[-1,"items[1"],[1,"matches[3"],[0,"] =="]],"start1":1742,"start2":1742,"length1":15,"length2":17},{"diffs":[[0,"n = "],[-1,"items[0][0]"],[1,"note"],[0,".toU"]],"start1":2006,"start2":2006,"length1":19,"length2":12},{"diffs":[[0,"ion\n"],[-1,"        var accString = items[0].substring(1);\n"],[0,"    "]],"start1":2143,"start2":2143,"length1":55,"length2":8},{"diffs":[[0,"xOf( acc"],[-1,"String"],[0," ) - 3;\n"]],"start1":2187,"start2":2187,"length1":22,"length2":16}]],"length":6257,"saved":false}
{"ts":1360899972282,"patch":[[{"diffs":[[0,");\n    \n    "],[-1,"//"],[0,"console.log("]],"start1":902,"start2":902,"length1":26,"length2":24},{"diffs":[[0,"tion );\n    "],[-1,"//"],[0,"console.log("]],"start1":964,"start2":964,"length1":26,"length2":24}]],"length":6253,"saved":false}
{"ts":1360900056081,"patch":[[{"diffs":[[0,"n ) ];\n        \n"],[1,"        console.log( npos );\n        \n"],[0,"        // get a"]],"start1":2092,"start2":2092,"length1":32,"length2":70}]],"length":6291,"saved":false}
{"ts":1360900094752,"patch":[[{"diffs":[[0,"       \n        "],[-1,"//"],[0,"console.log(\" No"]],"start1":1781,"start2":1781,"length1":34,"length2":32}]],"length":6289,"saved":false}
{"ts":1360900147417,"patch":[[{"diffs":[[0," do\n            "],[-1,"//"],[0,"console.warn(\"ER"]],"start1":2368,"start2":2368,"length1":34,"length2":32}]],"length":6287,"saved":false}
{"ts":1360900173605,"patch":[[{"diffs":[[0,"relative"],[1," + \", acc = \" + acc"],[0,");\n     "]],"start1":1873,"start2":1873,"length1":16,"length2":35}]],"length":6306,"saved":false}
{"ts":1360900238160,"patch":[[{"diffs":[[0,"tches[2]"],[1," || \"\""],[0,";\n    va"]],"start1":1168,"start2":1168,"length1":16,"length2":22},{"diffs":[[0,"ar octave = "],[1,"+"],[0,"matches[3];\n"]],"start1":1189,"start2":1189,"length1":24,"length2":25},{"diffs":[[0,"tches[3]"],[1," || 0 "],[0,";\n    \n "]],"start1":1204,"start2":1204,"length1":16,"length2":22},{"diffs":[[0,"ls)\n"],[-1,"        octave = ( +octave || 0);\n"],[0,"    "]],"start1":1520,"start2":1520,"length1":42,"length2":8}]],"length":6285,"saved":false}
{"ts":1360902591546,"patch":[[{"diffs":[[0,"l );\n };"],[1,"\n \n Note.prototype.type = function(){\n    return \"Note\";\n}"],[0,"\n\n/**\n *"]],"start1":6026,"start2":6026,"length1":16,"length2":74}]],"length":6343,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360904820781,"patch":[[{"diffs":[[0,");\n    \n    "],[1,"//"],[0,"console.log("]],"start1":902,"start2":902,"length1":24,"length2":26},{"diffs":[[0,"tion );\n    "],[1,"//"],[0,"console.log("]],"start1":966,"start2":966,"length1":24,"length2":26},{"diffs":[[0,"       \n        "],[1,"//"],[0,"console.log(\" No"]],"start1":1764,"start2":1764,"length1":32,"length2":34},{"diffs":[[0,"       \n        "],[1,"//"],[0,"console.log( npo"]],"start1":2102,"start2":2102,"length1":32,"length2":34}]],"length":6351,"saved":false}
{"ts":1360927046760,"patch":[[{"diffs":[[0,"elative().pos] +"],[1," this.relative ?"],[0," note.octave();\n"]],"start1":3787,"start2":3787,"length1":32,"length2":48},{"diffs":[[0,"ote.octave()"],[1," : \"\""],[0,";\n    } else"]],"start1":3821,"start2":3821,"length1":24,"length2":29},{"diffs":[[0,").pos] +"],[1," this.relative ?"],[0," note.oc"]],"start1":3901,"start2":3901,"length1":16,"length2":32},{"diffs":[[0,"octave()"],[1," : \"\""],[0,";\n    }\n"]],"start1":3931,"start2":3931,"length1":16,"length2":21}]],"length":6393,"saved":false}
{"ts":1360928349307,"patch":[[{"diffs":[[0,"lative().pos] + "],[1,"("],[0,"this.relative ? "]],"start1":3788,"start2":3788,"length1":32,"length2":33},{"diffs":[[0,"ctave() : \"\""],[1,")"],[0,";\n    } else"]],"start1":3827,"start2":3827,"length1":24,"length2":25},{"diffs":[[0,".pos] + "],[1,"("],[0,"this.rel"]],"start1":3904,"start2":3904,"length1":16,"length2":17},{"diffs":[[0,"e() : \"\""],[1,")"],[0,";\n    }\n"]],"start1":3939,"start2":3939,"length1":16,"length2":17}]],"length":6397,"saved":false}
{"ts":1360928366601,"patch":[[{"diffs":[[0,"ative().pos] + ("],[-1,"this"],[1,"note"],[0,".relative ? note"]],"start1":3789,"start2":3789,"length1":36,"length2":36},{"diffs":[[0,"pos] + ("],[-1,"this"],[1,"note"],[0,".relativ"]],"start1":3905,"start2":3905,"length1":20,"length2":20}]],"length":6397,"saved":false}
{"ts":1360928391649,"patch":[[{"diffs":[[0,"ative().pos] + ("],[1,"!"],[0,"note.relative ? "]],"start1":3789,"start2":3789,"length1":32,"length2":33},{"diffs":[[0,"pos] + ("],[1,"!"],[0,"note.rel"]],"start1":3906,"start2":3906,"length1":16,"length2":17}]],"length":6399,"saved":false}
{"ts":1360930822771,"patch":[[{"diffs":[[0,"   \n};\n\n"],[1,"/**\n * make a note object from a position\n */\nNote.fromPos( pos ){\n    return new Note( pos );\n}"],[0,"\n\n\n/**\n "]],"start1":2634,"start2":2634,"length1":16,"length2":112},{"diffs":[[0,").pos];\n};\n\n"],[1,"\n\n"],[0,"/**\n * get t"]],"start1":3712,"start2":3712,"length1":24,"length2":26}]],"length":6497,"saved":false}
{"ts":1360930827996,"patch":[[{"diffs":[[0,"pos );\n}"],[1,";"],[0,"\n\n\n/**\n "]],"start1":2730,"start2":2730,"length1":16,"length2":17}]],"length":6498,"saved":false}
{"ts":1360930833037,"patch":[[{"diffs":[[0,".fromPos"],[1," = function"],[0,"( pos ){"]],"start1":2692,"start2":2692,"length1":16,"length2":27}]],"length":6509,"saved":false}
{"ts":1360930871183,"patch":[[{"diffs":[[0," flat);\n};\n\n"],[1,"Note.prototype.simple = \n"],[0,"Note.prototy"]],"start1":5480,"start2":5480,"length1":24,"length2":49}]],"length":6534,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360948369859,"patch":[[{"diffs":[[0,"ion( pos ){\n"],[1,"    console.log( pos );\n"],[0,"    return n"]],"start1":2708,"start2":2708,"length1":24,"length2":48},{"diffs":[[0,"ck flat\n"],[1,"    var ret = \"\";\n    \n"],[0,"    if( "]],"start1":3858,"start2":3858,"length1":16,"length2":39},{"diffs":[[0,"t ){\n        ret"],[-1,"urn"],[1," ="],[0," MUSIQ.flatNames"]],"start1":3900,"start2":3900,"length1":35,"length2":34},{"diffs":[[0,"se {\n        ret"],[-1,"urn"],[1," ="],[0," MUSIQ.sharpName"]],"start1":4007,"start2":4007,"length1":35,"length2":34},{"diffs":[[0,"() : \"\");\n    }\n"],[1,"    \n    // experimental : replace b with ♭\n    return ret.replace(\"b\",\"♭\");\n    \n"],[0,"};\n\n/**\n * get a"]],"start1":4097,"start2":4097,"length1":32,"length2":114}]],"length":6661,"saved":false}
{"ts":1360948419357,"patch":[[{"diffs":[[0,"\"b\",\"♭\")"],[1,".replace(\"#\",\"♯\")"],[0,";\n    \n}"]],"start1":4180,"start2":4180,"length1":16,"length2":33}]],"length":6678,"saved":false}
{"ts":1360948425472,"patch":[[{"diffs":[[0,"b with ♭"],[1," and # with ♯"],[0,"\n    ret"]],"start1":4148,"start2":4148,"length1":16,"length2":29}]],"length":6691,"saved":false}
{"ts":1360948438394,"patch":[[{"diffs":[[0," with ♯\n"],[1,"    // should probably check for unicode support?\n"],[0,"    retu"]],"start1":4162,"start2":4162,"length1":16,"length2":66}]],"length":6741,"saved":false}
{"ts":1360948511079,"patch":[[{"diffs":[[0,"= note;\n"],[1,"   var ret;\n   \n"],[0,"   if( !"]],"start1":4387,"start2":4387,"length1":16,"length2":32},{"diffs":[[0,"\n        ret"],[-1,"urn"],[1," ="],[0," MUSIQ.flatN"]],"start1":4482,"start2":4482,"length1":27,"length2":26},{"diffs":[[0,"\n        ret"],[-1,"urn"],[1," ="],[0," MUSIQ.sharp"]],"start1":4546,"start2":4546,"length1":27,"length2":26},{"diffs":[[0,"\n    } \n"],[1,"    \n    // experimental : replace b with ♭ and # with ♯\n    // should probably check for unicode support?\n    return ret.replace(\"b\",\"♭\").replace(\"#\",\"♯\");\n"],[0,"};\n\n\n\n/*"]],"start1":4598,"start2":4598,"length1":16,"length2":173}]],"length":6912,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361067426493,"patch":[[{"diffs":[[0,"r acc = "],[1,"("],[0,"matches["]],"start1":1162,"start2":1162,"length1":16,"length2":17},{"diffs":[[0,"2] || \"\""],[1,").replace(\"♭\",\"b\").replace(\"♯\",\"#\");"],[0,";\n    va"]],"start1":1179,"start2":1179,"length1":16,"length2":52},{"diffs":[[0,"elative "],[-1,"position"],[1,"note"],[0,"\n */\nNot"]],"start1":6397,"start2":6397,"length1":24,"length2":20},{"diffs":[[0,"()*12);\n};\n\n"],[1,"\n"],[0,"/**\n * trans"]],"start1":6497,"start2":6497,"length1":24,"length2":25}]],"length":6946,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361068956871,"patch":[[{"diffs":[[0,";\n    }\n};\n\n"],[1,"\n"],[0,"/**\n * class"]],"start1":5242,"start2":5242,"length1":24,"length2":25}]],"length":6947,"saved":false}
{"ts":1361070373637,"patch":[[{"diffs":[[0,"()*12);\n};\n\n"],[1,"/**\n * get the relative position of the note\n */\nNote.prototype.relPos = function(){\n    this.\n}\n\n"],[0,"\n/**\n * tran"]],"start1":6498,"start2":6498,"length1":24,"length2":122}]],"length":7045,"saved":false}
{"ts":1361070384706,"patch":[[{"diffs":[[0,"   this."],[1,"toRelative().pos;"],[0,"\n}"],[1,";"],[0,"\n\n\n/**\n "]],"start1":6596,"start2":6596,"length1":18,"length2":36}]],"length":7063,"saved":false}
{"ts":1361070577678,"patch":[[{"diffs":[[0,"ction(){\n   "],[1," return this.relative ? this.pos :"],[0," this.toRela"]],"start1":6586,"start2":6586,"length1":24,"length2":58}]],"length":7097,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361207955887,"patch":[[{"diffs":[[0,"return \""],[-1,"N"],[1,"n"],[0,"ote\";\n}\n"]],"start1":6830,"start2":6830,"length1":17,"length2":17}]],"length":7097,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361319262463,"patch":[[{"diffs":[[0,"oRelative = "],[1,"\nNote.prototype.rel = "],[0,"function( ){"]],"start1":6431,"start2":6431,"length1":24,"length2":46}]],"length":7119,"saved":false}
{"ts":1361319343515,"patch":[[{"diffs":[[0,"e\n *"],[-1,"/\nNote.notation = function( note, flat"],[1," \n * @param signature : integer representing the amount of sharps of flats\n * \n */\nNote.notation = function( note, signature ){\n    \n    if( signature"],[0," )"],[-1,"{"],[0,"\n   "]],"start1":3839,"start2":3839,"length1":49,"length2":160}]],"length":7230,"saved":false}
{"ts":1361319403959,"patch":[[{"diffs":[[0,"   \n    "],[-1,"if("],[1,"flat = _(signature) &&"],[0," signatu"]],"start1":3972,"start2":3972,"length1":19,"length2":38},{"diffs":[[0,"gnature "],[-1,")"],[1,"< 0 "],[0,"\n    // "]],"start1":4005,"start2":4005,"length1":17,"length2":20}]],"length":7252,"saved":false}
{"ts":1361320175939,"patch":[[{"diffs":[[0,"t = "],[-1,"_("],[0,"sign"]],"start1":3983,"start2":3983,"length1":10,"length2":8},{"diffs":[[0,"ture"],[-1,") && signature < 0 "],[1," >= 0;"],[0,"\n   "]],"start1":3992,"start2":3992,"length1":27,"length2":14}]],"length":7237,"saved":false}
{"ts":1361320413572,"patch":[[{"diffs":[[0,"   \n    "],[1,"var sig = 0;\n    if( typeof signature == \"undefined\")\n        sig = 0;\n    else if( _(signature).isBoolean() )\n        sig = signature ? 0 : -1;\n        \n    "],[0,"flat = s"]],"start1":3972,"start2":3972,"length1":16,"length2":174},{"diffs":[[0,"at = sig"],[-1,"nature"],[0," >= 0;\n "]],"start1":4140,"start2":4140,"length1":22,"length2":16}]],"length":7389,"saved":false}
{"ts":1361320419167,"patch":[[{"diffs":[[0,"   \n    "],[1,"var "],[0,"flat = s"]],"start1":4130,"start2":4130,"length1":16,"length2":20}]],"length":7393,"saved":false}
{"ts":1361320457326,"patch":[[{"diffs":[[0,"    sig = 0;"],[1," // default to C (no sharps or flats)"],[0,"\n    else if"]],"start1":4038,"start2":4038,"length1":24,"length2":61},{"diffs":[[0," 0 : -1;"],[1," // if signature is a boolean"],[0,"\n       "]],"start1":4153,"start2":4153,"length1":16,"length2":45}]],"length":7459,"saved":false}
{"ts":1361320497259,"patch":[[{"diffs":[[0,"unction("],[-1,"flat"],[1,"signature"],[0,") {\n    "]],"start1":6190,"start2":6190,"length1":20,"length2":25},{"diffs":[[0,"ation(this, "],[-1,"flat"],[1,"signature"],[0,");\n};\n\nNote."]],"start1":6230,"start2":6230,"length1":28,"length2":33}]],"length":7469,"saved":false}
{"ts":1361320515867,"patch":[[{"diffs":[[0,"unction("],[-1,"flat"],[1,"signature"],[0,"){\n    r"]],"start1":6316,"start2":6316,"length1":20,"length2":25},{"diffs":[[0,"n(this, "],[-1,"flat"],[1,"signature"],[0,");\n};\n\n/"]],"start1":6365,"start2":6365,"length1":20,"length2":25}]],"length":7479,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361320697610,"patch":[[{"diffs":[[0,"var "],[-1,"sig = 0;\n    if( typeof signature == \"undefined\")\n        sig = 0; // default to C (no sharps or flats)\n    else if( _(signature).isBoolean() )\n        sig = signature ? 0 : -1; // if signature is a boolean\n        \n    var flat = sig >= 0;"],[1,"flat = Note.flatSignature( signature );\n    "],[0,"\n   "]],"start1":3980,"start2":3980,"length1":248,"length2":52}]],"length":7283,"saved":false}
{"ts":1361320764516,"patch":[[{"diffs":[[0,"\",\"♯\");\n};\n\n"],[1,"/**\n * checks if a signature is flat\n */\nNote.flatSignature = function( signature ){\n    var sig = 0;\n    if( typeof signature == \"undefined\")\n        sig = 0; // default to C (no sharps or flats)\n    else if( _(signature).isBoolean() )\n        sig = signature ? 0 : -1; // if signature is a boolean\n    \n    // else return false\n    return sig >= 0;\n}\n\n"],[0,"\n\n/**\n * tra"]],"start1":4936,"start2":4936,"length1":24,"length2":378}]],"length":7637,"saved":false}
{"ts":1361320800362,"patch":[[{"diffs":[[0,"*/\nNote."],[-1,"flatS"],[1,"s"],[0,"ignature"],[1,"IsFlat"],[0," = funct"]],"start1":4986,"start2":4986,"length1":29,"length2":31},{"diffs":[[0,"sig "],[-1,">="],[1,"<"],[0," 0;\n"]],"start1":5291,"start2":5291,"length1":10,"length2":9}]],"length":7638,"saved":false}
{"ts":1361320828080,"patch":[[{"diffs":[[0,"is flat\n"],[1," * \n"],[0," */\nNote"]],"start1":4977,"start2":4977,"length1":16,"length2":20},{"diffs":[[0,"  //"],[-1," else"],[0," return "],[-1,"false"],[1,"true "],[0,"\n   "]],"start1":5261,"start2":5261,"length1":26,"length2":21}]],"length":7637,"saved":false}
{"ts":1361320841007,"patch":[[{"diffs":[[0,"rn true "],[1," if the signature is lower than 0"],[0,"\n    ret"]],"start1":5270,"start2":5270,"length1":16,"length2":49}]],"length":7670,"saved":false}
{"ts":1361320856996,"patch":[[{"diffs":[[0,"boolean\n    "],[1,"else\n        sig = signature;"],[0,"\n    // retu"]],"start1":5246,"start2":5246,"length1":24,"length2":53}]],"length":7699,"saved":false}
{"ts":1361320891816,"patch":[[{"diffs":[[0,"Names[n."],[-1,"toRelative().pos"],[1,"relPos()"],[0,"];\n    }"]],"start1":4688,"start2":4688,"length1":32,"length2":24},{"diffs":[[0,"Names[n."],[-1,"toRelative().pos"],[1,"relPos()"],[0,"];\n    }"]],"start1":4745,"start2":4745,"length1":32,"length2":24}]],"length":7683,"saved":false}
{"ts":1361320904979,"patch":[[{"diffs":[[0,"( note, "],[-1,"flat"],[1,"signature"],[0," ){\n   \n"]],"start1":4543,"start2":4543,"length1":20,"length2":25},{"diffs":[[0,"\n   \n   if( "],[-1,"flat"],[1,"Note.signatureIsFlat( signature )"],[0," ){\n        "]],"start1":4649,"start2":4649,"length1":28,"length2":57}]],"length":7717,"saved":false}
{"ts":1361320920214,"patch":[[{"diffs":[[0,"   \n"],[-1,"    var flat = Note.flatSignature( signature );\n    \n"],[0,"    "]],"start1":3972,"start2":3972,"length1":61,"length2":8},{"diffs":[[0,"    if( "],[-1,"flat"],[1,"Note.signatureIsFlat( signature )"],[0," ){\n    "]],"start1":4017,"start2":4017,"length1":20,"length2":49}]],"length":7693,"saved":false}
{"ts":1361320931769,"patch":[[{"diffs":[[0,"es[note."],[-1,"toRelative().pos"],[1,"relPos()"],[0,"] + (!no"]],"start1":4089,"start2":4089,"length1":32,"length2":24},{"diffs":[[0,"es[note."],[-1,"toRelative().pos"],[1,"relPos()"],[0,"] + (!no"]],"start1":4189,"start2":4189,"length1":32,"length2":24}]],"length":7677,"saved":false}
{"ts":1361320987203,"patch":[[{"diffs":[[0,"f( _"],[-1,".isNumber"],[0,"( in"]],"start1":5479,"start2":5479,"length1":17,"length2":8},{"diffs":[[0,"terval )"],[1,".isNumber()"],[0," ){\n    "]],"start1":5487,"start2":5487,"length1":16,"length2":27},{"diffs":[[0,"if(_"],[-1,".isString"],[0,"( in"]],"start1":5567,"start2":5567,"length1":17,"length2":8},{"diffs":[[0,"terval )"],[1,".isString() "],[0,") {\n    "]],"start1":5575,"start2":5575,"length1":16,"length2":28}]],"length":7682,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363902951885,"patch":[[{"diffs":[[0," object\n * \n"],[1," * @constructor\n"],[0," * @param po"]],"start1":24,"start2":24,"length1":24,"length2":40},{"diffs":[[0,"  @param"],[-1," :"],[0," notatio"]],"start1":604,"start2":604,"length1":18,"length2":16}]],"length":7696,"saved":false}
{"ts":1363902984700,"patch":[[{"diffs":[[0,"ram pos "],[-1,":"],[1,"-"],[0," the mid"]],"start1":58,"start2":58,"length1":17,"length2":17},{"diffs":[[0,"elative "],[-1,":"],[1,"-"],[0," a boole"]],"start1":109,"start2":109,"length1":17,"length2":17}]],"length":7696,"saved":false}
{"ts":1363903004731,"patch":[[{"diffs":[[0,"notation"],[1," -"],[0," in the "]],"start1":613,"start2":613,"length1":16,"length2":18},{"diffs":[[0,"1, note2"],[1," "],[0,"){\n  var"]],"start1":3111,"start2":3111,"length1":16,"length2":17}]],"length":7699,"saved":false}
{"ts":1363903031004,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"/**\n * returns the shortest relative distance\n */\nNote.shortestRelativeDistance = function( note1, note2 ){\n    return 0;\n}; \n\n\n"],[0,"/**\n"]],"start1":3352,"start2":3352,"length1":136,"length2":8}]],"length":7571,"saved":false}
{"ts":1363903040692,"patch":[[{"diffs":[[0,"turn 0;\n};\n\n"],[1,"/**\n * returns the shortest relative distance\n */\nNote.shortestRelativeDistance = function( note1, note2 ){\n    return 0;\n}; \n\n\n"],[0,"/**\n * the i"]],"start1":3344,"start2":3344,"length1":24,"length2":152}]],"length":7699,"saved":false}
{"ts":1363904112761,"patch":[[{"diffs":[[0,"tations\n"],[1,"    @returns {Note} - a note object\n"],[0," */\nNote"]],"start1":740,"start2":740,"length1":16,"length2":52}]],"length":7735,"saved":false}
{"ts":1363904209160,"patch":[[{"diffs":[[0,"of the interval\n"],[1," * \n * @returns {integer} - The distance between the notes in semitones\n"],[0," */\nNote.distanc"]],"start1":2948,"start2":2948,"length1":32,"length2":104}]],"length":7807,"saved":false}
{"ts":1363904475374,"patch":[[{"diffs":[[0," to note2\n *"],[-1,""],[0,""],[1," \n * @returns {integer} - The relative distance between the notes in semitones\n *"],[0,"/\nNote.relat"]],"start1":3167,"start2":3167,"length1":24,"length2":105},{"diffs":[[0,"rel;\n};\n\n/**\n * "],[1,"@"],[0,"returns"],[1," {integer} -"],[0," the shortest di"]],"start1":3407,"start2":3407,"length1":39,"length2":52},{"diffs":[[0,"o note2\n"],[1," * \n"],[0," */\nNote"]],"start1":3478,"start2":3478,"length1":16,"length2":20},{"diffs":[[0,"\n};\n\n/**\n * "],[1,"@"],[0,"returns"],[1," {integer} -"],[0," the shortes"]],"start1":3557,"start2":3557,"length1":31,"length2":44},{"diffs":[[0,"s\n *"],[-1,"/\nNote.interval = function( note1, note2 ){\n    return new Interval( Note.distance(note1, note2) );\n};\n\nNote.signature = function( note ){\n    return MUSIQ.signatures[note.toRelative().pos];\n};\n"],[1," \n * @param {Note} note1 - The first note\n * @param {Note} note2 - The second note\n * @returns {Interval} The interval between the notes\n */\nNote.interval = function( note1, note2 ){\n    return new Interval( Note.distance(note1, note2) );\n};\n\n/**\n * @returns {integer} - The signature as an integer representing the amount\n *                      of sharps or flats the scale has when using this\n *                      note as root.\n */\nNote.signature = function( note ){\n    return MUSIQ.signatures[note.toRelative().pos];\n};\n\n/**\n * @returns {integer} - the position on the circle of fifths as an integer\n *                      ( C = 0, G = 1, D = 2, ... F = -1 )\n */"],[0,"\nNot"]],"start1":3739,"start2":3739,"length1":202,"length2":679},{"diffs":[[0,"ram "],[-1,"signature :"],[1,"note {Note} - A Note object\n * @param signature {integer} -"],[0," int"]],"start1":4564,"start2":4564,"length1":19,"length2":67},{"diffs":[[0,"of flats\n * "],[1,"@returns {string} - the notation used based on the "],[0,"\n */\nNote.no"]],"start1":4670,"start2":4670,"length1":24,"length2":75}]],"length":8494,"saved":false}
{"ts":1363904549281,"patch":[[{"diffs":[[0,"teger} -"],[-1," integer representing"],[0," the amo"]],"start1":4619,"start2":4619,"length1":37,"length2":16},{"diffs":[[0,"of flats"],[1," \n *                              (0 = no sharps / flats, 1 = 1 sharp, -1 = 1 flat, etc.)\n * "],[0,"\n * @ret"]],"start1":4649,"start2":4649,"length1":16,"length2":109},{"diffs":[[0,"i.e. C#\n"],[1," * \n * @param note {Note} - A note object\n * @param signature\n"],[0," */\nNote"]],"start1":5345,"start2":5345,"length1":16,"length2":78}]],"length":8628,"saved":false}
{"ts":1363904611345,"patch":[[{"diffs":[[0," a note\n * \n"],[1," * In the end, we use the unicode characters ♭ and ♯ to represent sharps and \n * flats, instead of b or #\n * \n"],[0," * @param no"]],"start1":4546,"start2":4546,"length1":24,"length2":134}]],"length":8738,"saved":false}
{"ts":1363904714591,"patch":[[{"diffs":[[0,"ignature"],[1," {integer} - the amount of sharps of flats \n *                              (0 = no sharps / flats, 1 = 1 sharp, -1 = 1 flat, etc.)\n * \n * @returns {string}"],[0,"\n */\nNot"]],"start1":5516,"start2":5516,"length1":16,"length2":172},{"diffs":[[0,"is flat\n * \n"],[1," * @param signature {boolean} - \n * \n * @returns {boolean} - True if the signature is flat (one or more b)\n"],[0," */\nNote.sig"]],"start1":6167,"start2":6167,"length1":24,"length2":131}]],"length":9001,"saved":false}
{"ts":1363904845527,"patch":[[{"diffs":[[0,"{boolean"],[-1,"} - "],[1,"|integer} - the signature ( if an integer, )"],[0,"\n * \n * "]],"start1":6199,"start2":6199,"length1":20,"length2":60},{"diffs":[[0,"ture ){\n    "],[1,"//"],[0,"var sig = 0;"]],"start1":6368,"start2":6368,"length1":24,"length2":26},{"diffs":[[0,"   else\n        "],[-1,"sig ="],[1,"return"],[0," signature;\n    "]],"start1":6594,"start2":6594,"length1":37,"length2":38},{"diffs":[[0,"ignature"],[1," < 0"],[0,";\n    //"]],"start1":6618,"start2":6618,"length1":16,"length2":20},{"diffs":[[0,"n 0\n"],[1,""],[0,"    "],[-1,"return sig < 0;"],[0,"\n}\n\n"]],"start1":6681,"start2":6681,"length1":27,"length2":12}]],"length":9033,"saved":false}
{"ts":1363904863976,"patch":[[{"diffs":[[0,"        "],[-1,"sig = 0"],[1,"return false"],[0,"; // def"]],"start1":6436,"start2":6436,"length1":23,"length2":28},{"diffs":[[0,"        "],[-1,"sig ="],[1,"return"],[0," signatu"]],"start1":6535,"start2":6535,"length1":21,"length2":22},{"diffs":[[0,"ture"],[-1," ? 0 : -1"],[0,"; //"]],"start1":6555,"start2":6555,"length1":17,"length2":8}]],"length":9030,"saved":false}
{"ts":1363904900789,"patch":[[{"diffs":[[0,"nterval\n"],[1," * @param note {Note} - A note object\n * @param interval {Interval} - An interval object\n"],[0," */\nNote"]],"start1":6725,"start2":6725,"length1":16,"length2":105}]],"length":9119,"saved":false}
{"ts":1363904996498,"patch":[[{"diffs":[[0,"nterval\n * \n"],[1," * @param note1 {Note} - The first note\n * @param note2 {Note} - The second note\n"],[0," * @returns "]],"start1":2956,"start2":2956,"length1":24,"length2":105}]],"length":9200,"saved":false}
{"ts":1363905294770,"patch":[[{"diffs":[[0,"o note2\n * \n"],[1," * this is an integer from 0 - 11 representing the distance in semitones between\n * the notes\n * \n * @param note1 {Note} - The first note\n * @param note2 {Note} - The second note\n * \n"],[0," * @returns "]],"start1":3250,"start2":3250,"length1":24,"length2":207},{"diffs":[[0,"es in semitones\n"],[-1,""],[0," */\nNote.relativ"]],"start1":3506,"start2":3506,"length1":32,"length2":32},{"diffs":[[0," : rel;\n};\n\n/**\n"],[1," * \n * @param note1 {Note} - The first note\n * @param note2 {Note} - The second note\n"],[0," * @returns {int"]],"start1":3668,"start2":3668,"length1":32,"length2":117},{"diffs":[[0,"o note2\n"],[-1,""],[0," * \n"],[1," *\n"],[0," */\nNote"]],"start1":3827,"start2":3827,"length1":20,"length2":23}]],"length":9471,"saved":false}
{"ts":1363905347401,"patch":[[{"diffs":[[0,"te2) );\n};\n\n/**\n"],[1," * \n * The signature as an integer representing the amount\n * of sharps or flats the scale has when using this\n * note as root.\n * \n"],[0," * @returns {int"]],"start1":4326,"start2":4326,"length1":32,"length2":164},{"diffs":[[0,").pos];\n};\n\n/**\n"],[1," * the Note's position on the circle of fifths\n * \n"],[0," * @returns {int"]],"start1":4744,"start2":4744,"length1":32,"length2":83}]],"length":9654,"saved":false}
{"ts":1363905379563,"patch":[[{"diffs":[[0,"ct from "],[-1,"the"],[1,"a string"],[0," notatio"]],"start1":581,"start2":581,"length1":19,"length2":24},{"diffs":[[0,"ation\n  "],[-1," "],[1,"* \n  *"],[0," @param "]],"start1":601,"start2":601,"length1":17,"length2":22},{"diffs":[[0,"ions\n   "],[1,"          \n  *"],[0," @return"]],"start1":753,"start2":753,"length1":16,"length2":30},{"diffs":[[0," note object"],[1," or null, when no note could be found"],[0,"\n */\nNote.fr"]],"start1":795,"start2":795,"length1":24,"length2":61}]],"length":9715,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363910064588,"patch":[[{"diffs":[[0,"aram pos"],[1," {integer}"],[0," - the m"]],"start1":57,"start2":57,"length1":16,"length2":26},{"diffs":[[0,"relative"],[1," {boolean}"],[0," - a boo"]],"start1":118,"start2":118,"length1":16,"length2":26},{"diffs":[[0,"notation"],[1," {string}"],[0," - in th"]],"start1":643,"start2":643,"length1":16,"length2":25}]],"length":9744,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363910120046,"patch":[[{"diffs":[[0,"osition\n"],[1," * \n * @param pos {integer} - the midi position of the note\n"],[0," */\nNote"]],"start1":2855,"start2":2855,"length1":16,"length2":76}]],"length":9804,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363914164886,"patch":[[{"diffs":[[0,"&& this."],[-1,"pos"],[1,"relPos()"],[0," == Note"]],"start1":8886,"start2":8886,"length1":19,"length2":24},{"diffs":[[0,"n(name)."],[-1,"pos"],[1,"relPos()"],[0,";\n }\n\n/*"]],"start1":8922,"start2":8922,"length1":19,"length2":24}]],"length":9814,"saved":false}
